/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * RBDClientValidateResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class RBDClientValidateResult {
  @SerializedName("admin_ip")
  private String adminIp = null;

  @SerializedName("hostname")
  private String hostname = null;

  @SerializedName("ip_exist")
  private Boolean ipExist = null;

  @SerializedName("name_exist")
  private Boolean nameExist = null;

  @SerializedName("public_ip")
  private String publicIp = null;

  @SerializedName("token_invalid")
  private Boolean tokenInvalid = null;

  @SerializedName("unreachable")
  private Boolean unreachable = null;

  public RBDClientValidateResult adminIp(String adminIp) {
    this.adminIp = adminIp;
    return this;
  }

   /**
   * admin ip of rbd client
   * @return adminIp
  **/
  @Schema(description = "admin ip of rbd client")
  public String getAdminIp() {
    return adminIp;
  }

  public void setAdminIp(String adminIp) {
    this.adminIp = adminIp;
  }

  public RBDClientValidateResult hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * hostname of rbd client, only appears when name_exist is true
   * @return hostname
  **/
  @Schema(description = "hostname of rbd client, only appears when name_exist is true")
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }

  public RBDClientValidateResult ipExist(Boolean ipExist) {
    this.ipExist = ipExist;
    return this;
  }

   /**
   * ip of rbd client already exist
   * @return ipExist
  **/
  @Schema(description = "ip of rbd client already exist")
  public Boolean isIpExist() {
    return ipExist;
  }

  public void setIpExist(Boolean ipExist) {
    this.ipExist = ipExist;
  }

  public RBDClientValidateResult nameExist(Boolean nameExist) {
    this.nameExist = nameExist;
    return this;
  }

   /**
   * name of rbd client already exist
   * @return nameExist
  **/
  @Schema(description = "name of rbd client already exist")
  public Boolean isNameExist() {
    return nameExist;
  }

  public void setNameExist(Boolean nameExist) {
    this.nameExist = nameExist;
  }

  public RBDClientValidateResult publicIp(String publicIp) {
    this.publicIp = publicIp;
    return this;
  }

   /**
   * public ip of rbd client
   * @return publicIp
  **/
  @Schema(description = "public ip of rbd client")
  public String getPublicIp() {
    return publicIp;
  }

  public void setPublicIp(String publicIp) {
    this.publicIp = publicIp;
  }

  public RBDClientValidateResult tokenInvalid(Boolean tokenInvalid) {
    this.tokenInvalid = tokenInvalid;
    return this;
  }

   /**
   * token is invalid
   * @return tokenInvalid
  **/
  @Schema(description = "token is invalid")
  public Boolean isTokenInvalid() {
    return tokenInvalid;
  }

  public void setTokenInvalid(Boolean tokenInvalid) {
    this.tokenInvalid = tokenInvalid;
  }

  public RBDClientValidateResult unreachable(Boolean unreachable) {
    this.unreachable = unreachable;
    return this;
  }

   /**
   * rbd client is unreachable or not
   * @return unreachable
  **/
  @Schema(description = "rbd client is unreachable or not")
  public Boolean isUnreachable() {
    return unreachable;
  }

  public void setUnreachable(Boolean unreachable) {
    this.unreachable = unreachable;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RBDClientValidateResult rbDClientValidateResult = (RBDClientValidateResult) o;
    return Objects.equals(this.adminIp, rbDClientValidateResult.adminIp) &&
        Objects.equals(this.hostname, rbDClientValidateResult.hostname) &&
        Objects.equals(this.ipExist, rbDClientValidateResult.ipExist) &&
        Objects.equals(this.nameExist, rbDClientValidateResult.nameExist) &&
        Objects.equals(this.publicIp, rbDClientValidateResult.publicIp) &&
        Objects.equals(this.tokenInvalid, rbDClientValidateResult.tokenInvalid) &&
        Objects.equals(this.unreachable, rbDClientValidateResult.unreachable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminIp, hostname, ipExist, nameExist, publicIp, tokenInvalid, unreachable);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RBDClientValidateResult {\n");
    
    sb.append("    adminIp: ").append(toIndentedString(adminIp)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    ipExist: ").append(toIndentedString(ipExist)).append("\n");
    sb.append("    nameExist: ").append(toIndentedString(nameExist)).append("\n");
    sb.append("    publicIp: ").append(toIndentedString(publicIp)).append("\n");
    sb.append("    tokenInvalid: ").append(toIndentedString(tokenInvalid)).append("\n");
    sb.append("    unreachable: ").append(toIndentedString(unreachable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
