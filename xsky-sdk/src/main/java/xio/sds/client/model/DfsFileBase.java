/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DfsFileBase
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DfsFileBase {
  @SerializedName("files")
  private Long files = null;

  @SerializedName("inode")
  private Long inode = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("type")
  private String type = null;

  public DfsFileBase files(Long files) {
    this.files = files;
    return this;
  }

   /**
   * sub file count when it is a directory
   * @return files
  **/
  @Schema(description = "sub file count when it is a directory")
  public Long getFiles() {
    return files;
  }

  public void setFiles(Long files) {
    this.files = files;
  }

  public DfsFileBase inode(Long inode) {
    this.inode = inode;
    return this;
  }

   /**
   * inode count
   * @return inode
  **/
  @Schema(description = "inode count")
  public Long getInode() {
    return inode;
  }

  public void setInode(Long inode) {
    this.inode = inode;
  }

  public DfsFileBase name(String name) {
    this.name = name;
    return this;
  }

   /**
   * file name
   * @return name
  **/
  @Schema(description = "file name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DfsFileBase path(String path) {
    this.path = path;
    return this;
  }

   /**
   * full path
   * @return path
  **/
  @Schema(description = "full path")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public DfsFileBase size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * file size
   * @return size
  **/
  @Schema(description = "file size")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public DfsFileBase type(String type) {
    this.type = type;
    return this;
  }

   /**
   * file type
   * @return type
  **/
  @Schema(description = "file type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfsFileBase dfsFileBase = (DfsFileBase) o;
    return Objects.equals(this.files, dfsFileBase.files) &&
        Objects.equals(this.inode, dfsFileBase.inode) &&
        Objects.equals(this.name, dfsFileBase.name) &&
        Objects.equals(this.path, dfsFileBase.path) &&
        Objects.equals(this.size, dfsFileBase.size) &&
        Objects.equals(this.type, dfsFileBase.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(files, inode, name, path, size, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfsFileBase {\n");
    
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    inode: ").append(toIndentedString(inode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
