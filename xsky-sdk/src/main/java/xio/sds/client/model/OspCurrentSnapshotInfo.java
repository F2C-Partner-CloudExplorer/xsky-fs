/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import xio.sds.client.model.OspOutLimitHandling;
/**
 * OspCurrentSnapshotInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class OspCurrentSnapshotInfo {
  @SerializedName("type")
  private String type = null;

  @SerializedName("snapshot_rollback_version")
  private Long snapshotRollbackVersion = null;

  @SerializedName("snapshot_write_version")
  private Long snapshotWriteVersion = null;

  @SerializedName("snapshot_limit")
  private Long snapshotLimit = null;

  @SerializedName("out_limit_handling")
  private OspOutLimitHandling outLimitHandling = null;

  public OspCurrentSnapshotInfo type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public OspCurrentSnapshotInfo snapshotRollbackVersion(Long snapshotRollbackVersion) {
    this.snapshotRollbackVersion = snapshotRollbackVersion;
    return this;
  }

   /**
   * Get snapshotRollbackVersion
   * @return snapshotRollbackVersion
  **/
  @Schema(description = "")
  public Long getSnapshotRollbackVersion() {
    return snapshotRollbackVersion;
  }

  public void setSnapshotRollbackVersion(Long snapshotRollbackVersion) {
    this.snapshotRollbackVersion = snapshotRollbackVersion;
  }

  public OspCurrentSnapshotInfo snapshotWriteVersion(Long snapshotWriteVersion) {
    this.snapshotWriteVersion = snapshotWriteVersion;
    return this;
  }

   /**
   * Get snapshotWriteVersion
   * @return snapshotWriteVersion
  **/
  @Schema(description = "")
  public Long getSnapshotWriteVersion() {
    return snapshotWriteVersion;
  }

  public void setSnapshotWriteVersion(Long snapshotWriteVersion) {
    this.snapshotWriteVersion = snapshotWriteVersion;
  }

  public OspCurrentSnapshotInfo snapshotLimit(Long snapshotLimit) {
    this.snapshotLimit = snapshotLimit;
    return this;
  }

   /**
   * Get snapshotLimit
   * @return snapshotLimit
  **/
  @Schema(description = "")
  public Long getSnapshotLimit() {
    return snapshotLimit;
  }

  public void setSnapshotLimit(Long snapshotLimit) {
    this.snapshotLimit = snapshotLimit;
  }

  public OspCurrentSnapshotInfo outLimitHandling(OspOutLimitHandling outLimitHandling) {
    this.outLimitHandling = outLimitHandling;
    return this;
  }

   /**
   * Get outLimitHandling
   * @return outLimitHandling
  **/
  @Schema(description = "")
  public OspOutLimitHandling getOutLimitHandling() {
    return outLimitHandling;
  }

  public void setOutLimitHandling(OspOutLimitHandling outLimitHandling) {
    this.outLimitHandling = outLimitHandling;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OspCurrentSnapshotInfo ospCurrentSnapshotInfo = (OspCurrentSnapshotInfo) o;
    return Objects.equals(this.type, ospCurrentSnapshotInfo.type) &&
        Objects.equals(this.snapshotRollbackVersion, ospCurrentSnapshotInfo.snapshotRollbackVersion) &&
        Objects.equals(this.snapshotWriteVersion, ospCurrentSnapshotInfo.snapshotWriteVersion) &&
        Objects.equals(this.snapshotLimit, ospCurrentSnapshotInfo.snapshotLimit) &&
        Objects.equals(this.outLimitHandling, ospCurrentSnapshotInfo.outLimitHandling);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, snapshotRollbackVersion, snapshotWriteVersion, snapshotLimit, outLimitHandling);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OspCurrentSnapshotInfo {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    snapshotRollbackVersion: ").append(toIndentedString(snapshotRollbackVersion)).append("\n");
    sb.append("    snapshotWriteVersion: ").append(toIndentedString(snapshotWriteVersion)).append("\n");
    sb.append("    snapshotLimit: ").append(toIndentedString(snapshotLimit)).append("\n");
    sb.append("    outLimitHandling: ").append(toIndentedString(outLimitHandling)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
