/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.VolumeFailedTask;
import xio.sds.client.model.VolumeIOLatency;
import xio.sds.client.model.VolumeIOSize;
import xio.sds.client.model.VolumeNonIOTask;
/**
 * VolumeStat records volume stat info
 */
@Schema(description = "VolumeStat records volume stat info")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class VolumeStat {
  @SerializedName("FailedTask")
  private VolumeFailedTask failedTask = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("io_size")
  private VolumeIOSize ioSize = null;

  @SerializedName("io_size_lat")
  private VolumeIOLatency ioSizeLat = null;

  @SerializedName("migrate_write_bandwidth_kbyte")
  private Double migrateWriteBandwidthKbyte = null;

  @SerializedName("migrate_write_iops")
  private Double migrateWriteIops = null;

  @SerializedName("migrate_write_latency_us")
  private Double migrateWriteLatencyUs = null;

  @SerializedName("non_io_task")
  private VolumeNonIOTask nonIoTask = null;

  @SerializedName("queue_depth")
  private Double queueDepth = null;

  @SerializedName("read_bandwidth_kbyte")
  private Double readBandwidthKbyte = null;

  @SerializedName("read_iops")
  private Double readIops = null;

  @SerializedName("read_latency_us")
  private Double readLatencyUs = null;

  @SerializedName("total_bandwidth_kbyte")
  private Double totalBandwidthKbyte = null;

  @SerializedName("total_iops")
  private Double totalIops = null;

  @SerializedName("write_bandwidth_kbyte")
  private Double writeBandwidthKbyte = null;

  @SerializedName("write_iops")
  private Double writeIops = null;

  @SerializedName("write_latency_us")
  private Double writeLatencyUs = null;

  public VolumeStat failedTask(VolumeFailedTask failedTask) {
    this.failedTask = failedTask;
    return this;
  }

   /**
   * Get failedTask
   * @return failedTask
  **/
  @Schema(description = "")
  public VolumeFailedTask getFailedTask() {
    return failedTask;
  }

  public void setFailedTask(VolumeFailedTask failedTask) {
    this.failedTask = failedTask;
  }

  public VolumeStat create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public VolumeStat ioSize(VolumeIOSize ioSize) {
    this.ioSize = ioSize;
    return this;
  }

   /**
   * Get ioSize
   * @return ioSize
  **/
  @Schema(description = "")
  public VolumeIOSize getIoSize() {
    return ioSize;
  }

  public void setIoSize(VolumeIOSize ioSize) {
    this.ioSize = ioSize;
  }

  public VolumeStat ioSizeLat(VolumeIOLatency ioSizeLat) {
    this.ioSizeLat = ioSizeLat;
    return this;
  }

   /**
   * Get ioSizeLat
   * @return ioSizeLat
  **/
  @Schema(description = "")
  public VolumeIOLatency getIoSizeLat() {
    return ioSizeLat;
  }

  public void setIoSizeLat(VolumeIOLatency ioSizeLat) {
    this.ioSizeLat = ioSizeLat;
  }

  public VolumeStat migrateWriteBandwidthKbyte(Double migrateWriteBandwidthKbyte) {
    this.migrateWriteBandwidthKbyte = migrateWriteBandwidthKbyte;
    return this;
  }

   /**
   * Get migrateWriteBandwidthKbyte
   * @return migrateWriteBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getMigrateWriteBandwidthKbyte() {
    return migrateWriteBandwidthKbyte;
  }

  public void setMigrateWriteBandwidthKbyte(Double migrateWriteBandwidthKbyte) {
    this.migrateWriteBandwidthKbyte = migrateWriteBandwidthKbyte;
  }

  public VolumeStat migrateWriteIops(Double migrateWriteIops) {
    this.migrateWriteIops = migrateWriteIops;
    return this;
  }

   /**
   * Get migrateWriteIops
   * @return migrateWriteIops
  **/
  @Schema(description = "")
  public Double getMigrateWriteIops() {
    return migrateWriteIops;
  }

  public void setMigrateWriteIops(Double migrateWriteIops) {
    this.migrateWriteIops = migrateWriteIops;
  }

  public VolumeStat migrateWriteLatencyUs(Double migrateWriteLatencyUs) {
    this.migrateWriteLatencyUs = migrateWriteLatencyUs;
    return this;
  }

   /**
   * Get migrateWriteLatencyUs
   * @return migrateWriteLatencyUs
  **/
  @Schema(description = "")
  public Double getMigrateWriteLatencyUs() {
    return migrateWriteLatencyUs;
  }

  public void setMigrateWriteLatencyUs(Double migrateWriteLatencyUs) {
    this.migrateWriteLatencyUs = migrateWriteLatencyUs;
  }

  public VolumeStat nonIoTask(VolumeNonIOTask nonIoTask) {
    this.nonIoTask = nonIoTask;
    return this;
  }

   /**
   * Get nonIoTask
   * @return nonIoTask
  **/
  @Schema(description = "")
  public VolumeNonIOTask getNonIoTask() {
    return nonIoTask;
  }

  public void setNonIoTask(VolumeNonIOTask nonIoTask) {
    this.nonIoTask = nonIoTask;
  }

  public VolumeStat queueDepth(Double queueDepth) {
    this.queueDepth = queueDepth;
    return this;
  }

   /**
   * Get queueDepth
   * @return queueDepth
  **/
  @Schema(description = "")
  public Double getQueueDepth() {
    return queueDepth;
  }

  public void setQueueDepth(Double queueDepth) {
    this.queueDepth = queueDepth;
  }

  public VolumeStat readBandwidthKbyte(Double readBandwidthKbyte) {
    this.readBandwidthKbyte = readBandwidthKbyte;
    return this;
  }

   /**
   * Get readBandwidthKbyte
   * @return readBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getReadBandwidthKbyte() {
    return readBandwidthKbyte;
  }

  public void setReadBandwidthKbyte(Double readBandwidthKbyte) {
    this.readBandwidthKbyte = readBandwidthKbyte;
  }

  public VolumeStat readIops(Double readIops) {
    this.readIops = readIops;
    return this;
  }

   /**
   * Get readIops
   * @return readIops
  **/
  @Schema(description = "")
  public Double getReadIops() {
    return readIops;
  }

  public void setReadIops(Double readIops) {
    this.readIops = readIops;
  }

  public VolumeStat readLatencyUs(Double readLatencyUs) {
    this.readLatencyUs = readLatencyUs;
    return this;
  }

   /**
   * Get readLatencyUs
   * @return readLatencyUs
  **/
  @Schema(description = "")
  public Double getReadLatencyUs() {
    return readLatencyUs;
  }

  public void setReadLatencyUs(Double readLatencyUs) {
    this.readLatencyUs = readLatencyUs;
  }

  public VolumeStat totalBandwidthKbyte(Double totalBandwidthKbyte) {
    this.totalBandwidthKbyte = totalBandwidthKbyte;
    return this;
  }

   /**
   * Get totalBandwidthKbyte
   * @return totalBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getTotalBandwidthKbyte() {
    return totalBandwidthKbyte;
  }

  public void setTotalBandwidthKbyte(Double totalBandwidthKbyte) {
    this.totalBandwidthKbyte = totalBandwidthKbyte;
  }

  public VolumeStat totalIops(Double totalIops) {
    this.totalIops = totalIops;
    return this;
  }

   /**
   * Get totalIops
   * @return totalIops
  **/
  @Schema(description = "")
  public Double getTotalIops() {
    return totalIops;
  }

  public void setTotalIops(Double totalIops) {
    this.totalIops = totalIops;
  }

  public VolumeStat writeBandwidthKbyte(Double writeBandwidthKbyte) {
    this.writeBandwidthKbyte = writeBandwidthKbyte;
    return this;
  }

   /**
   * Get writeBandwidthKbyte
   * @return writeBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getWriteBandwidthKbyte() {
    return writeBandwidthKbyte;
  }

  public void setWriteBandwidthKbyte(Double writeBandwidthKbyte) {
    this.writeBandwidthKbyte = writeBandwidthKbyte;
  }

  public VolumeStat writeIops(Double writeIops) {
    this.writeIops = writeIops;
    return this;
  }

   /**
   * Get writeIops
   * @return writeIops
  **/
  @Schema(description = "")
  public Double getWriteIops() {
    return writeIops;
  }

  public void setWriteIops(Double writeIops) {
    this.writeIops = writeIops;
  }

  public VolumeStat writeLatencyUs(Double writeLatencyUs) {
    this.writeLatencyUs = writeLatencyUs;
    return this;
  }

   /**
   * Get writeLatencyUs
   * @return writeLatencyUs
  **/
  @Schema(description = "")
  public Double getWriteLatencyUs() {
    return writeLatencyUs;
  }

  public void setWriteLatencyUs(Double writeLatencyUs) {
    this.writeLatencyUs = writeLatencyUs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeStat volumeStat = (VolumeStat) o;
    return Objects.equals(this.failedTask, volumeStat.failedTask) &&
        Objects.equals(this.create, volumeStat.create) &&
        Objects.equals(this.ioSize, volumeStat.ioSize) &&
        Objects.equals(this.ioSizeLat, volumeStat.ioSizeLat) &&
        Objects.equals(this.migrateWriteBandwidthKbyte, volumeStat.migrateWriteBandwidthKbyte) &&
        Objects.equals(this.migrateWriteIops, volumeStat.migrateWriteIops) &&
        Objects.equals(this.migrateWriteLatencyUs, volumeStat.migrateWriteLatencyUs) &&
        Objects.equals(this.nonIoTask, volumeStat.nonIoTask) &&
        Objects.equals(this.queueDepth, volumeStat.queueDepth) &&
        Objects.equals(this.readBandwidthKbyte, volumeStat.readBandwidthKbyte) &&
        Objects.equals(this.readIops, volumeStat.readIops) &&
        Objects.equals(this.readLatencyUs, volumeStat.readLatencyUs) &&
        Objects.equals(this.totalBandwidthKbyte, volumeStat.totalBandwidthKbyte) &&
        Objects.equals(this.totalIops, volumeStat.totalIops) &&
        Objects.equals(this.writeBandwidthKbyte, volumeStat.writeBandwidthKbyte) &&
        Objects.equals(this.writeIops, volumeStat.writeIops) &&
        Objects.equals(this.writeLatencyUs, volumeStat.writeLatencyUs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failedTask, create, ioSize, ioSizeLat, migrateWriteBandwidthKbyte, migrateWriteIops, migrateWriteLatencyUs, nonIoTask, queueDepth, readBandwidthKbyte, readIops, readLatencyUs, totalBandwidthKbyte, totalIops, writeBandwidthKbyte, writeIops, writeLatencyUs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeStat {\n");
    
    sb.append("    failedTask: ").append(toIndentedString(failedTask)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    ioSize: ").append(toIndentedString(ioSize)).append("\n");
    sb.append("    ioSizeLat: ").append(toIndentedString(ioSizeLat)).append("\n");
    sb.append("    migrateWriteBandwidthKbyte: ").append(toIndentedString(migrateWriteBandwidthKbyte)).append("\n");
    sb.append("    migrateWriteIops: ").append(toIndentedString(migrateWriteIops)).append("\n");
    sb.append("    migrateWriteLatencyUs: ").append(toIndentedString(migrateWriteLatencyUs)).append("\n");
    sb.append("    nonIoTask: ").append(toIndentedString(nonIoTask)).append("\n");
    sb.append("    queueDepth: ").append(toIndentedString(queueDepth)).append("\n");
    sb.append("    readBandwidthKbyte: ").append(toIndentedString(readBandwidthKbyte)).append("\n");
    sb.append("    readIops: ").append(toIndentedString(readIops)).append("\n");
    sb.append("    readLatencyUs: ").append(toIndentedString(readLatencyUs)).append("\n");
    sb.append("    totalBandwidthKbyte: ").append(toIndentedString(totalBandwidthKbyte)).append("\n");
    sb.append("    totalIops: ").append(toIndentedString(totalIops)).append("\n");
    sb.append("    writeBandwidthKbyte: ").append(toIndentedString(writeBandwidthKbyte)).append("\n");
    sb.append("    writeIops: ").append(toIndentedString(writeIops)).append("\n");
    sb.append("    writeLatencyUs: ").append(toIndentedString(writeLatencyUs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
