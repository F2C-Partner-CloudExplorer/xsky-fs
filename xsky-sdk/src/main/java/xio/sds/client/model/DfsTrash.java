/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.ClusterNestview;
import xio.sds.client.model.DfsPathNestview;
import xio.sds.client.model.DfsRootfsNestview;
import xio.sds.client.model.ProgressInfo;
/**
 * DfsTrash defines model of dfs trash +X:model:generate;order_by&#x3D;-ID;etcd_lock;with_detailed; +X:benchmark:
 */
@Schema(description = "DfsTrash defines model of dfs trash +X:model:generate;order_by=-ID;etcd_lock;with_detailed; +X:benchmark:")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DfsTrash {
  @SerializedName("action_status")
  private String actionStatus = null;

  @SerializedName("cluster")
  private ClusterNestview cluster = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("expired_time")
  private Long expiredTime = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("path")
  private DfsPathNestview path = null;

  @SerializedName("progress")
  private Double progress = null;

  @SerializedName("progress_info")
  private ProgressInfo progressInfo = null;

  @SerializedName("rootfs")
  private DfsRootfsNestview rootfs = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("total_files")
  private Long totalFiles = null;

  @SerializedName("total_kbyte")
  private Long totalKbyte = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  public DfsTrash actionStatus(String actionStatus) {
    this.actionStatus = actionStatus;
    return this;
  }

   /**
   * Get actionStatus
   * @return actionStatus
  **/
  @Schema(description = "")
  public String getActionStatus() {
    return actionStatus;
  }

  public void setActionStatus(String actionStatus) {
    this.actionStatus = actionStatus;
  }

  public DfsTrash cluster(ClusterNestview cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public ClusterNestview getCluster() {
    return cluster;
  }

  public void setCluster(ClusterNestview cluster) {
    this.cluster = cluster;
  }

  public DfsTrash create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public DfsTrash expiredTime(Long expiredTime) {
    this.expiredTime = expiredTime;
    return this;
  }

   /**
   * Get expiredTime
   * @return expiredTime
  **/
  @Schema(description = "")
  public Long getExpiredTime() {
    return expiredTime;
  }

  public void setExpiredTime(Long expiredTime) {
    this.expiredTime = expiredTime;
  }

  public DfsTrash id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DfsTrash path(DfsPathNestview path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @Schema(description = "")
  public DfsPathNestview getPath() {
    return path;
  }

  public void setPath(DfsPathNestview path) {
    this.path = path;
  }

  public DfsTrash progress(Double progress) {
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * @return progress
  **/
  @Schema(description = "")
  public Double getProgress() {
    return progress;
  }

  public void setProgress(Double progress) {
    this.progress = progress;
  }

  public DfsTrash progressInfo(ProgressInfo progressInfo) {
    this.progressInfo = progressInfo;
    return this;
  }

   /**
   * Get progressInfo
   * @return progressInfo
  **/
  @Schema(description = "")
  public ProgressInfo getProgressInfo() {
    return progressInfo;
  }

  public void setProgressInfo(ProgressInfo progressInfo) {
    this.progressInfo = progressInfo;
  }

  public DfsTrash rootfs(DfsRootfsNestview rootfs) {
    this.rootfs = rootfs;
    return this;
  }

   /**
   * Get rootfs
   * @return rootfs
  **/
  @Schema(description = "")
  public DfsRootfsNestview getRootfs() {
    return rootfs;
  }

  public void setRootfs(DfsRootfsNestview rootfs) {
    this.rootfs = rootfs;
  }

  public DfsTrash status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public DfsTrash totalFiles(Long totalFiles) {
    this.totalFiles = totalFiles;
    return this;
  }

   /**
   * Get totalFiles
   * @return totalFiles
  **/
  @Schema(description = "")
  public Long getTotalFiles() {
    return totalFiles;
  }

  public void setTotalFiles(Long totalFiles) {
    this.totalFiles = totalFiles;
  }

  public DfsTrash totalKbyte(Long totalKbyte) {
    this.totalKbyte = totalKbyte;
    return this;
  }

   /**
   * Get totalKbyte
   * @return totalKbyte
  **/
  @Schema(description = "")
  public Long getTotalKbyte() {
    return totalKbyte;
  }

  public void setTotalKbyte(Long totalKbyte) {
    this.totalKbyte = totalKbyte;
  }

  public DfsTrash update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfsTrash dfsTrash = (DfsTrash) o;
    return Objects.equals(this.actionStatus, dfsTrash.actionStatus) &&
        Objects.equals(this.cluster, dfsTrash.cluster) &&
        Objects.equals(this.create, dfsTrash.create) &&
        Objects.equals(this.expiredTime, dfsTrash.expiredTime) &&
        Objects.equals(this.id, dfsTrash.id) &&
        Objects.equals(this.path, dfsTrash.path) &&
        Objects.equals(this.progress, dfsTrash.progress) &&
        Objects.equals(this.progressInfo, dfsTrash.progressInfo) &&
        Objects.equals(this.rootfs, dfsTrash.rootfs) &&
        Objects.equals(this.status, dfsTrash.status) &&
        Objects.equals(this.totalFiles, dfsTrash.totalFiles) &&
        Objects.equals(this.totalKbyte, dfsTrash.totalKbyte) &&
        Objects.equals(this.update, dfsTrash.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionStatus, cluster, create, expiredTime, id, path, progress, progressInfo, rootfs, status, totalFiles, totalKbyte, update);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfsTrash {\n");
    
    sb.append("    actionStatus: ").append(toIndentedString(actionStatus)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    expiredTime: ").append(toIndentedString(expiredTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    progressInfo: ").append(toIndentedString(progressInfo)).append("\n");
    sb.append("    rootfs: ").append(toIndentedString(rootfs)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalFiles: ").append(toIndentedString(totalFiles)).append("\n");
    sb.append("    totalKbyte: ").append(toIndentedString(totalKbyte)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
