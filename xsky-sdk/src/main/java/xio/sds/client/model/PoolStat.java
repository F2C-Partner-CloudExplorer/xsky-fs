/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * PoolStat contains pool stats data
 */
@Schema(description = "PoolStat contains pool stats data")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class PoolStat {
  @SerializedName("actual_kbyte")
  private Long actualKbyte = null;

  @SerializedName("available_actual_kbyte")
  private Double availableActualKbyte = null;

  @SerializedName("client_read_bandwidth_kbyte")
  private Double clientReadBandwidthKbyte = null;

  @SerializedName("client_read_io_size_kbyte")
  private Double clientReadIoSizeKbyte = null;

  @SerializedName("client_read_iops")
  private Double clientReadIops = null;

  @SerializedName("client_read_latency_us")
  private Double clientReadLatencyUs = null;

  @SerializedName("client_write_bandwidth_kbyte")
  private Double clientWriteBandwidthKbyte = null;

  @SerializedName("client_write_io_size_kbyte")
  private Double clientWriteIoSizeKbyte = null;

  @SerializedName("client_write_iops")
  private Double clientWriteIops = null;

  @SerializedName("client_write_latency_us")
  private Double clientWriteLatencyUs = null;

  @SerializedName("compress_ratio")
  private Double compressRatio = null;

  @SerializedName("compressed_kbyte")
  private Double compressedKbyte = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("creating_num")
  private Long creatingNum = null;

  @SerializedName("data_kbyte")
  private Long dataKbyte = null;

  @SerializedName("degraded_num")
  private Long degradedNum = null;

  @SerializedName("degraded_percent")
  private Double degradedPercent = null;

  @SerializedName("error_kbyte")
  private Long errorKbyte = null;

  @SerializedName("flush_read_bandwidth_kbyte")
  private Double flushReadBandwidthKbyte = null;

  @SerializedName("flush_read_io_size_kbyte")
  private Double flushReadIoSizeKbyte = null;

  @SerializedName("flush_read_iops")
  private Double flushReadIops = null;

  @SerializedName("flush_read_latency_us")
  private Double flushReadLatencyUs = null;

  @SerializedName("flush_write_bandwidth_kbyte")
  private Double flushWriteBandwidthKbyte = null;

  @SerializedName("flush_write_io_size_kbyte")
  private Double flushWriteIoSizeKbyte = null;

  @SerializedName("flush_write_iops")
  private Double flushWriteIops = null;

  @SerializedName("flush_write_latency_us")
  private Double flushWriteLatencyUs = null;

  @SerializedName("garbage_ratio")
  private Double garbageRatio = null;

  @SerializedName("gc_read_bandwidth_kbyte")
  private Double gcReadBandwidthKbyte = null;

  @SerializedName("gc_read_io_size_kbyte")
  private Double gcReadIoSizeKbyte = null;

  @SerializedName("gc_read_iops")
  private Double gcReadIops = null;

  @SerializedName("gc_read_latency_us")
  private Double gcReadLatencyUs = null;

  @SerializedName("gc_remove_bandwidth_kbyte")
  private Double gcRemoveBandwidthKbyte = null;

  @SerializedName("gc_remove_io_size_kbyte")
  private Double gcRemoveIoSizeKbyte = null;

  @SerializedName("gc_remove_iops")
  private Double gcRemoveIops = null;

  @SerializedName("gc_write_bandwidth_kbyte")
  private Double gcWriteBandwidthKbyte = null;

  @SerializedName("gc_write_io_size_kbyte")
  private Double gcWriteIoSizeKbyte = null;

  @SerializedName("gc_write_iops")
  private Double gcWriteIops = null;

  @SerializedName("gc_write_latency_us")
  private Double gcWriteLatencyUs = null;

  @SerializedName("healthy_num")
  private Long healthyNum = null;

  @SerializedName("healthy_percent")
  private Double healthyPercent = null;

  @SerializedName("max_avail_kbyte")
  private Long maxAvailKbyte = null;

  @SerializedName("min_garbage_kbyte")
  private Long minGarbageKbyte = null;

  @SerializedName("omap_total_kbyte")
  private Double omapTotalKbyte = null;

  @SerializedName("omap_used_kbyte")
  private Double omapUsedKbyte = null;

  @SerializedName("omap_used_percent")
  private Double omapUsedPercent = null;

  @SerializedName("read_bandwidth_kbyte")
  private Double readBandwidthKbyte = null;

  @SerializedName("read_cache_hit_rate")
  private Double readCacheHitRate = null;

  @SerializedName("read_cache_kbyte")
  private Double readCacheKbyte = null;

  @SerializedName("read_cache_percent")
  private Double readCachePercent = null;

  @SerializedName("read_io_size_kbyte")
  private Double readIoSizeKbyte = null;

  @SerializedName("read_iops")
  private Double readIops = null;

  @SerializedName("read_latency_us")
  private Double readLatencyUs = null;

  @SerializedName("recovery_bandwidth_kbyte")
  private Double recoveryBandwidthKbyte = null;

  @SerializedName("recovery_iops")
  private Double recoveryIops = null;

  @SerializedName("recovery_num")
  private Long recoveryNum = null;

  @SerializedName("recovery_percent")
  private Double recoveryPercent = null;

  @SerializedName("recovery_remain_second")
  private Long recoveryRemainSecond = null;

  @SerializedName("remove_bandwidth_kbyte")
  private Double removeBandwidthKbyte = null;

  @SerializedName("remove_iops")
  private Double removeIops = null;

  @SerializedName("reserved_data_kbyte")
  private Double reservedDataKbyte = null;

  @SerializedName("reserved_data_percent")
  private Double reservedDataPercent = null;

  @SerializedName("reserved_used_kbyte")
  private Double reservedUsedKbyte = null;

  @SerializedName("rmw_bandwidth_kbyte")
  private Double rmwBandwidthKbyte = null;

  @SerializedName("rmw_iops")
  private Double rmwIops = null;

  @SerializedName("snap_kbyte")
  private Long snapKbyte = null;

  @SerializedName("total_bandwidth_kbyte")
  private Double totalBandwidthKbyte = null;

  @SerializedName("total_cache_kbyte")
  private Double totalCacheKbyte = null;

  @SerializedName("total_iops")
  private Double totalIops = null;

  @SerializedName("total_kbyte")
  private Long totalKbyte = null;

  @SerializedName("unavailable_num")
  private Long unavailableNum = null;

  @SerializedName("unavailable_percent")
  private Double unavailablePercent = null;

  @SerializedName("unused_data_kbyte")
  private Double unusedDataKbyte = null;

  @SerializedName("used_kbyte")
  private Long usedKbyte = null;

  @SerializedName("used_percent")
  private Double usedPercent = null;

  @SerializedName("water_level")
  private Double waterLevel = null;

  @SerializedName("write_bandwidth_kbyte")
  private Double writeBandwidthKbyte = null;

  @SerializedName("write_cache_kbyte")
  private Double writeCacheKbyte = null;

  @SerializedName("write_cache_merge_rate")
  private Double writeCacheMergeRate = null;

  @SerializedName("write_cache_percent")
  private Double writeCachePercent = null;

  @SerializedName("write_io_size_kbyte")
  private Double writeIoSizeKbyte = null;

  @SerializedName("write_iops")
  private Double writeIops = null;

  @SerializedName("write_latency_us")
  private Double writeLatencyUs = null;

  public PoolStat actualKbyte(Long actualKbyte) {
    this.actualKbyte = actualKbyte;
    return this;
  }

   /**
   * Get actualKbyte
   * @return actualKbyte
  **/
  @Schema(description = "")
  public Long getActualKbyte() {
    return actualKbyte;
  }

  public void setActualKbyte(Long actualKbyte) {
    this.actualKbyte = actualKbyte;
  }

  public PoolStat availableActualKbyte(Double availableActualKbyte) {
    this.availableActualKbyte = availableActualKbyte;
    return this;
  }

   /**
   * actual_kbyte*(1-reserved_data_percent)
   * @return availableActualKbyte
  **/
  @Schema(description = "actual_kbyte*(1-reserved_data_percent)")
  public Double getAvailableActualKbyte() {
    return availableActualKbyte;
  }

  public void setAvailableActualKbyte(Double availableActualKbyte) {
    this.availableActualKbyte = availableActualKbyte;
  }

  public PoolStat clientReadBandwidthKbyte(Double clientReadBandwidthKbyte) {
    this.clientReadBandwidthKbyte = clientReadBandwidthKbyte;
    return this;
  }

   /**
   * Get clientReadBandwidthKbyte
   * @return clientReadBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getClientReadBandwidthKbyte() {
    return clientReadBandwidthKbyte;
  }

  public void setClientReadBandwidthKbyte(Double clientReadBandwidthKbyte) {
    this.clientReadBandwidthKbyte = clientReadBandwidthKbyte;
  }

  public PoolStat clientReadIoSizeKbyte(Double clientReadIoSizeKbyte) {
    this.clientReadIoSizeKbyte = clientReadIoSizeKbyte;
    return this;
  }

   /**
   * Get clientReadIoSizeKbyte
   * @return clientReadIoSizeKbyte
  **/
  @Schema(description = "")
  public Double getClientReadIoSizeKbyte() {
    return clientReadIoSizeKbyte;
  }

  public void setClientReadIoSizeKbyte(Double clientReadIoSizeKbyte) {
    this.clientReadIoSizeKbyte = clientReadIoSizeKbyte;
  }

  public PoolStat clientReadIops(Double clientReadIops) {
    this.clientReadIops = clientReadIops;
    return this;
  }

   /**
   * Get clientReadIops
   * @return clientReadIops
  **/
  @Schema(description = "")
  public Double getClientReadIops() {
    return clientReadIops;
  }

  public void setClientReadIops(Double clientReadIops) {
    this.clientReadIops = clientReadIops;
  }

  public PoolStat clientReadLatencyUs(Double clientReadLatencyUs) {
    this.clientReadLatencyUs = clientReadLatencyUs;
    return this;
  }

   /**
   * Get clientReadLatencyUs
   * @return clientReadLatencyUs
  **/
  @Schema(description = "")
  public Double getClientReadLatencyUs() {
    return clientReadLatencyUs;
  }

  public void setClientReadLatencyUs(Double clientReadLatencyUs) {
    this.clientReadLatencyUs = clientReadLatencyUs;
  }

  public PoolStat clientWriteBandwidthKbyte(Double clientWriteBandwidthKbyte) {
    this.clientWriteBandwidthKbyte = clientWriteBandwidthKbyte;
    return this;
  }

   /**
   * Get clientWriteBandwidthKbyte
   * @return clientWriteBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getClientWriteBandwidthKbyte() {
    return clientWriteBandwidthKbyte;
  }

  public void setClientWriteBandwidthKbyte(Double clientWriteBandwidthKbyte) {
    this.clientWriteBandwidthKbyte = clientWriteBandwidthKbyte;
  }

  public PoolStat clientWriteIoSizeKbyte(Double clientWriteIoSizeKbyte) {
    this.clientWriteIoSizeKbyte = clientWriteIoSizeKbyte;
    return this;
  }

   /**
   * Get clientWriteIoSizeKbyte
   * @return clientWriteIoSizeKbyte
  **/
  @Schema(description = "")
  public Double getClientWriteIoSizeKbyte() {
    return clientWriteIoSizeKbyte;
  }

  public void setClientWriteIoSizeKbyte(Double clientWriteIoSizeKbyte) {
    this.clientWriteIoSizeKbyte = clientWriteIoSizeKbyte;
  }

  public PoolStat clientWriteIops(Double clientWriteIops) {
    this.clientWriteIops = clientWriteIops;
    return this;
  }

   /**
   * Get clientWriteIops
   * @return clientWriteIops
  **/
  @Schema(description = "")
  public Double getClientWriteIops() {
    return clientWriteIops;
  }

  public void setClientWriteIops(Double clientWriteIops) {
    this.clientWriteIops = clientWriteIops;
  }

  public PoolStat clientWriteLatencyUs(Double clientWriteLatencyUs) {
    this.clientWriteLatencyUs = clientWriteLatencyUs;
    return this;
  }

   /**
   * Get clientWriteLatencyUs
   * @return clientWriteLatencyUs
  **/
  @Schema(description = "")
  public Double getClientWriteLatencyUs() {
    return clientWriteLatencyUs;
  }

  public void setClientWriteLatencyUs(Double clientWriteLatencyUs) {
    this.clientWriteLatencyUs = clientWriteLatencyUs;
  }

  public PoolStat compressRatio(Double compressRatio) {
    this.compressRatio = compressRatio;
    return this;
  }

   /**
   * Get compressRatio
   * @return compressRatio
  **/
  @Schema(description = "")
  public Double getCompressRatio() {
    return compressRatio;
  }

  public void setCompressRatio(Double compressRatio) {
    this.compressRatio = compressRatio;
  }

  public PoolStat compressedKbyte(Double compressedKbyte) {
    this.compressedKbyte = compressedKbyte;
    return this;
  }

   /**
   * Get compressedKbyte
   * @return compressedKbyte
  **/
  @Schema(description = "")
  public Double getCompressedKbyte() {
    return compressedKbyte;
  }

  public void setCompressedKbyte(Double compressedKbyte) {
    this.compressedKbyte = compressedKbyte;
  }

  public PoolStat create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public PoolStat creatingNum(Long creatingNum) {
    this.creatingNum = creatingNum;
    return this;
  }

   /**
   * Get creatingNum
   * @return creatingNum
  **/
  @Schema(description = "")
  public Long getCreatingNum() {
    return creatingNum;
  }

  public void setCreatingNum(Long creatingNum) {
    this.creatingNum = creatingNum;
  }

  public PoolStat dataKbyte(Long dataKbyte) {
    this.dataKbyte = dataKbyte;
    return this;
  }

   /**
   * Get dataKbyte
   * @return dataKbyte
  **/
  @Schema(description = "")
  public Long getDataKbyte() {
    return dataKbyte;
  }

  public void setDataKbyte(Long dataKbyte) {
    this.dataKbyte = dataKbyte;
  }

  public PoolStat degradedNum(Long degradedNum) {
    this.degradedNum = degradedNum;
    return this;
  }

   /**
   * Get degradedNum
   * @return degradedNum
  **/
  @Schema(description = "")
  public Long getDegradedNum() {
    return degradedNum;
  }

  public void setDegradedNum(Long degradedNum) {
    this.degradedNum = degradedNum;
  }

  public PoolStat degradedPercent(Double degradedPercent) {
    this.degradedPercent = degradedPercent;
    return this;
  }

   /**
   * Get degradedPercent
   * @return degradedPercent
  **/
  @Schema(description = "")
  public Double getDegradedPercent() {
    return degradedPercent;
  }

  public void setDegradedPercent(Double degradedPercent) {
    this.degradedPercent = degradedPercent;
  }

  public PoolStat errorKbyte(Long errorKbyte) {
    this.errorKbyte = errorKbyte;
    return this;
  }

   /**
   * Get errorKbyte
   * @return errorKbyte
  **/
  @Schema(description = "")
  public Long getErrorKbyte() {
    return errorKbyte;
  }

  public void setErrorKbyte(Long errorKbyte) {
    this.errorKbyte = errorKbyte;
  }

  public PoolStat flushReadBandwidthKbyte(Double flushReadBandwidthKbyte) {
    this.flushReadBandwidthKbyte = flushReadBandwidthKbyte;
    return this;
  }

   /**
   * Get flushReadBandwidthKbyte
   * @return flushReadBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getFlushReadBandwidthKbyte() {
    return flushReadBandwidthKbyte;
  }

  public void setFlushReadBandwidthKbyte(Double flushReadBandwidthKbyte) {
    this.flushReadBandwidthKbyte = flushReadBandwidthKbyte;
  }

  public PoolStat flushReadIoSizeKbyte(Double flushReadIoSizeKbyte) {
    this.flushReadIoSizeKbyte = flushReadIoSizeKbyte;
    return this;
  }

   /**
   * Get flushReadIoSizeKbyte
   * @return flushReadIoSizeKbyte
  **/
  @Schema(description = "")
  public Double getFlushReadIoSizeKbyte() {
    return flushReadIoSizeKbyte;
  }

  public void setFlushReadIoSizeKbyte(Double flushReadIoSizeKbyte) {
    this.flushReadIoSizeKbyte = flushReadIoSizeKbyte;
  }

  public PoolStat flushReadIops(Double flushReadIops) {
    this.flushReadIops = flushReadIops;
    return this;
  }

   /**
   * Get flushReadIops
   * @return flushReadIops
  **/
  @Schema(description = "")
  public Double getFlushReadIops() {
    return flushReadIops;
  }

  public void setFlushReadIops(Double flushReadIops) {
    this.flushReadIops = flushReadIops;
  }

  public PoolStat flushReadLatencyUs(Double flushReadLatencyUs) {
    this.flushReadLatencyUs = flushReadLatencyUs;
    return this;
  }

   /**
   * Get flushReadLatencyUs
   * @return flushReadLatencyUs
  **/
  @Schema(description = "")
  public Double getFlushReadLatencyUs() {
    return flushReadLatencyUs;
  }

  public void setFlushReadLatencyUs(Double flushReadLatencyUs) {
    this.flushReadLatencyUs = flushReadLatencyUs;
  }

  public PoolStat flushWriteBandwidthKbyte(Double flushWriteBandwidthKbyte) {
    this.flushWriteBandwidthKbyte = flushWriteBandwidthKbyte;
    return this;
  }

   /**
   * Get flushWriteBandwidthKbyte
   * @return flushWriteBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getFlushWriteBandwidthKbyte() {
    return flushWriteBandwidthKbyte;
  }

  public void setFlushWriteBandwidthKbyte(Double flushWriteBandwidthKbyte) {
    this.flushWriteBandwidthKbyte = flushWriteBandwidthKbyte;
  }

  public PoolStat flushWriteIoSizeKbyte(Double flushWriteIoSizeKbyte) {
    this.flushWriteIoSizeKbyte = flushWriteIoSizeKbyte;
    return this;
  }

   /**
   * Get flushWriteIoSizeKbyte
   * @return flushWriteIoSizeKbyte
  **/
  @Schema(description = "")
  public Double getFlushWriteIoSizeKbyte() {
    return flushWriteIoSizeKbyte;
  }

  public void setFlushWriteIoSizeKbyte(Double flushWriteIoSizeKbyte) {
    this.flushWriteIoSizeKbyte = flushWriteIoSizeKbyte;
  }

  public PoolStat flushWriteIops(Double flushWriteIops) {
    this.flushWriteIops = flushWriteIops;
    return this;
  }

   /**
   * Get flushWriteIops
   * @return flushWriteIops
  **/
  @Schema(description = "")
  public Double getFlushWriteIops() {
    return flushWriteIops;
  }

  public void setFlushWriteIops(Double flushWriteIops) {
    this.flushWriteIops = flushWriteIops;
  }

  public PoolStat flushWriteLatencyUs(Double flushWriteLatencyUs) {
    this.flushWriteLatencyUs = flushWriteLatencyUs;
    return this;
  }

   /**
   * Get flushWriteLatencyUs
   * @return flushWriteLatencyUs
  **/
  @Schema(description = "")
  public Double getFlushWriteLatencyUs() {
    return flushWriteLatencyUs;
  }

  public void setFlushWriteLatencyUs(Double flushWriteLatencyUs) {
    this.flushWriteLatencyUs = flushWriteLatencyUs;
  }

  public PoolStat garbageRatio(Double garbageRatio) {
    this.garbageRatio = garbageRatio;
    return this;
  }

   /**
   * Get garbageRatio
   * @return garbageRatio
  **/
  @Schema(description = "")
  public Double getGarbageRatio() {
    return garbageRatio;
  }

  public void setGarbageRatio(Double garbageRatio) {
    this.garbageRatio = garbageRatio;
  }

  public PoolStat gcReadBandwidthKbyte(Double gcReadBandwidthKbyte) {
    this.gcReadBandwidthKbyte = gcReadBandwidthKbyte;
    return this;
  }

   /**
   * Get gcReadBandwidthKbyte
   * @return gcReadBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getGcReadBandwidthKbyte() {
    return gcReadBandwidthKbyte;
  }

  public void setGcReadBandwidthKbyte(Double gcReadBandwidthKbyte) {
    this.gcReadBandwidthKbyte = gcReadBandwidthKbyte;
  }

  public PoolStat gcReadIoSizeKbyte(Double gcReadIoSizeKbyte) {
    this.gcReadIoSizeKbyte = gcReadIoSizeKbyte;
    return this;
  }

   /**
   * Get gcReadIoSizeKbyte
   * @return gcReadIoSizeKbyte
  **/
  @Schema(description = "")
  public Double getGcReadIoSizeKbyte() {
    return gcReadIoSizeKbyte;
  }

  public void setGcReadIoSizeKbyte(Double gcReadIoSizeKbyte) {
    this.gcReadIoSizeKbyte = gcReadIoSizeKbyte;
  }

  public PoolStat gcReadIops(Double gcReadIops) {
    this.gcReadIops = gcReadIops;
    return this;
  }

   /**
   * Get gcReadIops
   * @return gcReadIops
  **/
  @Schema(description = "")
  public Double getGcReadIops() {
    return gcReadIops;
  }

  public void setGcReadIops(Double gcReadIops) {
    this.gcReadIops = gcReadIops;
  }

  public PoolStat gcReadLatencyUs(Double gcReadLatencyUs) {
    this.gcReadLatencyUs = gcReadLatencyUs;
    return this;
  }

   /**
   * Get gcReadLatencyUs
   * @return gcReadLatencyUs
  **/
  @Schema(description = "")
  public Double getGcReadLatencyUs() {
    return gcReadLatencyUs;
  }

  public void setGcReadLatencyUs(Double gcReadLatencyUs) {
    this.gcReadLatencyUs = gcReadLatencyUs;
  }

  public PoolStat gcRemoveBandwidthKbyte(Double gcRemoveBandwidthKbyte) {
    this.gcRemoveBandwidthKbyte = gcRemoveBandwidthKbyte;
    return this;
  }

   /**
   * Get gcRemoveBandwidthKbyte
   * @return gcRemoveBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getGcRemoveBandwidthKbyte() {
    return gcRemoveBandwidthKbyte;
  }

  public void setGcRemoveBandwidthKbyte(Double gcRemoveBandwidthKbyte) {
    this.gcRemoveBandwidthKbyte = gcRemoveBandwidthKbyte;
  }

  public PoolStat gcRemoveIoSizeKbyte(Double gcRemoveIoSizeKbyte) {
    this.gcRemoveIoSizeKbyte = gcRemoveIoSizeKbyte;
    return this;
  }

   /**
   * Get gcRemoveIoSizeKbyte
   * @return gcRemoveIoSizeKbyte
  **/
  @Schema(description = "")
  public Double getGcRemoveIoSizeKbyte() {
    return gcRemoveIoSizeKbyte;
  }

  public void setGcRemoveIoSizeKbyte(Double gcRemoveIoSizeKbyte) {
    this.gcRemoveIoSizeKbyte = gcRemoveIoSizeKbyte;
  }

  public PoolStat gcRemoveIops(Double gcRemoveIops) {
    this.gcRemoveIops = gcRemoveIops;
    return this;
  }

   /**
   * Get gcRemoveIops
   * @return gcRemoveIops
  **/
  @Schema(description = "")
  public Double getGcRemoveIops() {
    return gcRemoveIops;
  }

  public void setGcRemoveIops(Double gcRemoveIops) {
    this.gcRemoveIops = gcRemoveIops;
  }

  public PoolStat gcWriteBandwidthKbyte(Double gcWriteBandwidthKbyte) {
    this.gcWriteBandwidthKbyte = gcWriteBandwidthKbyte;
    return this;
  }

   /**
   * Get gcWriteBandwidthKbyte
   * @return gcWriteBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getGcWriteBandwidthKbyte() {
    return gcWriteBandwidthKbyte;
  }

  public void setGcWriteBandwidthKbyte(Double gcWriteBandwidthKbyte) {
    this.gcWriteBandwidthKbyte = gcWriteBandwidthKbyte;
  }

  public PoolStat gcWriteIoSizeKbyte(Double gcWriteIoSizeKbyte) {
    this.gcWriteIoSizeKbyte = gcWriteIoSizeKbyte;
    return this;
  }

   /**
   * Get gcWriteIoSizeKbyte
   * @return gcWriteIoSizeKbyte
  **/
  @Schema(description = "")
  public Double getGcWriteIoSizeKbyte() {
    return gcWriteIoSizeKbyte;
  }

  public void setGcWriteIoSizeKbyte(Double gcWriteIoSizeKbyte) {
    this.gcWriteIoSizeKbyte = gcWriteIoSizeKbyte;
  }

  public PoolStat gcWriteIops(Double gcWriteIops) {
    this.gcWriteIops = gcWriteIops;
    return this;
  }

   /**
   * Get gcWriteIops
   * @return gcWriteIops
  **/
  @Schema(description = "")
  public Double getGcWriteIops() {
    return gcWriteIops;
  }

  public void setGcWriteIops(Double gcWriteIops) {
    this.gcWriteIops = gcWriteIops;
  }

  public PoolStat gcWriteLatencyUs(Double gcWriteLatencyUs) {
    this.gcWriteLatencyUs = gcWriteLatencyUs;
    return this;
  }

   /**
   * Get gcWriteLatencyUs
   * @return gcWriteLatencyUs
  **/
  @Schema(description = "")
  public Double getGcWriteLatencyUs() {
    return gcWriteLatencyUs;
  }

  public void setGcWriteLatencyUs(Double gcWriteLatencyUs) {
    this.gcWriteLatencyUs = gcWriteLatencyUs;
  }

  public PoolStat healthyNum(Long healthyNum) {
    this.healthyNum = healthyNum;
    return this;
  }

   /**
   * Get healthyNum
   * @return healthyNum
  **/
  @Schema(description = "")
  public Long getHealthyNum() {
    return healthyNum;
  }

  public void setHealthyNum(Long healthyNum) {
    this.healthyNum = healthyNum;
  }

  public PoolStat healthyPercent(Double healthyPercent) {
    this.healthyPercent = healthyPercent;
    return this;
  }

   /**
   * Get healthyPercent
   * @return healthyPercent
  **/
  @Schema(description = "")
  public Double getHealthyPercent() {
    return healthyPercent;
  }

  public void setHealthyPercent(Double healthyPercent) {
    this.healthyPercent = healthyPercent;
  }

  public PoolStat maxAvailKbyte(Long maxAvailKbyte) {
    this.maxAvailKbyte = maxAvailKbyte;
    return this;
  }

   /**
   * Get maxAvailKbyte
   * @return maxAvailKbyte
  **/
  @Schema(description = "")
  public Long getMaxAvailKbyte() {
    return maxAvailKbyte;
  }

  public void setMaxAvailKbyte(Long maxAvailKbyte) {
    this.maxAvailKbyte = maxAvailKbyte;
  }

  public PoolStat minGarbageKbyte(Long minGarbageKbyte) {
    this.minGarbageKbyte = minGarbageKbyte;
    return this;
  }

   /**
   * garbage size, for tier pool
   * @return minGarbageKbyte
  **/
  @Schema(description = "garbage size, for tier pool")
  public Long getMinGarbageKbyte() {
    return minGarbageKbyte;
  }

  public void setMinGarbageKbyte(Long minGarbageKbyte) {
    this.minGarbageKbyte = minGarbageKbyte;
  }

  public PoolStat omapTotalKbyte(Double omapTotalKbyte) {
    this.omapTotalKbyte = omapTotalKbyte;
    return this;
  }

   /**
   * Get omapTotalKbyte
   * @return omapTotalKbyte
  **/
  @Schema(description = "")
  public Double getOmapTotalKbyte() {
    return omapTotalKbyte;
  }

  public void setOmapTotalKbyte(Double omapTotalKbyte) {
    this.omapTotalKbyte = omapTotalKbyte;
  }

  public PoolStat omapUsedKbyte(Double omapUsedKbyte) {
    this.omapUsedKbyte = omapUsedKbyte;
    return this;
  }

   /**
   * Get omapUsedKbyte
   * @return omapUsedKbyte
  **/
  @Schema(description = "")
  public Double getOmapUsedKbyte() {
    return omapUsedKbyte;
  }

  public void setOmapUsedKbyte(Double omapUsedKbyte) {
    this.omapUsedKbyte = omapUsedKbyte;
  }

  public PoolStat omapUsedPercent(Double omapUsedPercent) {
    this.omapUsedPercent = omapUsedPercent;
    return this;
  }

   /**
   * Get omapUsedPercent
   * @return omapUsedPercent
  **/
  @Schema(description = "")
  public Double getOmapUsedPercent() {
    return omapUsedPercent;
  }

  public void setOmapUsedPercent(Double omapUsedPercent) {
    this.omapUsedPercent = omapUsedPercent;
  }

  public PoolStat readBandwidthKbyte(Double readBandwidthKbyte) {
    this.readBandwidthKbyte = readBandwidthKbyte;
    return this;
  }

   /**
   * Get readBandwidthKbyte
   * @return readBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getReadBandwidthKbyte() {
    return readBandwidthKbyte;
  }

  public void setReadBandwidthKbyte(Double readBandwidthKbyte) {
    this.readBandwidthKbyte = readBandwidthKbyte;
  }

  public PoolStat readCacheHitRate(Double readCacheHitRate) {
    this.readCacheHitRate = readCacheHitRate;
    return this;
  }

   /**
   * Get readCacheHitRate
   * @return readCacheHitRate
  **/
  @Schema(description = "")
  public Double getReadCacheHitRate() {
    return readCacheHitRate;
  }

  public void setReadCacheHitRate(Double readCacheHitRate) {
    this.readCacheHitRate = readCacheHitRate;
  }

  public PoolStat readCacheKbyte(Double readCacheKbyte) {
    this.readCacheKbyte = readCacheKbyte;
    return this;
  }

   /**
   * Get readCacheKbyte
   * @return readCacheKbyte
  **/
  @Schema(description = "")
  public Double getReadCacheKbyte() {
    return readCacheKbyte;
  }

  public void setReadCacheKbyte(Double readCacheKbyte) {
    this.readCacheKbyte = readCacheKbyte;
  }

  public PoolStat readCachePercent(Double readCachePercent) {
    this.readCachePercent = readCachePercent;
    return this;
  }

   /**
   * Get readCachePercent
   * @return readCachePercent
  **/
  @Schema(description = "")
  public Double getReadCachePercent() {
    return readCachePercent;
  }

  public void setReadCachePercent(Double readCachePercent) {
    this.readCachePercent = readCachePercent;
  }

  public PoolStat readIoSizeKbyte(Double readIoSizeKbyte) {
    this.readIoSizeKbyte = readIoSizeKbyte;
    return this;
  }

   /**
   * Get readIoSizeKbyte
   * @return readIoSizeKbyte
  **/
  @Schema(description = "")
  public Double getReadIoSizeKbyte() {
    return readIoSizeKbyte;
  }

  public void setReadIoSizeKbyte(Double readIoSizeKbyte) {
    this.readIoSizeKbyte = readIoSizeKbyte;
  }

  public PoolStat readIops(Double readIops) {
    this.readIops = readIops;
    return this;
  }

   /**
   * Get readIops
   * @return readIops
  **/
  @Schema(description = "")
  public Double getReadIops() {
    return readIops;
  }

  public void setReadIops(Double readIops) {
    this.readIops = readIops;
  }

  public PoolStat readLatencyUs(Double readLatencyUs) {
    this.readLatencyUs = readLatencyUs;
    return this;
  }

   /**
   * Get readLatencyUs
   * @return readLatencyUs
  **/
  @Schema(description = "")
  public Double getReadLatencyUs() {
    return readLatencyUs;
  }

  public void setReadLatencyUs(Double readLatencyUs) {
    this.readLatencyUs = readLatencyUs;
  }

  public PoolStat recoveryBandwidthKbyte(Double recoveryBandwidthKbyte) {
    this.recoveryBandwidthKbyte = recoveryBandwidthKbyte;
    return this;
  }

   /**
   * Get recoveryBandwidthKbyte
   * @return recoveryBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getRecoveryBandwidthKbyte() {
    return recoveryBandwidthKbyte;
  }

  public void setRecoveryBandwidthKbyte(Double recoveryBandwidthKbyte) {
    this.recoveryBandwidthKbyte = recoveryBandwidthKbyte;
  }

  public PoolStat recoveryIops(Double recoveryIops) {
    this.recoveryIops = recoveryIops;
    return this;
  }

   /**
   * Get recoveryIops
   * @return recoveryIops
  **/
  @Schema(description = "")
  public Double getRecoveryIops() {
    return recoveryIops;
  }

  public void setRecoveryIops(Double recoveryIops) {
    this.recoveryIops = recoveryIops;
  }

  public PoolStat recoveryNum(Long recoveryNum) {
    this.recoveryNum = recoveryNum;
    return this;
  }

   /**
   * Get recoveryNum
   * @return recoveryNum
  **/
  @Schema(description = "")
  public Long getRecoveryNum() {
    return recoveryNum;
  }

  public void setRecoveryNum(Long recoveryNum) {
    this.recoveryNum = recoveryNum;
  }

  public PoolStat recoveryPercent(Double recoveryPercent) {
    this.recoveryPercent = recoveryPercent;
    return this;
  }

   /**
   * Get recoveryPercent
   * @return recoveryPercent
  **/
  @Schema(description = "")
  public Double getRecoveryPercent() {
    return recoveryPercent;
  }

  public void setRecoveryPercent(Double recoveryPercent) {
    this.recoveryPercent = recoveryPercent;
  }

  public PoolStat recoveryRemainSecond(Long recoveryRemainSecond) {
    this.recoveryRemainSecond = recoveryRemainSecond;
    return this;
  }

   /**
   * Get recoveryRemainSecond
   * @return recoveryRemainSecond
  **/
  @Schema(description = "")
  public Long getRecoveryRemainSecond() {
    return recoveryRemainSecond;
  }

  public void setRecoveryRemainSecond(Long recoveryRemainSecond) {
    this.recoveryRemainSecond = recoveryRemainSecond;
  }

  public PoolStat removeBandwidthKbyte(Double removeBandwidthKbyte) {
    this.removeBandwidthKbyte = removeBandwidthKbyte;
    return this;
  }

   /**
   * Get removeBandwidthKbyte
   * @return removeBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getRemoveBandwidthKbyte() {
    return removeBandwidthKbyte;
  }

  public void setRemoveBandwidthKbyte(Double removeBandwidthKbyte) {
    this.removeBandwidthKbyte = removeBandwidthKbyte;
  }

  public PoolStat removeIops(Double removeIops) {
    this.removeIops = removeIops;
    return this;
  }

   /**
   * Get removeIops
   * @return removeIops
  **/
  @Schema(description = "")
  public Double getRemoveIops() {
    return removeIops;
  }

  public void setRemoveIops(Double removeIops) {
    this.removeIops = removeIops;
  }

  public PoolStat reservedDataKbyte(Double reservedDataKbyte) {
    this.reservedDataKbyte = reservedDataKbyte;
    return this;
  }

   /**
   * Get reservedDataKbyte
   * @return reservedDataKbyte
  **/
  @Schema(description = "")
  public Double getReservedDataKbyte() {
    return reservedDataKbyte;
  }

  public void setReservedDataKbyte(Double reservedDataKbyte) {
    this.reservedDataKbyte = reservedDataKbyte;
  }

  public PoolStat reservedDataPercent(Double reservedDataPercent) {
    this.reservedDataPercent = reservedDataPercent;
    return this;
  }

   /**
   * Get reservedDataPercent
   * @return reservedDataPercent
  **/
  @Schema(description = "")
  public Double getReservedDataPercent() {
    return reservedDataPercent;
  }

  public void setReservedDataPercent(Double reservedDataPercent) {
    this.reservedDataPercent = reservedDataPercent;
  }

  public PoolStat reservedUsedKbyte(Double reservedUsedKbyte) {
    this.reservedUsedKbyte = reservedUsedKbyte;
    return this;
  }

   /**
   * Get reservedUsedKbyte
   * @return reservedUsedKbyte
  **/
  @Schema(description = "")
  public Double getReservedUsedKbyte() {
    return reservedUsedKbyte;
  }

  public void setReservedUsedKbyte(Double reservedUsedKbyte) {
    this.reservedUsedKbyte = reservedUsedKbyte;
  }

  public PoolStat rmwBandwidthKbyte(Double rmwBandwidthKbyte) {
    this.rmwBandwidthKbyte = rmwBandwidthKbyte;
    return this;
  }

   /**
   * Get rmwBandwidthKbyte
   * @return rmwBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getRmwBandwidthKbyte() {
    return rmwBandwidthKbyte;
  }

  public void setRmwBandwidthKbyte(Double rmwBandwidthKbyte) {
    this.rmwBandwidthKbyte = rmwBandwidthKbyte;
  }

  public PoolStat rmwIops(Double rmwIops) {
    this.rmwIops = rmwIops;
    return this;
  }

   /**
   * Get rmwIops
   * @return rmwIops
  **/
  @Schema(description = "")
  public Double getRmwIops() {
    return rmwIops;
  }

  public void setRmwIops(Double rmwIops) {
    this.rmwIops = rmwIops;
  }

  public PoolStat snapKbyte(Long snapKbyte) {
    this.snapKbyte = snapKbyte;
    return this;
  }

   /**
   * Get snapKbyte
   * @return snapKbyte
  **/
  @Schema(description = "")
  public Long getSnapKbyte() {
    return snapKbyte;
  }

  public void setSnapKbyte(Long snapKbyte) {
    this.snapKbyte = snapKbyte;
  }

  public PoolStat totalBandwidthKbyte(Double totalBandwidthKbyte) {
    this.totalBandwidthKbyte = totalBandwidthKbyte;
    return this;
  }

   /**
   * Get totalBandwidthKbyte
   * @return totalBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getTotalBandwidthKbyte() {
    return totalBandwidthKbyte;
  }

  public void setTotalBandwidthKbyte(Double totalBandwidthKbyte) {
    this.totalBandwidthKbyte = totalBandwidthKbyte;
  }

  public PoolStat totalCacheKbyte(Double totalCacheKbyte) {
    this.totalCacheKbyte = totalCacheKbyte;
    return this;
  }

   /**
   * Get totalCacheKbyte
   * @return totalCacheKbyte
  **/
  @Schema(description = "")
  public Double getTotalCacheKbyte() {
    return totalCacheKbyte;
  }

  public void setTotalCacheKbyte(Double totalCacheKbyte) {
    this.totalCacheKbyte = totalCacheKbyte;
  }

  public PoolStat totalIops(Double totalIops) {
    this.totalIops = totalIops;
    return this;
  }

   /**
   * Get totalIops
   * @return totalIops
  **/
  @Schema(description = "")
  public Double getTotalIops() {
    return totalIops;
  }

  public void setTotalIops(Double totalIops) {
    this.totalIops = totalIops;
  }

  public PoolStat totalKbyte(Long totalKbyte) {
    this.totalKbyte = totalKbyte;
    return this;
  }

   /**
   * Get totalKbyte
   * @return totalKbyte
  **/
  @Schema(description = "")
  public Long getTotalKbyte() {
    return totalKbyte;
  }

  public void setTotalKbyte(Long totalKbyte) {
    this.totalKbyte = totalKbyte;
  }

  public PoolStat unavailableNum(Long unavailableNum) {
    this.unavailableNum = unavailableNum;
    return this;
  }

   /**
   * Get unavailableNum
   * @return unavailableNum
  **/
  @Schema(description = "")
  public Long getUnavailableNum() {
    return unavailableNum;
  }

  public void setUnavailableNum(Long unavailableNum) {
    this.unavailableNum = unavailableNum;
  }

  public PoolStat unavailablePercent(Double unavailablePercent) {
    this.unavailablePercent = unavailablePercent;
    return this;
  }

   /**
   * Get unavailablePercent
   * @return unavailablePercent
  **/
  @Schema(description = "")
  public Double getUnavailablePercent() {
    return unavailablePercent;
  }

  public void setUnavailablePercent(Double unavailablePercent) {
    this.unavailablePercent = unavailablePercent;
  }

  public PoolStat unusedDataKbyte(Double unusedDataKbyte) {
    this.unusedDataKbyte = unusedDataKbyte;
    return this;
  }

   /**
   * Get unusedDataKbyte
   * @return unusedDataKbyte
  **/
  @Schema(description = "")
  public Double getUnusedDataKbyte() {
    return unusedDataKbyte;
  }

  public void setUnusedDataKbyte(Double unusedDataKbyte) {
    this.unusedDataKbyte = unusedDataKbyte;
  }

  public PoolStat usedKbyte(Long usedKbyte) {
    this.usedKbyte = usedKbyte;
    return this;
  }

   /**
   * Get usedKbyte
   * @return usedKbyte
  **/
  @Schema(description = "")
  public Long getUsedKbyte() {
    return usedKbyte;
  }

  public void setUsedKbyte(Long usedKbyte) {
    this.usedKbyte = usedKbyte;
  }

  public PoolStat usedPercent(Double usedPercent) {
    this.usedPercent = usedPercent;
    return this;
  }

   /**
   * Get usedPercent
   * @return usedPercent
  **/
  @Schema(description = "")
  public Double getUsedPercent() {
    return usedPercent;
  }

  public void setUsedPercent(Double usedPercent) {
    this.usedPercent = usedPercent;
  }

  public PoolStat waterLevel(Double waterLevel) {
    this.waterLevel = waterLevel;
    return this;
  }

   /**
   * tier pool stat
   * @return waterLevel
  **/
  @Schema(description = "tier pool stat")
  public Double getWaterLevel() {
    return waterLevel;
  }

  public void setWaterLevel(Double waterLevel) {
    this.waterLevel = waterLevel;
  }

  public PoolStat writeBandwidthKbyte(Double writeBandwidthKbyte) {
    this.writeBandwidthKbyte = writeBandwidthKbyte;
    return this;
  }

   /**
   * Get writeBandwidthKbyte
   * @return writeBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getWriteBandwidthKbyte() {
    return writeBandwidthKbyte;
  }

  public void setWriteBandwidthKbyte(Double writeBandwidthKbyte) {
    this.writeBandwidthKbyte = writeBandwidthKbyte;
  }

  public PoolStat writeCacheKbyte(Double writeCacheKbyte) {
    this.writeCacheKbyte = writeCacheKbyte;
    return this;
  }

   /**
   * Get writeCacheKbyte
   * @return writeCacheKbyte
  **/
  @Schema(description = "")
  public Double getWriteCacheKbyte() {
    return writeCacheKbyte;
  }

  public void setWriteCacheKbyte(Double writeCacheKbyte) {
    this.writeCacheKbyte = writeCacheKbyte;
  }

  public PoolStat writeCacheMergeRate(Double writeCacheMergeRate) {
    this.writeCacheMergeRate = writeCacheMergeRate;
    return this;
  }

   /**
   * Get writeCacheMergeRate
   * @return writeCacheMergeRate
  **/
  @Schema(description = "")
  public Double getWriteCacheMergeRate() {
    return writeCacheMergeRate;
  }

  public void setWriteCacheMergeRate(Double writeCacheMergeRate) {
    this.writeCacheMergeRate = writeCacheMergeRate;
  }

  public PoolStat writeCachePercent(Double writeCachePercent) {
    this.writeCachePercent = writeCachePercent;
    return this;
  }

   /**
   * Get writeCachePercent
   * @return writeCachePercent
  **/
  @Schema(description = "")
  public Double getWriteCachePercent() {
    return writeCachePercent;
  }

  public void setWriteCachePercent(Double writeCachePercent) {
    this.writeCachePercent = writeCachePercent;
  }

  public PoolStat writeIoSizeKbyte(Double writeIoSizeKbyte) {
    this.writeIoSizeKbyte = writeIoSizeKbyte;
    return this;
  }

   /**
   * Get writeIoSizeKbyte
   * @return writeIoSizeKbyte
  **/
  @Schema(description = "")
  public Double getWriteIoSizeKbyte() {
    return writeIoSizeKbyte;
  }

  public void setWriteIoSizeKbyte(Double writeIoSizeKbyte) {
    this.writeIoSizeKbyte = writeIoSizeKbyte;
  }

  public PoolStat writeIops(Double writeIops) {
    this.writeIops = writeIops;
    return this;
  }

   /**
   * Get writeIops
   * @return writeIops
  **/
  @Schema(description = "")
  public Double getWriteIops() {
    return writeIops;
  }

  public void setWriteIops(Double writeIops) {
    this.writeIops = writeIops;
  }

  public PoolStat writeLatencyUs(Double writeLatencyUs) {
    this.writeLatencyUs = writeLatencyUs;
    return this;
  }

   /**
   * Get writeLatencyUs
   * @return writeLatencyUs
  **/
  @Schema(description = "")
  public Double getWriteLatencyUs() {
    return writeLatencyUs;
  }

  public void setWriteLatencyUs(Double writeLatencyUs) {
    this.writeLatencyUs = writeLatencyUs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolStat poolStat = (PoolStat) o;
    return Objects.equals(this.actualKbyte, poolStat.actualKbyte) &&
        Objects.equals(this.availableActualKbyte, poolStat.availableActualKbyte) &&
        Objects.equals(this.clientReadBandwidthKbyte, poolStat.clientReadBandwidthKbyte) &&
        Objects.equals(this.clientReadIoSizeKbyte, poolStat.clientReadIoSizeKbyte) &&
        Objects.equals(this.clientReadIops, poolStat.clientReadIops) &&
        Objects.equals(this.clientReadLatencyUs, poolStat.clientReadLatencyUs) &&
        Objects.equals(this.clientWriteBandwidthKbyte, poolStat.clientWriteBandwidthKbyte) &&
        Objects.equals(this.clientWriteIoSizeKbyte, poolStat.clientWriteIoSizeKbyte) &&
        Objects.equals(this.clientWriteIops, poolStat.clientWriteIops) &&
        Objects.equals(this.clientWriteLatencyUs, poolStat.clientWriteLatencyUs) &&
        Objects.equals(this.compressRatio, poolStat.compressRatio) &&
        Objects.equals(this.compressedKbyte, poolStat.compressedKbyte) &&
        Objects.equals(this.create, poolStat.create) &&
        Objects.equals(this.creatingNum, poolStat.creatingNum) &&
        Objects.equals(this.dataKbyte, poolStat.dataKbyte) &&
        Objects.equals(this.degradedNum, poolStat.degradedNum) &&
        Objects.equals(this.degradedPercent, poolStat.degradedPercent) &&
        Objects.equals(this.errorKbyte, poolStat.errorKbyte) &&
        Objects.equals(this.flushReadBandwidthKbyte, poolStat.flushReadBandwidthKbyte) &&
        Objects.equals(this.flushReadIoSizeKbyte, poolStat.flushReadIoSizeKbyte) &&
        Objects.equals(this.flushReadIops, poolStat.flushReadIops) &&
        Objects.equals(this.flushReadLatencyUs, poolStat.flushReadLatencyUs) &&
        Objects.equals(this.flushWriteBandwidthKbyte, poolStat.flushWriteBandwidthKbyte) &&
        Objects.equals(this.flushWriteIoSizeKbyte, poolStat.flushWriteIoSizeKbyte) &&
        Objects.equals(this.flushWriteIops, poolStat.flushWriteIops) &&
        Objects.equals(this.flushWriteLatencyUs, poolStat.flushWriteLatencyUs) &&
        Objects.equals(this.garbageRatio, poolStat.garbageRatio) &&
        Objects.equals(this.gcReadBandwidthKbyte, poolStat.gcReadBandwidthKbyte) &&
        Objects.equals(this.gcReadIoSizeKbyte, poolStat.gcReadIoSizeKbyte) &&
        Objects.equals(this.gcReadIops, poolStat.gcReadIops) &&
        Objects.equals(this.gcReadLatencyUs, poolStat.gcReadLatencyUs) &&
        Objects.equals(this.gcRemoveBandwidthKbyte, poolStat.gcRemoveBandwidthKbyte) &&
        Objects.equals(this.gcRemoveIoSizeKbyte, poolStat.gcRemoveIoSizeKbyte) &&
        Objects.equals(this.gcRemoveIops, poolStat.gcRemoveIops) &&
        Objects.equals(this.gcWriteBandwidthKbyte, poolStat.gcWriteBandwidthKbyte) &&
        Objects.equals(this.gcWriteIoSizeKbyte, poolStat.gcWriteIoSizeKbyte) &&
        Objects.equals(this.gcWriteIops, poolStat.gcWriteIops) &&
        Objects.equals(this.gcWriteLatencyUs, poolStat.gcWriteLatencyUs) &&
        Objects.equals(this.healthyNum, poolStat.healthyNum) &&
        Objects.equals(this.healthyPercent, poolStat.healthyPercent) &&
        Objects.equals(this.maxAvailKbyte, poolStat.maxAvailKbyte) &&
        Objects.equals(this.minGarbageKbyte, poolStat.minGarbageKbyte) &&
        Objects.equals(this.omapTotalKbyte, poolStat.omapTotalKbyte) &&
        Objects.equals(this.omapUsedKbyte, poolStat.omapUsedKbyte) &&
        Objects.equals(this.omapUsedPercent, poolStat.omapUsedPercent) &&
        Objects.equals(this.readBandwidthKbyte, poolStat.readBandwidthKbyte) &&
        Objects.equals(this.readCacheHitRate, poolStat.readCacheHitRate) &&
        Objects.equals(this.readCacheKbyte, poolStat.readCacheKbyte) &&
        Objects.equals(this.readCachePercent, poolStat.readCachePercent) &&
        Objects.equals(this.readIoSizeKbyte, poolStat.readIoSizeKbyte) &&
        Objects.equals(this.readIops, poolStat.readIops) &&
        Objects.equals(this.readLatencyUs, poolStat.readLatencyUs) &&
        Objects.equals(this.recoveryBandwidthKbyte, poolStat.recoveryBandwidthKbyte) &&
        Objects.equals(this.recoveryIops, poolStat.recoveryIops) &&
        Objects.equals(this.recoveryNum, poolStat.recoveryNum) &&
        Objects.equals(this.recoveryPercent, poolStat.recoveryPercent) &&
        Objects.equals(this.recoveryRemainSecond, poolStat.recoveryRemainSecond) &&
        Objects.equals(this.removeBandwidthKbyte, poolStat.removeBandwidthKbyte) &&
        Objects.equals(this.removeIops, poolStat.removeIops) &&
        Objects.equals(this.reservedDataKbyte, poolStat.reservedDataKbyte) &&
        Objects.equals(this.reservedDataPercent, poolStat.reservedDataPercent) &&
        Objects.equals(this.reservedUsedKbyte, poolStat.reservedUsedKbyte) &&
        Objects.equals(this.rmwBandwidthKbyte, poolStat.rmwBandwidthKbyte) &&
        Objects.equals(this.rmwIops, poolStat.rmwIops) &&
        Objects.equals(this.snapKbyte, poolStat.snapKbyte) &&
        Objects.equals(this.totalBandwidthKbyte, poolStat.totalBandwidthKbyte) &&
        Objects.equals(this.totalCacheKbyte, poolStat.totalCacheKbyte) &&
        Objects.equals(this.totalIops, poolStat.totalIops) &&
        Objects.equals(this.totalKbyte, poolStat.totalKbyte) &&
        Objects.equals(this.unavailableNum, poolStat.unavailableNum) &&
        Objects.equals(this.unavailablePercent, poolStat.unavailablePercent) &&
        Objects.equals(this.unusedDataKbyte, poolStat.unusedDataKbyte) &&
        Objects.equals(this.usedKbyte, poolStat.usedKbyte) &&
        Objects.equals(this.usedPercent, poolStat.usedPercent) &&
        Objects.equals(this.waterLevel, poolStat.waterLevel) &&
        Objects.equals(this.writeBandwidthKbyte, poolStat.writeBandwidthKbyte) &&
        Objects.equals(this.writeCacheKbyte, poolStat.writeCacheKbyte) &&
        Objects.equals(this.writeCacheMergeRate, poolStat.writeCacheMergeRate) &&
        Objects.equals(this.writeCachePercent, poolStat.writeCachePercent) &&
        Objects.equals(this.writeIoSizeKbyte, poolStat.writeIoSizeKbyte) &&
        Objects.equals(this.writeIops, poolStat.writeIops) &&
        Objects.equals(this.writeLatencyUs, poolStat.writeLatencyUs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualKbyte, availableActualKbyte, clientReadBandwidthKbyte, clientReadIoSizeKbyte, clientReadIops, clientReadLatencyUs, clientWriteBandwidthKbyte, clientWriteIoSizeKbyte, clientWriteIops, clientWriteLatencyUs, compressRatio, compressedKbyte, create, creatingNum, dataKbyte, degradedNum, degradedPercent, errorKbyte, flushReadBandwidthKbyte, flushReadIoSizeKbyte, flushReadIops, flushReadLatencyUs, flushWriteBandwidthKbyte, flushWriteIoSizeKbyte, flushWriteIops, flushWriteLatencyUs, garbageRatio, gcReadBandwidthKbyte, gcReadIoSizeKbyte, gcReadIops, gcReadLatencyUs, gcRemoveBandwidthKbyte, gcRemoveIoSizeKbyte, gcRemoveIops, gcWriteBandwidthKbyte, gcWriteIoSizeKbyte, gcWriteIops, gcWriteLatencyUs, healthyNum, healthyPercent, maxAvailKbyte, minGarbageKbyte, omapTotalKbyte, omapUsedKbyte, omapUsedPercent, readBandwidthKbyte, readCacheHitRate, readCacheKbyte, readCachePercent, readIoSizeKbyte, readIops, readLatencyUs, recoveryBandwidthKbyte, recoveryIops, recoveryNum, recoveryPercent, recoveryRemainSecond, removeBandwidthKbyte, removeIops, reservedDataKbyte, reservedDataPercent, reservedUsedKbyte, rmwBandwidthKbyte, rmwIops, snapKbyte, totalBandwidthKbyte, totalCacheKbyte, totalIops, totalKbyte, unavailableNum, unavailablePercent, unusedDataKbyte, usedKbyte, usedPercent, waterLevel, writeBandwidthKbyte, writeCacheKbyte, writeCacheMergeRate, writeCachePercent, writeIoSizeKbyte, writeIops, writeLatencyUs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolStat {\n");
    
    sb.append("    actualKbyte: ").append(toIndentedString(actualKbyte)).append("\n");
    sb.append("    availableActualKbyte: ").append(toIndentedString(availableActualKbyte)).append("\n");
    sb.append("    clientReadBandwidthKbyte: ").append(toIndentedString(clientReadBandwidthKbyte)).append("\n");
    sb.append("    clientReadIoSizeKbyte: ").append(toIndentedString(clientReadIoSizeKbyte)).append("\n");
    sb.append("    clientReadIops: ").append(toIndentedString(clientReadIops)).append("\n");
    sb.append("    clientReadLatencyUs: ").append(toIndentedString(clientReadLatencyUs)).append("\n");
    sb.append("    clientWriteBandwidthKbyte: ").append(toIndentedString(clientWriteBandwidthKbyte)).append("\n");
    sb.append("    clientWriteIoSizeKbyte: ").append(toIndentedString(clientWriteIoSizeKbyte)).append("\n");
    sb.append("    clientWriteIops: ").append(toIndentedString(clientWriteIops)).append("\n");
    sb.append("    clientWriteLatencyUs: ").append(toIndentedString(clientWriteLatencyUs)).append("\n");
    sb.append("    compressRatio: ").append(toIndentedString(compressRatio)).append("\n");
    sb.append("    compressedKbyte: ").append(toIndentedString(compressedKbyte)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    creatingNum: ").append(toIndentedString(creatingNum)).append("\n");
    sb.append("    dataKbyte: ").append(toIndentedString(dataKbyte)).append("\n");
    sb.append("    degradedNum: ").append(toIndentedString(degradedNum)).append("\n");
    sb.append("    degradedPercent: ").append(toIndentedString(degradedPercent)).append("\n");
    sb.append("    errorKbyte: ").append(toIndentedString(errorKbyte)).append("\n");
    sb.append("    flushReadBandwidthKbyte: ").append(toIndentedString(flushReadBandwidthKbyte)).append("\n");
    sb.append("    flushReadIoSizeKbyte: ").append(toIndentedString(flushReadIoSizeKbyte)).append("\n");
    sb.append("    flushReadIops: ").append(toIndentedString(flushReadIops)).append("\n");
    sb.append("    flushReadLatencyUs: ").append(toIndentedString(flushReadLatencyUs)).append("\n");
    sb.append("    flushWriteBandwidthKbyte: ").append(toIndentedString(flushWriteBandwidthKbyte)).append("\n");
    sb.append("    flushWriteIoSizeKbyte: ").append(toIndentedString(flushWriteIoSizeKbyte)).append("\n");
    sb.append("    flushWriteIops: ").append(toIndentedString(flushWriteIops)).append("\n");
    sb.append("    flushWriteLatencyUs: ").append(toIndentedString(flushWriteLatencyUs)).append("\n");
    sb.append("    garbageRatio: ").append(toIndentedString(garbageRatio)).append("\n");
    sb.append("    gcReadBandwidthKbyte: ").append(toIndentedString(gcReadBandwidthKbyte)).append("\n");
    sb.append("    gcReadIoSizeKbyte: ").append(toIndentedString(gcReadIoSizeKbyte)).append("\n");
    sb.append("    gcReadIops: ").append(toIndentedString(gcReadIops)).append("\n");
    sb.append("    gcReadLatencyUs: ").append(toIndentedString(gcReadLatencyUs)).append("\n");
    sb.append("    gcRemoveBandwidthKbyte: ").append(toIndentedString(gcRemoveBandwidthKbyte)).append("\n");
    sb.append("    gcRemoveIoSizeKbyte: ").append(toIndentedString(gcRemoveIoSizeKbyte)).append("\n");
    sb.append("    gcRemoveIops: ").append(toIndentedString(gcRemoveIops)).append("\n");
    sb.append("    gcWriteBandwidthKbyte: ").append(toIndentedString(gcWriteBandwidthKbyte)).append("\n");
    sb.append("    gcWriteIoSizeKbyte: ").append(toIndentedString(gcWriteIoSizeKbyte)).append("\n");
    sb.append("    gcWriteIops: ").append(toIndentedString(gcWriteIops)).append("\n");
    sb.append("    gcWriteLatencyUs: ").append(toIndentedString(gcWriteLatencyUs)).append("\n");
    sb.append("    healthyNum: ").append(toIndentedString(healthyNum)).append("\n");
    sb.append("    healthyPercent: ").append(toIndentedString(healthyPercent)).append("\n");
    sb.append("    maxAvailKbyte: ").append(toIndentedString(maxAvailKbyte)).append("\n");
    sb.append("    minGarbageKbyte: ").append(toIndentedString(minGarbageKbyte)).append("\n");
    sb.append("    omapTotalKbyte: ").append(toIndentedString(omapTotalKbyte)).append("\n");
    sb.append("    omapUsedKbyte: ").append(toIndentedString(omapUsedKbyte)).append("\n");
    sb.append("    omapUsedPercent: ").append(toIndentedString(omapUsedPercent)).append("\n");
    sb.append("    readBandwidthKbyte: ").append(toIndentedString(readBandwidthKbyte)).append("\n");
    sb.append("    readCacheHitRate: ").append(toIndentedString(readCacheHitRate)).append("\n");
    sb.append("    readCacheKbyte: ").append(toIndentedString(readCacheKbyte)).append("\n");
    sb.append("    readCachePercent: ").append(toIndentedString(readCachePercent)).append("\n");
    sb.append("    readIoSizeKbyte: ").append(toIndentedString(readIoSizeKbyte)).append("\n");
    sb.append("    readIops: ").append(toIndentedString(readIops)).append("\n");
    sb.append("    readLatencyUs: ").append(toIndentedString(readLatencyUs)).append("\n");
    sb.append("    recoveryBandwidthKbyte: ").append(toIndentedString(recoveryBandwidthKbyte)).append("\n");
    sb.append("    recoveryIops: ").append(toIndentedString(recoveryIops)).append("\n");
    sb.append("    recoveryNum: ").append(toIndentedString(recoveryNum)).append("\n");
    sb.append("    recoveryPercent: ").append(toIndentedString(recoveryPercent)).append("\n");
    sb.append("    recoveryRemainSecond: ").append(toIndentedString(recoveryRemainSecond)).append("\n");
    sb.append("    removeBandwidthKbyte: ").append(toIndentedString(removeBandwidthKbyte)).append("\n");
    sb.append("    removeIops: ").append(toIndentedString(removeIops)).append("\n");
    sb.append("    reservedDataKbyte: ").append(toIndentedString(reservedDataKbyte)).append("\n");
    sb.append("    reservedDataPercent: ").append(toIndentedString(reservedDataPercent)).append("\n");
    sb.append("    reservedUsedKbyte: ").append(toIndentedString(reservedUsedKbyte)).append("\n");
    sb.append("    rmwBandwidthKbyte: ").append(toIndentedString(rmwBandwidthKbyte)).append("\n");
    sb.append("    rmwIops: ").append(toIndentedString(rmwIops)).append("\n");
    sb.append("    snapKbyte: ").append(toIndentedString(snapKbyte)).append("\n");
    sb.append("    totalBandwidthKbyte: ").append(toIndentedString(totalBandwidthKbyte)).append("\n");
    sb.append("    totalCacheKbyte: ").append(toIndentedString(totalCacheKbyte)).append("\n");
    sb.append("    totalIops: ").append(toIndentedString(totalIops)).append("\n");
    sb.append("    totalKbyte: ").append(toIndentedString(totalKbyte)).append("\n");
    sb.append("    unavailableNum: ").append(toIndentedString(unavailableNum)).append("\n");
    sb.append("    unavailablePercent: ").append(toIndentedString(unavailablePercent)).append("\n");
    sb.append("    unusedDataKbyte: ").append(toIndentedString(unusedDataKbyte)).append("\n");
    sb.append("    usedKbyte: ").append(toIndentedString(usedKbyte)).append("\n");
    sb.append("    usedPercent: ").append(toIndentedString(usedPercent)).append("\n");
    sb.append("    waterLevel: ").append(toIndentedString(waterLevel)).append("\n");
    sb.append("    writeBandwidthKbyte: ").append(toIndentedString(writeBandwidthKbyte)).append("\n");
    sb.append("    writeCacheKbyte: ").append(toIndentedString(writeCacheKbyte)).append("\n");
    sb.append("    writeCacheMergeRate: ").append(toIndentedString(writeCacheMergeRate)).append("\n");
    sb.append("    writeCachePercent: ").append(toIndentedString(writeCachePercent)).append("\n");
    sb.append("    writeIoSizeKbyte: ").append(toIndentedString(writeIoSizeKbyte)).append("\n");
    sb.append("    writeIops: ").append(toIndentedString(writeIops)).append("\n");
    sb.append("    writeLatencyUs: ").append(toIndentedString(writeLatencyUs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
