/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * OspUserZoneStat
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class OspUserZoneStat {
  @SerializedName("cache_allocated_size")
  private Long cacheAllocatedSize = null;

  @SerializedName("fast_flow_allocated_objects")
  private Long fastFlowAllocatedObjects = null;

  @SerializedName("utilized_size")
  private Long utilizedSize = null;

  @SerializedName("origin_cdn_allocated_size")
  private Long originCdnAllocatedSize = null;

  @SerializedName("cache_utilized_size")
  private Long cacheUtilizedSize = null;

  @SerializedName("allocated_size")
  private Long allocatedSize = null;

  @SerializedName("fast_flow_utilized_size")
  private Long fastFlowUtilizedSize = null;

  @SerializedName("origin_cdn_allocated_objects")
  private Long originCdnAllocatedObjects = null;

  @SerializedName("cache_allocated_objects")
  private Long cacheAllocatedObjects = null;

  @SerializedName("fast_flow_allocated_size")
  private Long fastFlowAllocatedSize = null;

  @SerializedName("zone_name")
  private String zoneName = null;

  @SerializedName("allocated_objects")
  private Long allocatedObjects = null;

  @SerializedName("origin_cdn_utilized_size")
  private Long originCdnUtilizedSize = null;

  public OspUserZoneStat cacheAllocatedSize(Long cacheAllocatedSize) {
    this.cacheAllocatedSize = cacheAllocatedSize;
    return this;
  }

   /**
   * Get cacheAllocatedSize
   * @return cacheAllocatedSize
  **/
  @Schema(description = "")
  public Long getCacheAllocatedSize() {
    return cacheAllocatedSize;
  }

  public void setCacheAllocatedSize(Long cacheAllocatedSize) {
    this.cacheAllocatedSize = cacheAllocatedSize;
  }

  public OspUserZoneStat fastFlowAllocatedObjects(Long fastFlowAllocatedObjects) {
    this.fastFlowAllocatedObjects = fastFlowAllocatedObjects;
    return this;
  }

   /**
   * Get fastFlowAllocatedObjects
   * @return fastFlowAllocatedObjects
  **/
  @Schema(description = "")
  public Long getFastFlowAllocatedObjects() {
    return fastFlowAllocatedObjects;
  }

  public void setFastFlowAllocatedObjects(Long fastFlowAllocatedObjects) {
    this.fastFlowAllocatedObjects = fastFlowAllocatedObjects;
  }

  public OspUserZoneStat utilizedSize(Long utilizedSize) {
    this.utilizedSize = utilizedSize;
    return this;
  }

   /**
   * Get utilizedSize
   * @return utilizedSize
  **/
  @Schema(description = "")
  public Long getUtilizedSize() {
    return utilizedSize;
  }

  public void setUtilizedSize(Long utilizedSize) {
    this.utilizedSize = utilizedSize;
  }

  public OspUserZoneStat originCdnAllocatedSize(Long originCdnAllocatedSize) {
    this.originCdnAllocatedSize = originCdnAllocatedSize;
    return this;
  }

   /**
   * Get originCdnAllocatedSize
   * @return originCdnAllocatedSize
  **/
  @Schema(description = "")
  public Long getOriginCdnAllocatedSize() {
    return originCdnAllocatedSize;
  }

  public void setOriginCdnAllocatedSize(Long originCdnAllocatedSize) {
    this.originCdnAllocatedSize = originCdnAllocatedSize;
  }

  public OspUserZoneStat cacheUtilizedSize(Long cacheUtilizedSize) {
    this.cacheUtilizedSize = cacheUtilizedSize;
    return this;
  }

   /**
   * Get cacheUtilizedSize
   * @return cacheUtilizedSize
  **/
  @Schema(description = "")
  public Long getCacheUtilizedSize() {
    return cacheUtilizedSize;
  }

  public void setCacheUtilizedSize(Long cacheUtilizedSize) {
    this.cacheUtilizedSize = cacheUtilizedSize;
  }

  public OspUserZoneStat allocatedSize(Long allocatedSize) {
    this.allocatedSize = allocatedSize;
    return this;
  }

   /**
   * Get allocatedSize
   * @return allocatedSize
  **/
  @Schema(description = "")
  public Long getAllocatedSize() {
    return allocatedSize;
  }

  public void setAllocatedSize(Long allocatedSize) {
    this.allocatedSize = allocatedSize;
  }

  public OspUserZoneStat fastFlowUtilizedSize(Long fastFlowUtilizedSize) {
    this.fastFlowUtilizedSize = fastFlowUtilizedSize;
    return this;
  }

   /**
   * Get fastFlowUtilizedSize
   * @return fastFlowUtilizedSize
  **/
  @Schema(description = "")
  public Long getFastFlowUtilizedSize() {
    return fastFlowUtilizedSize;
  }

  public void setFastFlowUtilizedSize(Long fastFlowUtilizedSize) {
    this.fastFlowUtilizedSize = fastFlowUtilizedSize;
  }

  public OspUserZoneStat originCdnAllocatedObjects(Long originCdnAllocatedObjects) {
    this.originCdnAllocatedObjects = originCdnAllocatedObjects;
    return this;
  }

   /**
   * Get originCdnAllocatedObjects
   * @return originCdnAllocatedObjects
  **/
  @Schema(description = "")
  public Long getOriginCdnAllocatedObjects() {
    return originCdnAllocatedObjects;
  }

  public void setOriginCdnAllocatedObjects(Long originCdnAllocatedObjects) {
    this.originCdnAllocatedObjects = originCdnAllocatedObjects;
  }

  public OspUserZoneStat cacheAllocatedObjects(Long cacheAllocatedObjects) {
    this.cacheAllocatedObjects = cacheAllocatedObjects;
    return this;
  }

   /**
   * Get cacheAllocatedObjects
   * @return cacheAllocatedObjects
  **/
  @Schema(description = "")
  public Long getCacheAllocatedObjects() {
    return cacheAllocatedObjects;
  }

  public void setCacheAllocatedObjects(Long cacheAllocatedObjects) {
    this.cacheAllocatedObjects = cacheAllocatedObjects;
  }

  public OspUserZoneStat fastFlowAllocatedSize(Long fastFlowAllocatedSize) {
    this.fastFlowAllocatedSize = fastFlowAllocatedSize;
    return this;
  }

   /**
   * Get fastFlowAllocatedSize
   * @return fastFlowAllocatedSize
  **/
  @Schema(description = "")
  public Long getFastFlowAllocatedSize() {
    return fastFlowAllocatedSize;
  }

  public void setFastFlowAllocatedSize(Long fastFlowAllocatedSize) {
    this.fastFlowAllocatedSize = fastFlowAllocatedSize;
  }

  public OspUserZoneStat zoneName(String zoneName) {
    this.zoneName = zoneName;
    return this;
  }

   /**
   * Get zoneName
   * @return zoneName
  **/
  @Schema(description = "")
  public String getZoneName() {
    return zoneName;
  }

  public void setZoneName(String zoneName) {
    this.zoneName = zoneName;
  }

  public OspUserZoneStat allocatedObjects(Long allocatedObjects) {
    this.allocatedObjects = allocatedObjects;
    return this;
  }

   /**
   * Get allocatedObjects
   * @return allocatedObjects
  **/
  @Schema(description = "")
  public Long getAllocatedObjects() {
    return allocatedObjects;
  }

  public void setAllocatedObjects(Long allocatedObjects) {
    this.allocatedObjects = allocatedObjects;
  }

  public OspUserZoneStat originCdnUtilizedSize(Long originCdnUtilizedSize) {
    this.originCdnUtilizedSize = originCdnUtilizedSize;
    return this;
  }

   /**
   * Get originCdnUtilizedSize
   * @return originCdnUtilizedSize
  **/
  @Schema(description = "")
  public Long getOriginCdnUtilizedSize() {
    return originCdnUtilizedSize;
  }

  public void setOriginCdnUtilizedSize(Long originCdnUtilizedSize) {
    this.originCdnUtilizedSize = originCdnUtilizedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OspUserZoneStat ospUserZoneStat = (OspUserZoneStat) o;
    return Objects.equals(this.cacheAllocatedSize, ospUserZoneStat.cacheAllocatedSize) &&
        Objects.equals(this.fastFlowAllocatedObjects, ospUserZoneStat.fastFlowAllocatedObjects) &&
        Objects.equals(this.utilizedSize, ospUserZoneStat.utilizedSize) &&
        Objects.equals(this.originCdnAllocatedSize, ospUserZoneStat.originCdnAllocatedSize) &&
        Objects.equals(this.cacheUtilizedSize, ospUserZoneStat.cacheUtilizedSize) &&
        Objects.equals(this.allocatedSize, ospUserZoneStat.allocatedSize) &&
        Objects.equals(this.fastFlowUtilizedSize, ospUserZoneStat.fastFlowUtilizedSize) &&
        Objects.equals(this.originCdnAllocatedObjects, ospUserZoneStat.originCdnAllocatedObjects) &&
        Objects.equals(this.cacheAllocatedObjects, ospUserZoneStat.cacheAllocatedObjects) &&
        Objects.equals(this.fastFlowAllocatedSize, ospUserZoneStat.fastFlowAllocatedSize) &&
        Objects.equals(this.zoneName, ospUserZoneStat.zoneName) &&
        Objects.equals(this.allocatedObjects, ospUserZoneStat.allocatedObjects) &&
        Objects.equals(this.originCdnUtilizedSize, ospUserZoneStat.originCdnUtilizedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheAllocatedSize, fastFlowAllocatedObjects, utilizedSize, originCdnAllocatedSize, cacheUtilizedSize, allocatedSize, fastFlowUtilizedSize, originCdnAllocatedObjects, cacheAllocatedObjects, fastFlowAllocatedSize, zoneName, allocatedObjects, originCdnUtilizedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OspUserZoneStat {\n");
    
    sb.append("    cacheAllocatedSize: ").append(toIndentedString(cacheAllocatedSize)).append("\n");
    sb.append("    fastFlowAllocatedObjects: ").append(toIndentedString(fastFlowAllocatedObjects)).append("\n");
    sb.append("    utilizedSize: ").append(toIndentedString(utilizedSize)).append("\n");
    sb.append("    originCdnAllocatedSize: ").append(toIndentedString(originCdnAllocatedSize)).append("\n");
    sb.append("    cacheUtilizedSize: ").append(toIndentedString(cacheUtilizedSize)).append("\n");
    sb.append("    allocatedSize: ").append(toIndentedString(allocatedSize)).append("\n");
    sb.append("    fastFlowUtilizedSize: ").append(toIndentedString(fastFlowUtilizedSize)).append("\n");
    sb.append("    originCdnAllocatedObjects: ").append(toIndentedString(originCdnAllocatedObjects)).append("\n");
    sb.append("    cacheAllocatedObjects: ").append(toIndentedString(cacheAllocatedObjects)).append("\n");
    sb.append("    fastFlowAllocatedSize: ").append(toIndentedString(fastFlowAllocatedSize)).append("\n");
    sb.append("    zoneName: ").append(toIndentedString(zoneName)).append("\n");
    sb.append("    allocatedObjects: ").append(toIndentedString(allocatedObjects)).append("\n");
    sb.append("    originCdnUtilizedSize: ").append(toIndentedString(originCdnUtilizedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
