/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * SSLCertificate ssl certificate model
 */
@Schema(description = "SSLCertificate ssl certificate model")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class SSLCertificate {
  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("force_https")
  private Boolean forceHttps = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("issuer")
  private Object issuer = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("not_after")
  private OffsetDateTime notAfter = null;

  @SerializedName("not_before")
  private OffsetDateTime notBefore = null;

  @SerializedName("permitted_dns_domains")
  private List<Object> permittedDnsDomains = null;

  @SerializedName("public_key_algorithm")
  private String publicKeyAlgorithm = null;

  @SerializedName("raw_certificate")
  private String rawCertificate = null;

  @SerializedName("signature_algorithm")
  private String signatureAlgorithm = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("subject")
  private Object subject = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  @SerializedName("version")
  private Long version = null;

  public SSLCertificate create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * created time of certificate
   * @return create
  **/
  @Schema(description = "created time of certificate")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public SSLCertificate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * certificate description
   * @return description
  **/
  @Schema(description = "certificate description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public SSLCertificate enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * enabled or not
   * @return enabled
  **/
  @Schema(description = "enabled or not")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public SSLCertificate forceHttps(Boolean forceHttps) {
    this.forceHttps = forceHttps;
    return this;
  }

   /**
   * redirect http request to https
   * @return forceHttps
  **/
  @Schema(description = "redirect http request to https")
  public Boolean isForceHttps() {
    return forceHttps;
  }

  public void setForceHttps(Boolean forceHttps) {
    this.forceHttps = forceHttps;
  }

  public SSLCertificate id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * certificate id
   * @return id
  **/
  @Schema(description = "certificate id")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public SSLCertificate issuer(Object issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * issuer info
   * @return issuer
  **/
  @Schema(description = "issuer info")
  public Object getIssuer() {
    return issuer;
  }

  public void setIssuer(Object issuer) {
    this.issuer = issuer;
  }

  public SSLCertificate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * certificate name
   * @return name
  **/
  @Schema(description = "certificate name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SSLCertificate notAfter(OffsetDateTime notAfter) {
    this.notAfter = notAfter;
    return this;
  }

   /**
   * validity is not after the time
   * @return notAfter
  **/
  @Schema(description = "validity is not after the time")
  public OffsetDateTime getNotAfter() {
    return notAfter;
  }

  public void setNotAfter(OffsetDateTime notAfter) {
    this.notAfter = notAfter;
  }

  public SSLCertificate notBefore(OffsetDateTime notBefore) {
    this.notBefore = notBefore;
    return this;
  }

   /**
   * validity is not before the time
   * @return notBefore
  **/
  @Schema(description = "validity is not before the time")
  public OffsetDateTime getNotBefore() {
    return notBefore;
  }

  public void setNotBefore(OffsetDateTime notBefore) {
    this.notBefore = notBefore;
  }

  public SSLCertificate permittedDnsDomains(List<Object> permittedDnsDomains) {
    this.permittedDnsDomains = permittedDnsDomains;
    return this;
  }

  public SSLCertificate addPermittedDnsDomainsItem(Object permittedDnsDomainsItem) {
    if (this.permittedDnsDomains == null) {
      this.permittedDnsDomains = new ArrayList<Object>();
    }
    this.permittedDnsDomains.add(permittedDnsDomainsItem);
    return this;
  }

   /**
   * permitted dns domains
   * @return permittedDnsDomains
  **/
  @Schema(description = "permitted dns domains")
  public List<Object> getPermittedDnsDomains() {
    return permittedDnsDomains;
  }

  public void setPermittedDnsDomains(List<Object> permittedDnsDomains) {
    this.permittedDnsDomains = permittedDnsDomains;
  }

  public SSLCertificate publicKeyAlgorithm(String publicKeyAlgorithm) {
    this.publicKeyAlgorithm = publicKeyAlgorithm;
    return this;
  }

   /**
   * public key algorithm
   * @return publicKeyAlgorithm
  **/
  @Schema(description = "public key algorithm")
  public String getPublicKeyAlgorithm() {
    return publicKeyAlgorithm;
  }

  public void setPublicKeyAlgorithm(String publicKeyAlgorithm) {
    this.publicKeyAlgorithm = publicKeyAlgorithm;
  }

  public SSLCertificate rawCertificate(String rawCertificate) {
    this.rawCertificate = rawCertificate;
    return this;
  }

   /**
   * public certificate
   * @return rawCertificate
  **/
  @Schema(description = "public certificate")
  public String getRawCertificate() {
    return rawCertificate;
  }

  public void setRawCertificate(String rawCertificate) {
    this.rawCertificate = rawCertificate;
  }

  public SSLCertificate signatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

   /**
   * signature algorithm
   * @return signatureAlgorithm
  **/
  @Schema(description = "signature algorithm")
  public String getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }

  public SSLCertificate status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public SSLCertificate subject(Object subject) {
    this.subject = subject;
    return this;
  }

   /**
   * subject info
   * @return subject
  **/
  @Schema(description = "subject info")
  public Object getSubject() {
    return subject;
  }

  public void setSubject(Object subject) {
    this.subject = subject;
  }

  public SSLCertificate type(String type) {
    this.type = type;
    return this;
  }

   /**
   * applied type: admin, s3, dfs_s3
   * @return type
  **/
  @Schema(description = "applied type: admin, s3, dfs_s3")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public SSLCertificate update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * updated time of certificate
   * @return update
  **/
  @Schema(description = "updated time of certificate")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }

  public SSLCertificate version(Long version) {
    this.version = version;
    return this;
  }

   /**
   * certificate version
   * @return version
  **/
  @Schema(description = "certificate version")
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSLCertificate ssLCertificate = (SSLCertificate) o;
    return Objects.equals(this.create, ssLCertificate.create) &&
        Objects.equals(this.description, ssLCertificate.description) &&
        Objects.equals(this.enabled, ssLCertificate.enabled) &&
        Objects.equals(this.forceHttps, ssLCertificate.forceHttps) &&
        Objects.equals(this.id, ssLCertificate.id) &&
        Objects.equals(this.issuer, ssLCertificate.issuer) &&
        Objects.equals(this.name, ssLCertificate.name) &&
        Objects.equals(this.notAfter, ssLCertificate.notAfter) &&
        Objects.equals(this.notBefore, ssLCertificate.notBefore) &&
        Objects.equals(this.permittedDnsDomains, ssLCertificate.permittedDnsDomains) &&
        Objects.equals(this.publicKeyAlgorithm, ssLCertificate.publicKeyAlgorithm) &&
        Objects.equals(this.rawCertificate, ssLCertificate.rawCertificate) &&
        Objects.equals(this.signatureAlgorithm, ssLCertificate.signatureAlgorithm) &&
        Objects.equals(this.status, ssLCertificate.status) &&
        Objects.equals(this.subject, ssLCertificate.subject) &&
        Objects.equals(this.type, ssLCertificate.type) &&
        Objects.equals(this.update, ssLCertificate.update) &&
        Objects.equals(this.version, ssLCertificate.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(create, description, enabled, forceHttps, id, issuer, name, notAfter, notBefore, permittedDnsDomains, publicKeyAlgorithm, rawCertificate, signatureAlgorithm, status, subject, type, update, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSLCertificate {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    forceHttps: ").append(toIndentedString(forceHttps)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notAfter: ").append(toIndentedString(notAfter)).append("\n");
    sb.append("    notBefore: ").append(toIndentedString(notBefore)).append("\n");
    sb.append("    permittedDnsDomains: ").append(toIndentedString(permittedDnsDomains)).append("\n");
    sb.append("    publicKeyAlgorithm: ").append(toIndentedString(publicKeyAlgorithm)).append("\n");
    sb.append("    rawCertificate: ").append(toIndentedString(rawCertificate)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
