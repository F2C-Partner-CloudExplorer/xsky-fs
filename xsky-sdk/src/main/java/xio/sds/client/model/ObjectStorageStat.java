/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * ObjectStorageStat defines stat of object storage
 */
@Schema(description = "ObjectStorageStat defines stat of object storage")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class ObjectStorageStat {
  @SerializedName("allocated_objects")
  private Long allocatedObjects = null;

  @SerializedName("allocated_size")
  private Long allocatedSize = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("external_allocated_objects")
  private Long externalAllocatedObjects = null;

  @SerializedName("external_allocated_size")
  private Long externalAllocatedSize = null;

  @SerializedName("local_allocated_objects")
  private Long localAllocatedObjects = null;

  @SerializedName("local_allocated_size")
  private Long localAllocatedSize = null;

  public ObjectStorageStat allocatedObjects(Long allocatedObjects) {
    this.allocatedObjects = allocatedObjects;
    return this;
  }

   /**
   * Get allocatedObjects
   * @return allocatedObjects
  **/
  @Schema(description = "")
  public Long getAllocatedObjects() {
    return allocatedObjects;
  }

  public void setAllocatedObjects(Long allocatedObjects) {
    this.allocatedObjects = allocatedObjects;
  }

  public ObjectStorageStat allocatedSize(Long allocatedSize) {
    this.allocatedSize = allocatedSize;
    return this;
  }

   /**
   * Get allocatedSize
   * @return allocatedSize
  **/
  @Schema(description = "")
  public Long getAllocatedSize() {
    return allocatedSize;
  }

  public void setAllocatedSize(Long allocatedSize) {
    this.allocatedSize = allocatedSize;
  }

  public ObjectStorageStat create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public ObjectStorageStat externalAllocatedObjects(Long externalAllocatedObjects) {
    this.externalAllocatedObjects = externalAllocatedObjects;
    return this;
  }

   /**
   * Get externalAllocatedObjects
   * @return externalAllocatedObjects
  **/
  @Schema(description = "")
  public Long getExternalAllocatedObjects() {
    return externalAllocatedObjects;
  }

  public void setExternalAllocatedObjects(Long externalAllocatedObjects) {
    this.externalAllocatedObjects = externalAllocatedObjects;
  }

  public ObjectStorageStat externalAllocatedSize(Long externalAllocatedSize) {
    this.externalAllocatedSize = externalAllocatedSize;
    return this;
  }

   /**
   * Get externalAllocatedSize
   * @return externalAllocatedSize
  **/
  @Schema(description = "")
  public Long getExternalAllocatedSize() {
    return externalAllocatedSize;
  }

  public void setExternalAllocatedSize(Long externalAllocatedSize) {
    this.externalAllocatedSize = externalAllocatedSize;
  }

  public ObjectStorageStat localAllocatedObjects(Long localAllocatedObjects) {
    this.localAllocatedObjects = localAllocatedObjects;
    return this;
  }

   /**
   * Get localAllocatedObjects
   * @return localAllocatedObjects
  **/
  @Schema(description = "")
  public Long getLocalAllocatedObjects() {
    return localAllocatedObjects;
  }

  public void setLocalAllocatedObjects(Long localAllocatedObjects) {
    this.localAllocatedObjects = localAllocatedObjects;
  }

  public ObjectStorageStat localAllocatedSize(Long localAllocatedSize) {
    this.localAllocatedSize = localAllocatedSize;
    return this;
  }

   /**
   * Get localAllocatedSize
   * @return localAllocatedSize
  **/
  @Schema(description = "")
  public Long getLocalAllocatedSize() {
    return localAllocatedSize;
  }

  public void setLocalAllocatedSize(Long localAllocatedSize) {
    this.localAllocatedSize = localAllocatedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectStorageStat objectStorageStat = (ObjectStorageStat) o;
    return Objects.equals(this.allocatedObjects, objectStorageStat.allocatedObjects) &&
        Objects.equals(this.allocatedSize, objectStorageStat.allocatedSize) &&
        Objects.equals(this.create, objectStorageStat.create) &&
        Objects.equals(this.externalAllocatedObjects, objectStorageStat.externalAllocatedObjects) &&
        Objects.equals(this.externalAllocatedSize, objectStorageStat.externalAllocatedSize) &&
        Objects.equals(this.localAllocatedObjects, objectStorageStat.localAllocatedObjects) &&
        Objects.equals(this.localAllocatedSize, objectStorageStat.localAllocatedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatedObjects, allocatedSize, create, externalAllocatedObjects, externalAllocatedSize, localAllocatedObjects, localAllocatedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectStorageStat {\n");
    
    sb.append("    allocatedObjects: ").append(toIndentedString(allocatedObjects)).append("\n");
    sb.append("    allocatedSize: ").append(toIndentedString(allocatedSize)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    externalAllocatedObjects: ").append(toIndentedString(externalAllocatedObjects)).append("\n");
    sb.append("    externalAllocatedSize: ").append(toIndentedString(externalAllocatedSize)).append("\n");
    sb.append("    localAllocatedObjects: ").append(toIndentedString(localAllocatedObjects)).append("\n");
    sb.append("    localAllocatedSize: ").append(toIndentedString(localAllocatedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
