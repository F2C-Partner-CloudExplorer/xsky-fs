/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BucketFlag is the struct of bucket flag Note: the name of json tag must be consistent with the --bucket-flag parameter value  in radosgw-admin set-flag/remove-flag command
 */
@Schema(description = "BucketFlag is the struct of bucket flag Note: the name of json tag must be consistent with the --bucket-flag parameter value  in radosgw-admin set-flag/remove-flag command")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class BucketFlag {
  @SerializedName("delete_trigger_archive_tier")
  private Boolean deleteTriggerArchiveTier = null;

  @SerializedName("get_trigger_restore")
  private Boolean getTriggerRestore = null;

  @SerializedName("readonly")
  private Boolean readonly = null;

  @SerializedName("recycle")
  private Boolean recycle = null;

  @SerializedName("tier_cache")
  private Boolean tierCache = null;

  @SerializedName("tier_retain_external_object")
  private Boolean tierRetainExternalObject = null;

  @SerializedName("tier_worm")
  private Boolean tierWorm = null;

  @SerializedName("versioned")
  private Boolean versioned = null;

  @SerializedName("versions_suspended")
  private Boolean versionsSuspended = null;

  @SerializedName("worm")
  private Boolean worm = null;

  public BucketFlag deleteTriggerArchiveTier(Boolean deleteTriggerArchiveTier) {
    this.deleteTriggerArchiveTier = deleteTriggerArchiveTier;
    return this;
  }

   /**
   * Get deleteTriggerArchiveTier
   * @return deleteTriggerArchiveTier
  **/
  @Schema(description = "")
  public Boolean isDeleteTriggerArchiveTier() {
    return deleteTriggerArchiveTier;
  }

  public void setDeleteTriggerArchiveTier(Boolean deleteTriggerArchiveTier) {
    this.deleteTriggerArchiveTier = deleteTriggerArchiveTier;
  }

  public BucketFlag getTriggerRestore(Boolean getTriggerRestore) {
    this.getTriggerRestore = getTriggerRestore;
    return this;
  }

   /**
   * Get getTriggerRestore
   * @return getTriggerRestore
  **/
  @Schema(description = "")
  public Boolean isGetTriggerRestore() {
    return getTriggerRestore;
  }

  public void setGetTriggerRestore(Boolean getTriggerRestore) {
    this.getTriggerRestore = getTriggerRestore;
  }

  public BucketFlag readonly(Boolean readonly) {
    this.readonly = readonly;
    return this;
  }

   /**
   * Get readonly
   * @return readonly
  **/
  @Schema(description = "")
  public Boolean isReadonly() {
    return readonly;
  }

  public void setReadonly(Boolean readonly) {
    this.readonly = readonly;
  }

  public BucketFlag recycle(Boolean recycle) {
    this.recycle = recycle;
    return this;
  }

   /**
   * Get recycle
   * @return recycle
  **/
  @Schema(description = "")
  public Boolean isRecycle() {
    return recycle;
  }

  public void setRecycle(Boolean recycle) {
    this.recycle = recycle;
  }

  public BucketFlag tierCache(Boolean tierCache) {
    this.tierCache = tierCache;
    return this;
  }

   /**
   * Get tierCache
   * @return tierCache
  **/
  @Schema(description = "")
  public Boolean isTierCache() {
    return tierCache;
  }

  public void setTierCache(Boolean tierCache) {
    this.tierCache = tierCache;
  }

  public BucketFlag tierRetainExternalObject(Boolean tierRetainExternalObject) {
    this.tierRetainExternalObject = tierRetainExternalObject;
    return this;
  }

   /**
   * set bucket local delete mode
   * @return tierRetainExternalObject
  **/
  @Schema(description = "set bucket local delete mode")
  public Boolean isTierRetainExternalObject() {
    return tierRetainExternalObject;
  }

  public void setTierRetainExternalObject(Boolean tierRetainExternalObject) {
    this.tierRetainExternalObject = tierRetainExternalObject;
  }

  public BucketFlag tierWorm(Boolean tierWorm) {
    this.tierWorm = tierWorm;
    return this;
  }

   /**
   * Get tierWorm
   * @return tierWorm
  **/
  @Schema(description = "")
  public Boolean isTierWorm() {
    return tierWorm;
  }

  public void setTierWorm(Boolean tierWorm) {
    this.tierWorm = tierWorm;
  }

  public BucketFlag versioned(Boolean versioned) {
    this.versioned = versioned;
    return this;
  }

   /**
   * Get versioned
   * @return versioned
  **/
  @Schema(description = "")
  public Boolean isVersioned() {
    return versioned;
  }

  public void setVersioned(Boolean versioned) {
    this.versioned = versioned;
  }

  public BucketFlag versionsSuspended(Boolean versionsSuspended) {
    this.versionsSuspended = versionsSuspended;
    return this;
  }

   /**
   * Get versionsSuspended
   * @return versionsSuspended
  **/
  @Schema(description = "")
  public Boolean isVersionsSuspended() {
    return versionsSuspended;
  }

  public void setVersionsSuspended(Boolean versionsSuspended) {
    this.versionsSuspended = versionsSuspended;
  }

  public BucketFlag worm(Boolean worm) {
    this.worm = worm;
    return this;
  }

   /**
   * Get worm
   * @return worm
  **/
  @Schema(description = "")
  public Boolean isWorm() {
    return worm;
  }

  public void setWorm(Boolean worm) {
    this.worm = worm;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketFlag bucketFlag = (BucketFlag) o;
    return Objects.equals(this.deleteTriggerArchiveTier, bucketFlag.deleteTriggerArchiveTier) &&
        Objects.equals(this.getTriggerRestore, bucketFlag.getTriggerRestore) &&
        Objects.equals(this.readonly, bucketFlag.readonly) &&
        Objects.equals(this.recycle, bucketFlag.recycle) &&
        Objects.equals(this.tierCache, bucketFlag.tierCache) &&
        Objects.equals(this.tierRetainExternalObject, bucketFlag.tierRetainExternalObject) &&
        Objects.equals(this.tierWorm, bucketFlag.tierWorm) &&
        Objects.equals(this.versioned, bucketFlag.versioned) &&
        Objects.equals(this.versionsSuspended, bucketFlag.versionsSuspended) &&
        Objects.equals(this.worm, bucketFlag.worm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteTriggerArchiveTier, getTriggerRestore, readonly, recycle, tierCache, tierRetainExternalObject, tierWorm, versioned, versionsSuspended, worm);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketFlag {\n");
    
    sb.append("    deleteTriggerArchiveTier: ").append(toIndentedString(deleteTriggerArchiveTier)).append("\n");
    sb.append("    getTriggerRestore: ").append(toIndentedString(getTriggerRestore)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    recycle: ").append(toIndentedString(recycle)).append("\n");
    sb.append("    tierCache: ").append(toIndentedString(tierCache)).append("\n");
    sb.append("    tierRetainExternalObject: ").append(toIndentedString(tierRetainExternalObject)).append("\n");
    sb.append("    tierWorm: ").append(toIndentedString(tierWorm)).append("\n");
    sb.append("    versioned: ").append(toIndentedString(versioned)).append("\n");
    sb.append("    versionsSuspended: ").append(toIndentedString(versionsSuspended)).append("\n");
    sb.append("    worm: ").append(toIndentedString(worm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
