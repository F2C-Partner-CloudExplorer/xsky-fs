/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DiskNestview
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DiskNestview {
  @SerializedName("device")
  private String device = null;

  @SerializedName("disk_type")
  private String diskType = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("slot_id")
  private String slotId = null;

  @SerializedName("ssd_life_left")
  private Long ssdLifeLeft = null;

  @SerializedName("status")
  private String status = null;

  public DiskNestview device(String device) {
    this.device = device;
    return this;
  }

   /**
   * Get device
   * @return device
  **/
  @Schema(description = "")
  public String getDevice() {
    return device;
  }

  public void setDevice(String device) {
    this.device = device;
  }

  public DiskNestview diskType(String diskType) {
    this.diskType = diskType;
    return this;
  }

   /**
   * Get diskType
   * @return diskType
  **/
  @Schema(description = "")
  public String getDiskType() {
    return diskType;
  }

  public void setDiskType(String diskType) {
    this.diskType = diskType;
  }

  public DiskNestview id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DiskNestview slotId(String slotId) {
    this.slotId = slotId;
    return this;
  }

   /**
   * Get slotId
   * @return slotId
  **/
  @Schema(description = "")
  public String getSlotId() {
    return slotId;
  }

  public void setSlotId(String slotId) {
    this.slotId = slotId;
  }

  public DiskNestview ssdLifeLeft(Long ssdLifeLeft) {
    this.ssdLifeLeft = ssdLifeLeft;
    return this;
  }

   /**
   * Get ssdLifeLeft
   * @return ssdLifeLeft
  **/
  @Schema(description = "")
  public Long getSsdLifeLeft() {
    return ssdLifeLeft;
  }

  public void setSsdLifeLeft(Long ssdLifeLeft) {
    this.ssdLifeLeft = ssdLifeLeft;
  }

  public DiskNestview status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskNestview diskNestview = (DiskNestview) o;
    return Objects.equals(this.device, diskNestview.device) &&
        Objects.equals(this.diskType, diskNestview.diskType) &&
        Objects.equals(this.id, diskNestview.id) &&
        Objects.equals(this.slotId, diskNestview.slotId) &&
        Objects.equals(this.ssdLifeLeft, diskNestview.ssdLifeLeft) &&
        Objects.equals(this.status, diskNestview.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(device, diskType, id, slotId, ssdLifeLeft, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskNestview {\n");
    
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    diskType: ").append(toIndentedString(diskType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    slotId: ").append(toIndentedString(slotId)).append("\n");
    sb.append("    ssdLifeLeft: ").append(toIndentedString(ssdLifeLeft)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
