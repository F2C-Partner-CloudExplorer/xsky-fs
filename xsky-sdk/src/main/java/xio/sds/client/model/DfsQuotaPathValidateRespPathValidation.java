/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import xio.sds.client.model.DfsQuota;
import xio.sds.client.model.FSUser;
import xio.sds.client.model.FSUserGroup;
/**
 * DfsQuotaPathValidateRespPathValidation
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DfsQuotaPathValidateRespPathValidation {
  @SerializedName("exist_dir_quota")
  private DfsQuota existDirQuota = null;

  @SerializedName("is_dir_empty")
  private Boolean isDirEmpty = null;

  @SerializedName("is_dir_exist")
  private Boolean isDirExist = null;

  @SerializedName("is_exceed_max_quota")
  private Boolean isExceedMaxQuota = null;

  @SerializedName("is_quota_exist")
  private Boolean isQuotaExist = null;

  @SerializedName("used_files")
  private Long usedFiles = null;

  @SerializedName("used_kbyte")
  private Long usedKbyte = null;

  @SerializedName("user_groups")
  private List<FSUserGroup> userGroups = null;

  @SerializedName("users")
  private List<FSUser> users = null;

  public DfsQuotaPathValidateRespPathValidation existDirQuota(DfsQuota existDirQuota) {
    this.existDirQuota = existDirQuota;
    return this;
  }

   /**
   * Get existDirQuota
   * @return existDirQuota
  **/
  @Schema(description = "")
  public DfsQuota getExistDirQuota() {
    return existDirQuota;
  }

  public void setExistDirQuota(DfsQuota existDirQuota) {
    this.existDirQuota = existDirQuota;
  }

  public DfsQuotaPathValidateRespPathValidation isDirEmpty(Boolean isDirEmpty) {
    this.isDirEmpty = isDirEmpty;
    return this;
  }

   /**
   * Get isDirEmpty
   * @return isDirEmpty
  **/
  @Schema(description = "")
  public Boolean isIsDirEmpty() {
    return isDirEmpty;
  }

  public void setIsDirEmpty(Boolean isDirEmpty) {
    this.isDirEmpty = isDirEmpty;
  }

  public DfsQuotaPathValidateRespPathValidation isDirExist(Boolean isDirExist) {
    this.isDirExist = isDirExist;
    return this;
  }

   /**
   * Get isDirExist
   * @return isDirExist
  **/
  @Schema(description = "")
  public Boolean isIsDirExist() {
    return isDirExist;
  }

  public void setIsDirExist(Boolean isDirExist) {
    this.isDirExist = isDirExist;
  }

  public DfsQuotaPathValidateRespPathValidation isExceedMaxQuota(Boolean isExceedMaxQuota) {
    this.isExceedMaxQuota = isExceedMaxQuota;
    return this;
  }

   /**
   * Get isExceedMaxQuota
   * @return isExceedMaxQuota
  **/
  @Schema(description = "")
  public Boolean isIsExceedMaxQuota() {
    return isExceedMaxQuota;
  }

  public void setIsExceedMaxQuota(Boolean isExceedMaxQuota) {
    this.isExceedMaxQuota = isExceedMaxQuota;
  }

  public DfsQuotaPathValidateRespPathValidation isQuotaExist(Boolean isQuotaExist) {
    this.isQuotaExist = isQuotaExist;
    return this;
  }

   /**
   * Get isQuotaExist
   * @return isQuotaExist
  **/
  @Schema(description = "")
  public Boolean isIsQuotaExist() {
    return isQuotaExist;
  }

  public void setIsQuotaExist(Boolean isQuotaExist) {
    this.isQuotaExist = isQuotaExist;
  }

  public DfsQuotaPathValidateRespPathValidation usedFiles(Long usedFiles) {
    this.usedFiles = usedFiles;
    return this;
  }

   /**
   * Get usedFiles
   * @return usedFiles
  **/
  @Schema(description = "")
  public Long getUsedFiles() {
    return usedFiles;
  }

  public void setUsedFiles(Long usedFiles) {
    this.usedFiles = usedFiles;
  }

  public DfsQuotaPathValidateRespPathValidation usedKbyte(Long usedKbyte) {
    this.usedKbyte = usedKbyte;
    return this;
  }

   /**
   * Get usedKbyte
   * @return usedKbyte
  **/
  @Schema(description = "")
  public Long getUsedKbyte() {
    return usedKbyte;
  }

  public void setUsedKbyte(Long usedKbyte) {
    this.usedKbyte = usedKbyte;
  }

  public DfsQuotaPathValidateRespPathValidation userGroups(List<FSUserGroup> userGroups) {
    this.userGroups = userGroups;
    return this;
  }

  public DfsQuotaPathValidateRespPathValidation addUserGroupsItem(FSUserGroup userGroupsItem) {
    if (this.userGroups == null) {
      this.userGroups = new ArrayList<FSUserGroup>();
    }
    this.userGroups.add(userGroupsItem);
    return this;
  }

   /**
   * Get userGroups
   * @return userGroups
  **/
  @Schema(description = "")
  public List<FSUserGroup> getUserGroups() {
    return userGroups;
  }

  public void setUserGroups(List<FSUserGroup> userGroups) {
    this.userGroups = userGroups;
  }

  public DfsQuotaPathValidateRespPathValidation users(List<FSUser> users) {
    this.users = users;
    return this;
  }

  public DfsQuotaPathValidateRespPathValidation addUsersItem(FSUser usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<FSUser>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @Schema(description = "")
  public List<FSUser> getUsers() {
    return users;
  }

  public void setUsers(List<FSUser> users) {
    this.users = users;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfsQuotaPathValidateRespPathValidation dfsQuotaPathValidateRespPathValidation = (DfsQuotaPathValidateRespPathValidation) o;
    return Objects.equals(this.existDirQuota, dfsQuotaPathValidateRespPathValidation.existDirQuota) &&
        Objects.equals(this.isDirEmpty, dfsQuotaPathValidateRespPathValidation.isDirEmpty) &&
        Objects.equals(this.isDirExist, dfsQuotaPathValidateRespPathValidation.isDirExist) &&
        Objects.equals(this.isExceedMaxQuota, dfsQuotaPathValidateRespPathValidation.isExceedMaxQuota) &&
        Objects.equals(this.isQuotaExist, dfsQuotaPathValidateRespPathValidation.isQuotaExist) &&
        Objects.equals(this.usedFiles, dfsQuotaPathValidateRespPathValidation.usedFiles) &&
        Objects.equals(this.usedKbyte, dfsQuotaPathValidateRespPathValidation.usedKbyte) &&
        Objects.equals(this.userGroups, dfsQuotaPathValidateRespPathValidation.userGroups) &&
        Objects.equals(this.users, dfsQuotaPathValidateRespPathValidation.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(existDirQuota, isDirEmpty, isDirExist, isExceedMaxQuota, isQuotaExist, usedFiles, usedKbyte, userGroups, users);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfsQuotaPathValidateRespPathValidation {\n");
    
    sb.append("    existDirQuota: ").append(toIndentedString(existDirQuota)).append("\n");
    sb.append("    isDirEmpty: ").append(toIndentedString(isDirEmpty)).append("\n");
    sb.append("    isDirExist: ").append(toIndentedString(isDirExist)).append("\n");
    sb.append("    isExceedMaxQuota: ").append(toIndentedString(isExceedMaxQuota)).append("\n");
    sb.append("    isQuotaExist: ").append(toIndentedString(isQuotaExist)).append("\n");
    sb.append("    usedFiles: ").append(toIndentedString(usedFiles)).append("\n");
    sb.append("    usedKbyte: ").append(toIndentedString(usedKbyte)).append("\n");
    sb.append("    userGroups: ").append(toIndentedString(userGroups)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
