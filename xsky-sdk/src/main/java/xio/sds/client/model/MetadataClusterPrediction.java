/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.UsedDataKbytePrediction;
/**
 * MetadataClusterPrediction contains metadataCluster prediction data
 */
@Schema(description = "MetadataClusterPrediction contains metadataCluster prediction data")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class MetadataClusterPrediction {
  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("used_data_kbyte_points")
  private List<UsedDataKbytePrediction> usedDataKbytePoints = null;

  @SerializedName("used_kbyte_1day")
  private Long usedKbyte1day = null;

  @SerializedName("used_kbyte_30days")
  private Long usedKbyte30days = null;

  @SerializedName("used_kbyte_7days")
  private Long usedKbyte7days = null;

  public MetadataClusterPrediction create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public MetadataClusterPrediction id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public MetadataClusterPrediction usedDataKbytePoints(List<UsedDataKbytePrediction> usedDataKbytePoints) {
    this.usedDataKbytePoints = usedDataKbytePoints;
    return this;
  }

  public MetadataClusterPrediction addUsedDataKbytePointsItem(UsedDataKbytePrediction usedDataKbytePointsItem) {
    if (this.usedDataKbytePoints == null) {
      this.usedDataKbytePoints = new ArrayList<UsedDataKbytePrediction>();
    }
    this.usedDataKbytePoints.add(usedDataKbytePointsItem);
    return this;
  }

   /**
   * Get usedDataKbytePoints
   * @return usedDataKbytePoints
  **/
  @Schema(description = "")
  public List<UsedDataKbytePrediction> getUsedDataKbytePoints() {
    return usedDataKbytePoints;
  }

  public void setUsedDataKbytePoints(List<UsedDataKbytePrediction> usedDataKbytePoints) {
    this.usedDataKbytePoints = usedDataKbytePoints;
  }

  public MetadataClusterPrediction usedKbyte1day(Long usedKbyte1day) {
    this.usedKbyte1day = usedKbyte1day;
    return this;
  }

   /**
   * Get usedKbyte1day
   * @return usedKbyte1day
  **/
  @Schema(description = "")
  public Long getUsedKbyte1day() {
    return usedKbyte1day;
  }

  public void setUsedKbyte1day(Long usedKbyte1day) {
    this.usedKbyte1day = usedKbyte1day;
  }

  public MetadataClusterPrediction usedKbyte30days(Long usedKbyte30days) {
    this.usedKbyte30days = usedKbyte30days;
    return this;
  }

   /**
   * Get usedKbyte30days
   * @return usedKbyte30days
  **/
  @Schema(description = "")
  public Long getUsedKbyte30days() {
    return usedKbyte30days;
  }

  public void setUsedKbyte30days(Long usedKbyte30days) {
    this.usedKbyte30days = usedKbyte30days;
  }

  public MetadataClusterPrediction usedKbyte7days(Long usedKbyte7days) {
    this.usedKbyte7days = usedKbyte7days;
    return this;
  }

   /**
   * Get usedKbyte7days
   * @return usedKbyte7days
  **/
  @Schema(description = "")
  public Long getUsedKbyte7days() {
    return usedKbyte7days;
  }

  public void setUsedKbyte7days(Long usedKbyte7days) {
    this.usedKbyte7days = usedKbyte7days;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataClusterPrediction metadataClusterPrediction = (MetadataClusterPrediction) o;
    return Objects.equals(this.create, metadataClusterPrediction.create) &&
        Objects.equals(this.id, metadataClusterPrediction.id) &&
        Objects.equals(this.usedDataKbytePoints, metadataClusterPrediction.usedDataKbytePoints) &&
        Objects.equals(this.usedKbyte1day, metadataClusterPrediction.usedKbyte1day) &&
        Objects.equals(this.usedKbyte30days, metadataClusterPrediction.usedKbyte30days) &&
        Objects.equals(this.usedKbyte7days, metadataClusterPrediction.usedKbyte7days);
  }

  @Override
  public int hashCode() {
    return Objects.hash(create, id, usedDataKbytePoints, usedKbyte1day, usedKbyte30days, usedKbyte7days);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataClusterPrediction {\n");
    
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    usedDataKbytePoints: ").append(toIndentedString(usedDataKbytePoints)).append("\n");
    sb.append("    usedKbyte1day: ").append(toIndentedString(usedKbyte1day)).append("\n");
    sb.append("    usedKbyte30days: ").append(toIndentedString(usedKbyte30days)).append("\n");
    sb.append("    usedKbyte7days: ").append(toIndentedString(usedKbyte7days)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
