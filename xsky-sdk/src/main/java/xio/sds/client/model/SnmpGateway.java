/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.HostNestview;
/**
 * SnmpGateway defines the snmp gateway
 */
@Schema(description = "SnmpGateway defines the snmp gateway")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class SnmpGateway {
  @SerializedName("auth_password")
  private String authPassword = null;

  @SerializedName("auth_protocol")
  private String authProtocol = null;

  @SerializedName("context_engine_id")
  private String contextEngineId = null;

  @SerializedName("context_name")
  private String contextName = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("host")
  private HostNestview host = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("ip")
  private String ip = null;

  @SerializedName("port")
  private Long port = null;

  @SerializedName("priv_password")
  private String privPassword = null;

  @SerializedName("priv_protocol")
  private String privProtocol = null;

  @SerializedName("read_community")
  private String readCommunity = null;

  @SerializedName("security_engine_id")
  private String securityEngineId = null;

  @SerializedName("security_level")
  private String securityLevel = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  @SerializedName("user_name")
  private String userName = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("write_community")
  private String writeCommunity = null;

  public SnmpGateway authPassword(String authPassword) {
    this.authPassword = authPassword;
    return this;
  }

   /**
   * Get authPassword
   * @return authPassword
  **/
  @Schema(description = "")
  public String getAuthPassword() {
    return authPassword;
  }

  public void setAuthPassword(String authPassword) {
    this.authPassword = authPassword;
  }

  public SnmpGateway authProtocol(String authProtocol) {
    this.authProtocol = authProtocol;
    return this;
  }

   /**
   * Get authProtocol
   * @return authProtocol
  **/
  @Schema(description = "")
  public String getAuthProtocol() {
    return authProtocol;
  }

  public void setAuthProtocol(String authProtocol) {
    this.authProtocol = authProtocol;
  }

  public SnmpGateway contextEngineId(String contextEngineId) {
    this.contextEngineId = contextEngineId;
    return this;
  }

   /**
   * Get contextEngineId
   * @return contextEngineId
  **/
  @Schema(description = "")
  public String getContextEngineId() {
    return contextEngineId;
  }

  public void setContextEngineId(String contextEngineId) {
    this.contextEngineId = contextEngineId;
  }

  public SnmpGateway contextName(String contextName) {
    this.contextName = contextName;
    return this;
  }

   /**
   * Get contextName
   * @return contextName
  **/
  @Schema(description = "")
  public String getContextName() {
    return contextName;
  }

  public void setContextName(String contextName) {
    this.contextName = contextName;
  }

  public SnmpGateway create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public SnmpGateway host(HostNestview host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(description = "")
  public HostNestview getHost() {
    return host;
  }

  public void setHost(HostNestview host) {
    this.host = host;
  }

  public SnmpGateway id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public SnmpGateway ip(String ip) {
    this.ip = ip;
    return this;
  }

   /**
   * Get ip
   * @return ip
  **/
  @Schema(description = "")
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }

  public SnmpGateway port(Long port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @Schema(description = "")
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }

  public SnmpGateway privPassword(String privPassword) {
    this.privPassword = privPassword;
    return this;
  }

   /**
   * Get privPassword
   * @return privPassword
  **/
  @Schema(description = "")
  public String getPrivPassword() {
    return privPassword;
  }

  public void setPrivPassword(String privPassword) {
    this.privPassword = privPassword;
  }

  public SnmpGateway privProtocol(String privProtocol) {
    this.privProtocol = privProtocol;
    return this;
  }

   /**
   * Get privProtocol
   * @return privProtocol
  **/
  @Schema(description = "")
  public String getPrivProtocol() {
    return privProtocol;
  }

  public void setPrivProtocol(String privProtocol) {
    this.privProtocol = privProtocol;
  }

  public SnmpGateway readCommunity(String readCommunity) {
    this.readCommunity = readCommunity;
    return this;
  }

   /**
   * V2c specific
   * @return readCommunity
  **/
  @Schema(description = "V2c specific")
  public String getReadCommunity() {
    return readCommunity;
  }

  public void setReadCommunity(String readCommunity) {
    this.readCommunity = readCommunity;
  }

  public SnmpGateway securityEngineId(String securityEngineId) {
    this.securityEngineId = securityEngineId;
    return this;
  }

   /**
   * Get securityEngineId
   * @return securityEngineId
  **/
  @Schema(description = "")
  public String getSecurityEngineId() {
    return securityEngineId;
  }

  public void setSecurityEngineId(String securityEngineId) {
    this.securityEngineId = securityEngineId;
  }

  public SnmpGateway securityLevel(String securityLevel) {
    this.securityLevel = securityLevel;
    return this;
  }

   /**
   * Get securityLevel
   * @return securityLevel
  **/
  @Schema(description = "")
  public String getSecurityLevel() {
    return securityLevel;
  }

  public void setSecurityLevel(String securityLevel) {
    this.securityLevel = securityLevel;
  }

  public SnmpGateway status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public SnmpGateway update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }

  public SnmpGateway userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * V3 specific
   * @return userName
  **/
  @Schema(description = "V3 specific")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }

  public SnmpGateway version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public SnmpGateway writeCommunity(String writeCommunity) {
    this.writeCommunity = writeCommunity;
    return this;
  }

   /**
   * Get writeCommunity
   * @return writeCommunity
  **/
  @Schema(description = "")
  public String getWriteCommunity() {
    return writeCommunity;
  }

  public void setWriteCommunity(String writeCommunity) {
    this.writeCommunity = writeCommunity;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnmpGateway snmpGateway = (SnmpGateway) o;
    return Objects.equals(this.authPassword, snmpGateway.authPassword) &&
        Objects.equals(this.authProtocol, snmpGateway.authProtocol) &&
        Objects.equals(this.contextEngineId, snmpGateway.contextEngineId) &&
        Objects.equals(this.contextName, snmpGateway.contextName) &&
        Objects.equals(this.create, snmpGateway.create) &&
        Objects.equals(this.host, snmpGateway.host) &&
        Objects.equals(this.id, snmpGateway.id) &&
        Objects.equals(this.ip, snmpGateway.ip) &&
        Objects.equals(this.port, snmpGateway.port) &&
        Objects.equals(this.privPassword, snmpGateway.privPassword) &&
        Objects.equals(this.privProtocol, snmpGateway.privProtocol) &&
        Objects.equals(this.readCommunity, snmpGateway.readCommunity) &&
        Objects.equals(this.securityEngineId, snmpGateway.securityEngineId) &&
        Objects.equals(this.securityLevel, snmpGateway.securityLevel) &&
        Objects.equals(this.status, snmpGateway.status) &&
        Objects.equals(this.update, snmpGateway.update) &&
        Objects.equals(this.userName, snmpGateway.userName) &&
        Objects.equals(this.version, snmpGateway.version) &&
        Objects.equals(this.writeCommunity, snmpGateway.writeCommunity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authPassword, authProtocol, contextEngineId, contextName, create, host, id, ip, port, privPassword, privProtocol, readCommunity, securityEngineId, securityLevel, status, update, userName, version, writeCommunity);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnmpGateway {\n");
    
    sb.append("    authPassword: ").append(toIndentedString(authPassword)).append("\n");
    sb.append("    authProtocol: ").append(toIndentedString(authProtocol)).append("\n");
    sb.append("    contextEngineId: ").append(toIndentedString(contextEngineId)).append("\n");
    sb.append("    contextName: ").append(toIndentedString(contextName)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    privPassword: ").append(toIndentedString(privPassword)).append("\n");
    sb.append("    privProtocol: ").append(toIndentedString(privProtocol)).append("\n");
    sb.append("    readCommunity: ").append(toIndentedString(readCommunity)).append("\n");
    sb.append("    securityEngineId: ").append(toIndentedString(securityEngineId)).append("\n");
    sb.append("    securityLevel: ").append(toIndentedString(securityLevel)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    writeCommunity: ").append(toIndentedString(writeCommunity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
