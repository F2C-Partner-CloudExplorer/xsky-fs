/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * OsdOverview
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class OsdOverview {
  @SerializedName("active_num")
  private Long activeNum = null;

  @SerializedName("compound_num")
  private Long compoundNum = null;

  @SerializedName("critical_usage_num")
  private Long criticalUsageNum = null;

  @SerializedName("data_num")
  private Long dataNum = null;

  @SerializedName("doing_num")
  private Long doingNum = null;

  @SerializedName("error_num")
  private Long errorNum = null;

  @SerializedName("hdd_type_num")
  private Long hddTypeNum = null;

  @SerializedName("hybrid_type_num")
  private Long hybridTypeNum = null;

  @SerializedName("index_num")
  private Long indexNum = null;

  @SerializedName("offline_num")
  private Long offlineNum = null;

  @SerializedName("ssd_type_num")
  private Long ssdTypeNum = null;

  @SerializedName("tier_cache_num")
  private Long tierCacheNum = null;

  @SerializedName("tier_data_num")
  private Long tierDataNum = null;

  @SerializedName("warn_num")
  private Long warnNum = null;

  @SerializedName("warn_usage_num")
  private Long warnUsageNum = null;

  public OsdOverview activeNum(Long activeNum) {
    this.activeNum = activeNum;
    return this;
  }

   /**
   * status
   * @return activeNum
  **/
  @Schema(required = true, description = "status")
  public Long getActiveNum() {
    return activeNum;
  }

  public void setActiveNum(Long activeNum) {
    this.activeNum = activeNum;
  }

  public OsdOverview compoundNum(Long compoundNum) {
    this.compoundNum = compoundNum;
    return this;
  }

   /**
   * Get compoundNum
   * @return compoundNum
  **/
  @Schema(required = true, description = "")
  public Long getCompoundNum() {
    return compoundNum;
  }

  public void setCompoundNum(Long compoundNum) {
    this.compoundNum = compoundNum;
  }

  public OsdOverview criticalUsageNum(Long criticalUsageNum) {
    this.criticalUsageNum = criticalUsageNum;
    return this;
  }

   /**
   * Get criticalUsageNum
   * @return criticalUsageNum
  **/
  @Schema(required = true, description = "")
  public Long getCriticalUsageNum() {
    return criticalUsageNum;
  }

  public void setCriticalUsageNum(Long criticalUsageNum) {
    this.criticalUsageNum = criticalUsageNum;
  }

  public OsdOverview dataNum(Long dataNum) {
    this.dataNum = dataNum;
    return this;
  }

   /**
   * role
   * @return dataNum
  **/
  @Schema(required = true, description = "role")
  public Long getDataNum() {
    return dataNum;
  }

  public void setDataNum(Long dataNum) {
    this.dataNum = dataNum;
  }

  public OsdOverview doingNum(Long doingNum) {
    this.doingNum = doingNum;
    return this;
  }

   /**
   * Get doingNum
   * @return doingNum
  **/
  @Schema(required = true, description = "")
  public Long getDoingNum() {
    return doingNum;
  }

  public void setDoingNum(Long doingNum) {
    this.doingNum = doingNum;
  }

  public OsdOverview errorNum(Long errorNum) {
    this.errorNum = errorNum;
    return this;
  }

   /**
   * Get errorNum
   * @return errorNum
  **/
  @Schema(required = true, description = "")
  public Long getErrorNum() {
    return errorNum;
  }

  public void setErrorNum(Long errorNum) {
    this.errorNum = errorNum;
  }

  public OsdOverview hddTypeNum(Long hddTypeNum) {
    this.hddTypeNum = hddTypeNum;
    return this;
  }

   /**
   * disk type
   * @return hddTypeNum
  **/
  @Schema(required = true, description = "disk type")
  public Long getHddTypeNum() {
    return hddTypeNum;
  }

  public void setHddTypeNum(Long hddTypeNum) {
    this.hddTypeNum = hddTypeNum;
  }

  public OsdOverview hybridTypeNum(Long hybridTypeNum) {
    this.hybridTypeNum = hybridTypeNum;
    return this;
  }

   /**
   * Get hybridTypeNum
   * @return hybridTypeNum
  **/
  @Schema(required = true, description = "")
  public Long getHybridTypeNum() {
    return hybridTypeNum;
  }

  public void setHybridTypeNum(Long hybridTypeNum) {
    this.hybridTypeNum = hybridTypeNum;
  }

  public OsdOverview indexNum(Long indexNum) {
    this.indexNum = indexNum;
    return this;
  }

   /**
   * Get indexNum
   * @return indexNum
  **/
  @Schema(required = true, description = "")
  public Long getIndexNum() {
    return indexNum;
  }

  public void setIndexNum(Long indexNum) {
    this.indexNum = indexNum;
  }

  public OsdOverview offlineNum(Long offlineNum) {
    this.offlineNum = offlineNum;
    return this;
  }

   /**
   * Get offlineNum
   * @return offlineNum
  **/
  @Schema(required = true, description = "")
  public Long getOfflineNum() {
    return offlineNum;
  }

  public void setOfflineNum(Long offlineNum) {
    this.offlineNum = offlineNum;
  }

  public OsdOverview ssdTypeNum(Long ssdTypeNum) {
    this.ssdTypeNum = ssdTypeNum;
    return this;
  }

   /**
   * Get ssdTypeNum
   * @return ssdTypeNum
  **/
  @Schema(required = true, description = "")
  public Long getSsdTypeNum() {
    return ssdTypeNum;
  }

  public void setSsdTypeNum(Long ssdTypeNum) {
    this.ssdTypeNum = ssdTypeNum;
  }

  public OsdOverview tierCacheNum(Long tierCacheNum) {
    this.tierCacheNum = tierCacheNum;
    return this;
  }

   /**
   * Get tierCacheNum
   * @return tierCacheNum
  **/
  @Schema(required = true, description = "")
  public Long getTierCacheNum() {
    return tierCacheNum;
  }

  public void setTierCacheNum(Long tierCacheNum) {
    this.tierCacheNum = tierCacheNum;
  }

  public OsdOverview tierDataNum(Long tierDataNum) {
    this.tierDataNum = tierDataNum;
    return this;
  }

   /**
   * Get tierDataNum
   * @return tierDataNum
  **/
  @Schema(required = true, description = "")
  public Long getTierDataNum() {
    return tierDataNum;
  }

  public void setTierDataNum(Long tierDataNum) {
    this.tierDataNum = tierDataNum;
  }

  public OsdOverview warnNum(Long warnNum) {
    this.warnNum = warnNum;
    return this;
  }

   /**
   * Get warnNum
   * @return warnNum
  **/
  @Schema(required = true, description = "")
  public Long getWarnNum() {
    return warnNum;
  }

  public void setWarnNum(Long warnNum) {
    this.warnNum = warnNum;
  }

  public OsdOverview warnUsageNum(Long warnUsageNum) {
    this.warnUsageNum = warnUsageNum;
    return this;
  }

   /**
   * usage
   * @return warnUsageNum
  **/
  @Schema(required = true, description = "usage")
  public Long getWarnUsageNum() {
    return warnUsageNum;
  }

  public void setWarnUsageNum(Long warnUsageNum) {
    this.warnUsageNum = warnUsageNum;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OsdOverview osdOverview = (OsdOverview) o;
    return Objects.equals(this.activeNum, osdOverview.activeNum) &&
        Objects.equals(this.compoundNum, osdOverview.compoundNum) &&
        Objects.equals(this.criticalUsageNum, osdOverview.criticalUsageNum) &&
        Objects.equals(this.dataNum, osdOverview.dataNum) &&
        Objects.equals(this.doingNum, osdOverview.doingNum) &&
        Objects.equals(this.errorNum, osdOverview.errorNum) &&
        Objects.equals(this.hddTypeNum, osdOverview.hddTypeNum) &&
        Objects.equals(this.hybridTypeNum, osdOverview.hybridTypeNum) &&
        Objects.equals(this.indexNum, osdOverview.indexNum) &&
        Objects.equals(this.offlineNum, osdOverview.offlineNum) &&
        Objects.equals(this.ssdTypeNum, osdOverview.ssdTypeNum) &&
        Objects.equals(this.tierCacheNum, osdOverview.tierCacheNum) &&
        Objects.equals(this.tierDataNum, osdOverview.tierDataNum) &&
        Objects.equals(this.warnNum, osdOverview.warnNum) &&
        Objects.equals(this.warnUsageNum, osdOverview.warnUsageNum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeNum, compoundNum, criticalUsageNum, dataNum, doingNum, errorNum, hddTypeNum, hybridTypeNum, indexNum, offlineNum, ssdTypeNum, tierCacheNum, tierDataNum, warnNum, warnUsageNum);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OsdOverview {\n");
    
    sb.append("    activeNum: ").append(toIndentedString(activeNum)).append("\n");
    sb.append("    compoundNum: ").append(toIndentedString(compoundNum)).append("\n");
    sb.append("    criticalUsageNum: ").append(toIndentedString(criticalUsageNum)).append("\n");
    sb.append("    dataNum: ").append(toIndentedString(dataNum)).append("\n");
    sb.append("    doingNum: ").append(toIndentedString(doingNum)).append("\n");
    sb.append("    errorNum: ").append(toIndentedString(errorNum)).append("\n");
    sb.append("    hddTypeNum: ").append(toIndentedString(hddTypeNum)).append("\n");
    sb.append("    hybridTypeNum: ").append(toIndentedString(hybridTypeNum)).append("\n");
    sb.append("    indexNum: ").append(toIndentedString(indexNum)).append("\n");
    sb.append("    offlineNum: ").append(toIndentedString(offlineNum)).append("\n");
    sb.append("    ssdTypeNum: ").append(toIndentedString(ssdTypeNum)).append("\n");
    sb.append("    tierCacheNum: ").append(toIndentedString(tierCacheNum)).append("\n");
    sb.append("    tierDataNum: ").append(toIndentedString(tierDataNum)).append("\n");
    sb.append("    warnNum: ").append(toIndentedString(warnNum)).append("\n");
    sb.append("    warnUsageNum: ").append(toIndentedString(warnUsageNum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
