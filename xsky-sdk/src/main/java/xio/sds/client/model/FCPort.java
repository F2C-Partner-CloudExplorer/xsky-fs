/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.ClusterNestview;
import xio.sds.client.model.HostNestview;
/**
 * FCPort defines model of FC port @grpc-models-proto +X:model:etcd_lock;
 */
@Schema(description = "FCPort defines model of FC port @grpc-models-proto +X:model:etcd_lock;")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class FCPort {
  @SerializedName("action_status")
  private String actionStatus = null;

  @SerializedName("cluster")
  private ClusterNestview cluster = null;

  @SerializedName("conn_opt_mode")
  private String connOptMode = null;

  @SerializedName("conn_type")
  private String connType = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("data_rate_mode")
  private String dataRateMode = null;

  @SerializedName("health")
  private String health = null;

  @SerializedName("host")
  private HostNestview host = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("link_speed")
  private String linkSpeed = null;

  @SerializedName("link_state")
  private String linkState = null;

  @SerializedName("max_speed")
  private String maxSpeed = null;

  @SerializedName("pci_address")
  private String pciAddress = null;

  @SerializedName("port_id")
  private String portId = null;

  @SerializedName("recv_bytes")
  private Long recvBytes = null;

  @SerializedName("recv_frames")
  private Long recvFrames = null;

  @SerializedName("rg_host")
  private Long rgHost = null;

  @SerializedName("send_bytes")
  private Long sendBytes = null;

  @SerializedName("send_frames")
  private Long sendFrames = null;

  @SerializedName("start")
  private OffsetDateTime start = null;

  @SerializedName("supported_speeds")
  private List<String> supportedSpeeds = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  @SerializedName("wwpn")
  private String wwpn = null;

  public FCPort actionStatus(String actionStatus) {
    this.actionStatus = actionStatus;
    return this;
  }

   /**
   * Get actionStatus
   * @return actionStatus
  **/
  @Schema(description = "")
  public String getActionStatus() {
    return actionStatus;
  }

  public void setActionStatus(String actionStatus) {
    this.actionStatus = actionStatus;
  }

  public FCPort cluster(ClusterNestview cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public ClusterNestview getCluster() {
    return cluster;
  }

  public void setCluster(ClusterNestview cluster) {
    this.cluster = cluster;
  }

  public FCPort connOptMode(String connOptMode) {
    this.connOptMode = connOptMode;
    return this;
  }

   /**
   * Get connOptMode
   * @return connOptMode
  **/
  @Schema(description = "")
  public String getConnOptMode() {
    return connOptMode;
  }

  public void setConnOptMode(String connOptMode) {
    this.connOptMode = connOptMode;
  }

  public FCPort connType(String connType) {
    this.connType = connType;
    return this;
  }

   /**
   * Get connType
   * @return connType
  **/
  @Schema(description = "")
  public String getConnType() {
    return connType;
  }

  public void setConnType(String connType) {
    this.connType = connType;
  }

  public FCPort create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public FCPort dataRateMode(String dataRateMode) {
    this.dataRateMode = dataRateMode;
    return this;
  }

   /**
   * Get dataRateMode
   * @return dataRateMode
  **/
  @Schema(description = "")
  public String getDataRateMode() {
    return dataRateMode;
  }

  public void setDataRateMode(String dataRateMode) {
    this.dataRateMode = dataRateMode;
  }

  public FCPort health(String health) {
    this.health = health;
    return this;
  }

   /**
   * Get health
   * @return health
  **/
  @Schema(description = "")
  public String getHealth() {
    return health;
  }

  public void setHealth(String health) {
    this.health = health;
  }

  public FCPort host(HostNestview host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(description = "")
  public HostNestview getHost() {
    return host;
  }

  public void setHost(HostNestview host) {
    this.host = host;
  }

  public FCPort id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public FCPort linkSpeed(String linkSpeed) {
    this.linkSpeed = linkSpeed;
    return this;
  }

   /**
   * Get linkSpeed
   * @return linkSpeed
  **/
  @Schema(description = "")
  public String getLinkSpeed() {
    return linkSpeed;
  }

  public void setLinkSpeed(String linkSpeed) {
    this.linkSpeed = linkSpeed;
  }

  public FCPort linkState(String linkState) {
    this.linkState = linkState;
    return this;
  }

   /**
   * Get linkState
   * @return linkState
  **/
  @Schema(description = "")
  public String getLinkState() {
    return linkState;
  }

  public void setLinkState(String linkState) {
    this.linkState = linkState;
  }

  public FCPort maxSpeed(String maxSpeed) {
    this.maxSpeed = maxSpeed;
    return this;
  }

   /**
   * Get maxSpeed
   * @return maxSpeed
  **/
  @Schema(description = "")
  public String getMaxSpeed() {
    return maxSpeed;
  }

  public void setMaxSpeed(String maxSpeed) {
    this.maxSpeed = maxSpeed;
  }

  public FCPort pciAddress(String pciAddress) {
    this.pciAddress = pciAddress;
    return this;
  }

   /**
   * Get pciAddress
   * @return pciAddress
  **/
  @Schema(description = "")
  public String getPciAddress() {
    return pciAddress;
  }

  public void setPciAddress(String pciAddress) {
    this.pciAddress = pciAddress;
  }

  public FCPort portId(String portId) {
    this.portId = portId;
    return this;
  }

   /**
   * Get portId
   * @return portId
  **/
  @Schema(description = "")
  public String getPortId() {
    return portId;
  }

  public void setPortId(String portId) {
    this.portId = portId;
  }

  public FCPort recvBytes(Long recvBytes) {
    this.recvBytes = recvBytes;
    return this;
  }

   /**
   * Get recvBytes
   * @return recvBytes
  **/
  @Schema(description = "")
  public Long getRecvBytes() {
    return recvBytes;
  }

  public void setRecvBytes(Long recvBytes) {
    this.recvBytes = recvBytes;
  }

  public FCPort recvFrames(Long recvFrames) {
    this.recvFrames = recvFrames;
    return this;
  }

   /**
   * Get recvFrames
   * @return recvFrames
  **/
  @Schema(description = "")
  public Long getRecvFrames() {
    return recvFrames;
  }

  public void setRecvFrames(Long recvFrames) {
    this.recvFrames = recvFrames;
  }

  public FCPort rgHost(Long rgHost) {
    this.rgHost = rgHost;
    return this;
  }

   /**
   * Get rgHost
   * @return rgHost
  **/
  @Schema(description = "")
  public Long getRgHost() {
    return rgHost;
  }

  public void setRgHost(Long rgHost) {
    this.rgHost = rgHost;
  }

  public FCPort sendBytes(Long sendBytes) {
    this.sendBytes = sendBytes;
    return this;
  }

   /**
   * Get sendBytes
   * @return sendBytes
  **/
  @Schema(description = "")
  public Long getSendBytes() {
    return sendBytes;
  }

  public void setSendBytes(Long sendBytes) {
    this.sendBytes = sendBytes;
  }

  public FCPort sendFrames(Long sendFrames) {
    this.sendFrames = sendFrames;
    return this;
  }

   /**
   * Get sendFrames
   * @return sendFrames
  **/
  @Schema(description = "")
  public Long getSendFrames() {
    return sendFrames;
  }

  public void setSendFrames(Long sendFrames) {
    this.sendFrames = sendFrames;
  }

  public FCPort start(OffsetDateTime start) {
    this.start = start;
    return this;
  }

   /**
   * Get start
   * @return start
  **/
  @Schema(description = "")
  public OffsetDateTime getStart() {
    return start;
  }

  public void setStart(OffsetDateTime start) {
    this.start = start;
  }

  public FCPort supportedSpeeds(List<String> supportedSpeeds) {
    this.supportedSpeeds = supportedSpeeds;
    return this;
  }

  public FCPort addSupportedSpeedsItem(String supportedSpeedsItem) {
    if (this.supportedSpeeds == null) {
      this.supportedSpeeds = new ArrayList<String>();
    }
    this.supportedSpeeds.add(supportedSpeedsItem);
    return this;
  }

   /**
   * Get supportedSpeeds
   * @return supportedSpeeds
  **/
  @Schema(description = "")
  public List<String> getSupportedSpeeds() {
    return supportedSpeeds;
  }

  public void setSupportedSpeeds(List<String> supportedSpeeds) {
    this.supportedSpeeds = supportedSpeeds;
  }

  public FCPort update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }

  public FCPort wwpn(String wwpn) {
    this.wwpn = wwpn;
    return this;
  }

   /**
   * Get wwpn
   * @return wwpn
  **/
  @Schema(description = "")
  public String getWwpn() {
    return wwpn;
  }

  public void setWwpn(String wwpn) {
    this.wwpn = wwpn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FCPort fcPort = (FCPort) o;
    return Objects.equals(this.actionStatus, fcPort.actionStatus) &&
        Objects.equals(this.cluster, fcPort.cluster) &&
        Objects.equals(this.connOptMode, fcPort.connOptMode) &&
        Objects.equals(this.connType, fcPort.connType) &&
        Objects.equals(this.create, fcPort.create) &&
        Objects.equals(this.dataRateMode, fcPort.dataRateMode) &&
        Objects.equals(this.health, fcPort.health) &&
        Objects.equals(this.host, fcPort.host) &&
        Objects.equals(this.id, fcPort.id) &&
        Objects.equals(this.linkSpeed, fcPort.linkSpeed) &&
        Objects.equals(this.linkState, fcPort.linkState) &&
        Objects.equals(this.maxSpeed, fcPort.maxSpeed) &&
        Objects.equals(this.pciAddress, fcPort.pciAddress) &&
        Objects.equals(this.portId, fcPort.portId) &&
        Objects.equals(this.recvBytes, fcPort.recvBytes) &&
        Objects.equals(this.recvFrames, fcPort.recvFrames) &&
        Objects.equals(this.rgHost, fcPort.rgHost) &&
        Objects.equals(this.sendBytes, fcPort.sendBytes) &&
        Objects.equals(this.sendFrames, fcPort.sendFrames) &&
        Objects.equals(this.start, fcPort.start) &&
        Objects.equals(this.supportedSpeeds, fcPort.supportedSpeeds) &&
        Objects.equals(this.update, fcPort.update) &&
        Objects.equals(this.wwpn, fcPort.wwpn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionStatus, cluster, connOptMode, connType, create, dataRateMode, health, host, id, linkSpeed, linkState, maxSpeed, pciAddress, portId, recvBytes, recvFrames, rgHost, sendBytes, sendFrames, start, supportedSpeeds, update, wwpn);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FCPort {\n");
    
    sb.append("    actionStatus: ").append(toIndentedString(actionStatus)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    connOptMode: ").append(toIndentedString(connOptMode)).append("\n");
    sb.append("    connType: ").append(toIndentedString(connType)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    dataRateMode: ").append(toIndentedString(dataRateMode)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    linkSpeed: ").append(toIndentedString(linkSpeed)).append("\n");
    sb.append("    linkState: ").append(toIndentedString(linkState)).append("\n");
    sb.append("    maxSpeed: ").append(toIndentedString(maxSpeed)).append("\n");
    sb.append("    pciAddress: ").append(toIndentedString(pciAddress)).append("\n");
    sb.append("    portId: ").append(toIndentedString(portId)).append("\n");
    sb.append("    recvBytes: ").append(toIndentedString(recvBytes)).append("\n");
    sb.append("    recvFrames: ").append(toIndentedString(recvFrames)).append("\n");
    sb.append("    rgHost: ").append(toIndentedString(rgHost)).append("\n");
    sb.append("    sendBytes: ").append(toIndentedString(sendBytes)).append("\n");
    sb.append("    sendFrames: ").append(toIndentedString(sendFrames)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    supportedSpeeds: ").append(toIndentedString(supportedSpeeds)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    wwpn: ").append(toIndentedString(wwpn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
