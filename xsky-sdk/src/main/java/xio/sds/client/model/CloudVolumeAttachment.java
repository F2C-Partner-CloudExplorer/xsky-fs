/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.CloudInstanceNestview;
import xio.sds.client.model.CloudVolumeNestview;
import xio.sds.client.model.VolumeNestview;
/**
 * CloudVolumeAttachment defines volume attachment relationship with cloud instances
 */
@Schema(description = "CloudVolumeAttachment defines volume attachment relationship with cloud instances")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class CloudVolumeAttachment {
  @SerializedName("block_volume")
  private VolumeNestview blockVolume = null;

  @SerializedName("cloud_instance")
  private CloudInstanceNestview cloudInstance = null;

  @SerializedName("cloud_volume")
  private CloudVolumeNestview cloudVolume = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("device")
  private String device = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  public CloudVolumeAttachment blockVolume(VolumeNestview blockVolume) {
    this.blockVolume = blockVolume;
    return this;
  }

   /**
   * Get blockVolume
   * @return blockVolume
  **/
  @Schema(description = "")
  public VolumeNestview getBlockVolume() {
    return blockVolume;
  }

  public void setBlockVolume(VolumeNestview blockVolume) {
    this.blockVolume = blockVolume;
  }

  public CloudVolumeAttachment cloudInstance(CloudInstanceNestview cloudInstance) {
    this.cloudInstance = cloudInstance;
    return this;
  }

   /**
   * Get cloudInstance
   * @return cloudInstance
  **/
  @Schema(description = "")
  public CloudInstanceNestview getCloudInstance() {
    return cloudInstance;
  }

  public void setCloudInstance(CloudInstanceNestview cloudInstance) {
    this.cloudInstance = cloudInstance;
  }

  public CloudVolumeAttachment cloudVolume(CloudVolumeNestview cloudVolume) {
    this.cloudVolume = cloudVolume;
    return this;
  }

   /**
   * Get cloudVolume
   * @return cloudVolume
  **/
  @Schema(description = "")
  public CloudVolumeNestview getCloudVolume() {
    return cloudVolume;
  }

  public void setCloudVolume(CloudVolumeNestview cloudVolume) {
    this.cloudVolume = cloudVolume;
  }

  public CloudVolumeAttachment create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public CloudVolumeAttachment device(String device) {
    this.device = device;
    return this;
  }

   /**
   * Get device
   * @return device
  **/
  @Schema(description = "")
  public String getDevice() {
    return device;
  }

  public void setDevice(String device) {
    this.device = device;
  }

  public CloudVolumeAttachment id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public CloudVolumeAttachment update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudVolumeAttachment cloudVolumeAttachment = (CloudVolumeAttachment) o;
    return Objects.equals(this.blockVolume, cloudVolumeAttachment.blockVolume) &&
        Objects.equals(this.cloudInstance, cloudVolumeAttachment.cloudInstance) &&
        Objects.equals(this.cloudVolume, cloudVolumeAttachment.cloudVolume) &&
        Objects.equals(this.create, cloudVolumeAttachment.create) &&
        Objects.equals(this.device, cloudVolumeAttachment.device) &&
        Objects.equals(this.id, cloudVolumeAttachment.id) &&
        Objects.equals(this.update, cloudVolumeAttachment.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockVolume, cloudInstance, cloudVolume, create, device, id, update);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudVolumeAttachment {\n");
    
    sb.append("    blockVolume: ").append(toIndentedString(blockVolume)).append("\n");
    sb.append("    cloudInstance: ").append(toIndentedString(cloudInstance)).append("\n");
    sb.append("    cloudVolume: ").append(toIndentedString(cloudVolume)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
