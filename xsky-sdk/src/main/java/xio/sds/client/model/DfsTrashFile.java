/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.NestedRootfs;
import xio.sds.client.model.NestedTrash;
/**
 * DfsTrashFile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DfsTrashFile {
  @SerializedName("access")
  private OffsetDateTime access = null;

  @SerializedName("base_file_id")
  private String baseFileId = null;

  @SerializedName("base_name")
  private String baseName = null;

  @SerializedName("change")
  private OffsetDateTime change = null;

  @SerializedName("dfs_rootfs")
  private NestedRootfs dfsRootfs = null;

  @SerializedName("dfs_trash")
  private NestedTrash dfsTrash = null;

  @SerializedName("files")
  private Long files = null;

  @SerializedName("group")
  private Long group = null;

  @SerializedName("inode")
  private Long inode = null;

  @SerializedName("modify")
  private OffsetDateTime modify = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("original_name")
  private String originalName = null;

  @SerializedName("owner")
  private Long owner = null;

  @SerializedName("parent")
  private String parent = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("trash_path")
  private String trashPath = null;

  @SerializedName("type")
  private String type = null;

  public DfsTrashFile access(OffsetDateTime access) {
    this.access = access;
    return this;
  }

   /**
   * access time
   * @return access
  **/
  @Schema(description = "access time")
  public OffsetDateTime getAccess() {
    return access;
  }

  public void setAccess(OffsetDateTime access) {
    this.access = access;
  }

  public DfsTrashFile baseFileId(String baseFileId) {
    this.baseFileId = baseFileId;
    return this;
  }

   /**
   * base file id in trash
   * @return baseFileId
  **/
  @Schema(description = "base file id in trash")
  public String getBaseFileId() {
    return baseFileId;
  }

  public void setBaseFileId(String baseFileId) {
    this.baseFileId = baseFileId;
  }

  public DfsTrashFile baseName(String baseName) {
    this.baseName = baseName;
    return this;
  }

   /**
   * file base name in trash
   * @return baseName
  **/
  @Schema(description = "file base name in trash")
  public String getBaseName() {
    return baseName;
  }

  public void setBaseName(String baseName) {
    this.baseName = baseName;
  }

  public DfsTrashFile change(OffsetDateTime change) {
    this.change = change;
    return this;
  }

   /**
   * change time
   * @return change
  **/
  @Schema(description = "change time")
  public OffsetDateTime getChange() {
    return change;
  }

  public void setChange(OffsetDateTime change) {
    this.change = change;
  }

  public DfsTrashFile dfsRootfs(NestedRootfs dfsRootfs) {
    this.dfsRootfs = dfsRootfs;
    return this;
  }

   /**
   * Get dfsRootfs
   * @return dfsRootfs
  **/
  @Schema(description = "")
  public NestedRootfs getDfsRootfs() {
    return dfsRootfs;
  }

  public void setDfsRootfs(NestedRootfs dfsRootfs) {
    this.dfsRootfs = dfsRootfs;
  }

  public DfsTrashFile dfsTrash(NestedTrash dfsTrash) {
    this.dfsTrash = dfsTrash;
    return this;
  }

   /**
   * Get dfsTrash
   * @return dfsTrash
  **/
  @Schema(description = "")
  public NestedTrash getDfsTrash() {
    return dfsTrash;
  }

  public void setDfsTrash(NestedTrash dfsTrash) {
    this.dfsTrash = dfsTrash;
  }

  public DfsTrashFile files(Long files) {
    this.files = files;
    return this;
  }

   /**
   * sub file count when it is a directory
   * @return files
  **/
  @Schema(description = "sub file count when it is a directory")
  public Long getFiles() {
    return files;
  }

  public void setFiles(Long files) {
    this.files = files;
  }

  public DfsTrashFile group(Long group) {
    this.group = group;
    return this;
  }

   /**
   * file owner user group
   * @return group
  **/
  @Schema(description = "file owner user group")
  public Long getGroup() {
    return group;
  }

  public void setGroup(Long group) {
    this.group = group;
  }

  public DfsTrashFile inode(Long inode) {
    this.inode = inode;
    return this;
  }

   /**
   * file inode
   * @return inode
  **/
  @Schema(description = "file inode")
  public Long getInode() {
    return inode;
  }

  public void setInode(Long inode) {
    this.inode = inode;
  }

  public DfsTrashFile modify(OffsetDateTime modify) {
    this.modify = modify;
    return this;
  }

   /**
   * modify time
   * @return modify
  **/
  @Schema(description = "modify time")
  public OffsetDateTime getModify() {
    return modify;
  }

  public void setModify(OffsetDateTime modify) {
    this.modify = modify;
  }

  public DfsTrashFile name(String name) {
    this.name = name;
    return this;
  }

   /**
   * file name
   * @return name
  **/
  @Schema(description = "file name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DfsTrashFile originalName(String originalName) {
    this.originalName = originalName;
    return this;
  }

   /**
   * original name before file moved to trash
   * @return originalName
  **/
  @Schema(description = "original name before file moved to trash")
  public String getOriginalName() {
    return originalName;
  }

  public void setOriginalName(String originalName) {
    this.originalName = originalName;
  }

  public DfsTrashFile owner(Long owner) {
    this.owner = owner;
    return this;
  }

   /**
   * file owner user
   * @return owner
  **/
  @Schema(description = "file owner user")
  public Long getOwner() {
    return owner;
  }

  public void setOwner(Long owner) {
    this.owner = owner;
  }

  public DfsTrashFile parent(String parent) {
    this.parent = parent;
    return this;
  }

   /**
   * parent path
   * @return parent
  **/
  @Schema(description = "parent path")
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }

  public DfsTrashFile size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * file size
   * @return size
  **/
  @Schema(description = "file size")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public DfsTrashFile trashPath(String trashPath) {
    this.trashPath = trashPath;
    return this;
  }

   /**
   * trash path
   * @return trashPath
  **/
  @Schema(description = "trash path")
  public String getTrashPath() {
    return trashPath;
  }

  public void setTrashPath(String trashPath) {
    this.trashPath = trashPath;
  }

  public DfsTrashFile type(String type) {
    this.type = type;
    return this;
  }

   /**
   * file type
   * @return type
  **/
  @Schema(description = "file type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfsTrashFile dfsTrashFile = (DfsTrashFile) o;
    return Objects.equals(this.access, dfsTrashFile.access) &&
        Objects.equals(this.baseFileId, dfsTrashFile.baseFileId) &&
        Objects.equals(this.baseName, dfsTrashFile.baseName) &&
        Objects.equals(this.change, dfsTrashFile.change) &&
        Objects.equals(this.dfsRootfs, dfsTrashFile.dfsRootfs) &&
        Objects.equals(this.dfsTrash, dfsTrashFile.dfsTrash) &&
        Objects.equals(this.files, dfsTrashFile.files) &&
        Objects.equals(this.group, dfsTrashFile.group) &&
        Objects.equals(this.inode, dfsTrashFile.inode) &&
        Objects.equals(this.modify, dfsTrashFile.modify) &&
        Objects.equals(this.name, dfsTrashFile.name) &&
        Objects.equals(this.originalName, dfsTrashFile.originalName) &&
        Objects.equals(this.owner, dfsTrashFile.owner) &&
        Objects.equals(this.parent, dfsTrashFile.parent) &&
        Objects.equals(this.size, dfsTrashFile.size) &&
        Objects.equals(this.trashPath, dfsTrashFile.trashPath) &&
        Objects.equals(this.type, dfsTrashFile.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, baseFileId, baseName, change, dfsRootfs, dfsTrash, files, group, inode, modify, name, originalName, owner, parent, size, trashPath, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfsTrashFile {\n");
    
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    baseFileId: ").append(toIndentedString(baseFileId)).append("\n");
    sb.append("    baseName: ").append(toIndentedString(baseName)).append("\n");
    sb.append("    change: ").append(toIndentedString(change)).append("\n");
    sb.append("    dfsRootfs: ").append(toIndentedString(dfsRootfs)).append("\n");
    sb.append("    dfsTrash: ").append(toIndentedString(dfsTrash)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    inode: ").append(toIndentedString(inode)).append("\n");
    sb.append("    modify: ").append(toIndentedString(modify)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originalName: ").append(toIndentedString(originalName)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    trashPath: ").append(toIndentedString(trashPath)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
