/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * DiskStat defines the basic info of a DiskStat
 */
@Schema(description = "DiskStat defines the basic info of a DiskStat")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DiskStat {
  @SerializedName("avg_queue_len")
  private Double avgQueueLen = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("io_util")
  private Double ioUtil = null;

  @SerializedName("kbyte_per_io")
  private Double kbytePerIo = null;

  @SerializedName("read_bandwidth_kbyte")
  private Double readBandwidthKbyte = null;

  @SerializedName("read_iops")
  private Double readIops = null;

  @SerializedName("read_merged_ps")
  private Double readMergedPs = null;

  @SerializedName("read_wait_us")
  private Double readWaitUs = null;

  @SerializedName("total_bandwidth_kbyte")
  private Double totalBandwidthKbyte = null;

  @SerializedName("total_io_wait_us")
  private Double totalIoWaitUs = null;

  @SerializedName("total_iops")
  private Double totalIops = null;

  @SerializedName("total_kbyte")
  private Long totalKbyte = null;

  @SerializedName("used_kbyte")
  private Long usedKbyte = null;

  @SerializedName("used_percent")
  private Double usedPercent = null;

  @SerializedName("write_bandwidth_kbyte")
  private Double writeBandwidthKbyte = null;

  @SerializedName("write_iops")
  private Double writeIops = null;

  @SerializedName("write_merged_ps")
  private Double writeMergedPs = null;

  @SerializedName("write_wait_us")
  private Double writeWaitUs = null;

  public DiskStat avgQueueLen(Double avgQueueLen) {
    this.avgQueueLen = avgQueueLen;
    return this;
  }

   /**
   * Get avgQueueLen
   * @return avgQueueLen
  **/
  @Schema(description = "")
  public Double getAvgQueueLen() {
    return avgQueueLen;
  }

  public void setAvgQueueLen(Double avgQueueLen) {
    this.avgQueueLen = avgQueueLen;
  }

  public DiskStat create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public DiskStat ioUtil(Double ioUtil) {
    this.ioUtil = ioUtil;
    return this;
  }

   /**
   * Get ioUtil
   * @return ioUtil
  **/
  @Schema(description = "")
  public Double getIoUtil() {
    return ioUtil;
  }

  public void setIoUtil(Double ioUtil) {
    this.ioUtil = ioUtil;
  }

  public DiskStat kbytePerIo(Double kbytePerIo) {
    this.kbytePerIo = kbytePerIo;
    return this;
  }

   /**
   * Get kbytePerIo
   * @return kbytePerIo
  **/
  @Schema(description = "")
  public Double getKbytePerIo() {
    return kbytePerIo;
  }

  public void setKbytePerIo(Double kbytePerIo) {
    this.kbytePerIo = kbytePerIo;
  }

  public DiskStat readBandwidthKbyte(Double readBandwidthKbyte) {
    this.readBandwidthKbyte = readBandwidthKbyte;
    return this;
  }

   /**
   * Get readBandwidthKbyte
   * @return readBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getReadBandwidthKbyte() {
    return readBandwidthKbyte;
  }

  public void setReadBandwidthKbyte(Double readBandwidthKbyte) {
    this.readBandwidthKbyte = readBandwidthKbyte;
  }

  public DiskStat readIops(Double readIops) {
    this.readIops = readIops;
    return this;
  }

   /**
   * Get readIops
   * @return readIops
  **/
  @Schema(description = "")
  public Double getReadIops() {
    return readIops;
  }

  public void setReadIops(Double readIops) {
    this.readIops = readIops;
  }

  public DiskStat readMergedPs(Double readMergedPs) {
    this.readMergedPs = readMergedPs;
    return this;
  }

   /**
   * Get readMergedPs
   * @return readMergedPs
  **/
  @Schema(description = "")
  public Double getReadMergedPs() {
    return readMergedPs;
  }

  public void setReadMergedPs(Double readMergedPs) {
    this.readMergedPs = readMergedPs;
  }

  public DiskStat readWaitUs(Double readWaitUs) {
    this.readWaitUs = readWaitUs;
    return this;
  }

   /**
   * Get readWaitUs
   * @return readWaitUs
  **/
  @Schema(description = "")
  public Double getReadWaitUs() {
    return readWaitUs;
  }

  public void setReadWaitUs(Double readWaitUs) {
    this.readWaitUs = readWaitUs;
  }

  public DiskStat totalBandwidthKbyte(Double totalBandwidthKbyte) {
    this.totalBandwidthKbyte = totalBandwidthKbyte;
    return this;
  }

   /**
   * Get totalBandwidthKbyte
   * @return totalBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getTotalBandwidthKbyte() {
    return totalBandwidthKbyte;
  }

  public void setTotalBandwidthKbyte(Double totalBandwidthKbyte) {
    this.totalBandwidthKbyte = totalBandwidthKbyte;
  }

  public DiskStat totalIoWaitUs(Double totalIoWaitUs) {
    this.totalIoWaitUs = totalIoWaitUs;
    return this;
  }

   /**
   * Get totalIoWaitUs
   * @return totalIoWaitUs
  **/
  @Schema(description = "")
  public Double getTotalIoWaitUs() {
    return totalIoWaitUs;
  }

  public void setTotalIoWaitUs(Double totalIoWaitUs) {
    this.totalIoWaitUs = totalIoWaitUs;
  }

  public DiskStat totalIops(Double totalIops) {
    this.totalIops = totalIops;
    return this;
  }

   /**
   * Get totalIops
   * @return totalIops
  **/
  @Schema(description = "")
  public Double getTotalIops() {
    return totalIops;
  }

  public void setTotalIops(Double totalIops) {
    this.totalIops = totalIops;
  }

  public DiskStat totalKbyte(Long totalKbyte) {
    this.totalKbyte = totalKbyte;
    return this;
  }

   /**
   * Get totalKbyte
   * @return totalKbyte
  **/
  @Schema(description = "")
  public Long getTotalKbyte() {
    return totalKbyte;
  }

  public void setTotalKbyte(Long totalKbyte) {
    this.totalKbyte = totalKbyte;
  }

  public DiskStat usedKbyte(Long usedKbyte) {
    this.usedKbyte = usedKbyte;
    return this;
  }

   /**
   * Get usedKbyte
   * @return usedKbyte
  **/
  @Schema(description = "")
  public Long getUsedKbyte() {
    return usedKbyte;
  }

  public void setUsedKbyte(Long usedKbyte) {
    this.usedKbyte = usedKbyte;
  }

  public DiskStat usedPercent(Double usedPercent) {
    this.usedPercent = usedPercent;
    return this;
  }

   /**
   * Get usedPercent
   * @return usedPercent
  **/
  @Schema(description = "")
  public Double getUsedPercent() {
    return usedPercent;
  }

  public void setUsedPercent(Double usedPercent) {
    this.usedPercent = usedPercent;
  }

  public DiskStat writeBandwidthKbyte(Double writeBandwidthKbyte) {
    this.writeBandwidthKbyte = writeBandwidthKbyte;
    return this;
  }

   /**
   * Get writeBandwidthKbyte
   * @return writeBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getWriteBandwidthKbyte() {
    return writeBandwidthKbyte;
  }

  public void setWriteBandwidthKbyte(Double writeBandwidthKbyte) {
    this.writeBandwidthKbyte = writeBandwidthKbyte;
  }

  public DiskStat writeIops(Double writeIops) {
    this.writeIops = writeIops;
    return this;
  }

   /**
   * Get writeIops
   * @return writeIops
  **/
  @Schema(description = "")
  public Double getWriteIops() {
    return writeIops;
  }

  public void setWriteIops(Double writeIops) {
    this.writeIops = writeIops;
  }

  public DiskStat writeMergedPs(Double writeMergedPs) {
    this.writeMergedPs = writeMergedPs;
    return this;
  }

   /**
   * Get writeMergedPs
   * @return writeMergedPs
  **/
  @Schema(description = "")
  public Double getWriteMergedPs() {
    return writeMergedPs;
  }

  public void setWriteMergedPs(Double writeMergedPs) {
    this.writeMergedPs = writeMergedPs;
  }

  public DiskStat writeWaitUs(Double writeWaitUs) {
    this.writeWaitUs = writeWaitUs;
    return this;
  }

   /**
   * Get writeWaitUs
   * @return writeWaitUs
  **/
  @Schema(description = "")
  public Double getWriteWaitUs() {
    return writeWaitUs;
  }

  public void setWriteWaitUs(Double writeWaitUs) {
    this.writeWaitUs = writeWaitUs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskStat diskStat = (DiskStat) o;
    return Objects.equals(this.avgQueueLen, diskStat.avgQueueLen) &&
        Objects.equals(this.create, diskStat.create) &&
        Objects.equals(this.ioUtil, diskStat.ioUtil) &&
        Objects.equals(this.kbytePerIo, diskStat.kbytePerIo) &&
        Objects.equals(this.readBandwidthKbyte, diskStat.readBandwidthKbyte) &&
        Objects.equals(this.readIops, diskStat.readIops) &&
        Objects.equals(this.readMergedPs, diskStat.readMergedPs) &&
        Objects.equals(this.readWaitUs, diskStat.readWaitUs) &&
        Objects.equals(this.totalBandwidthKbyte, diskStat.totalBandwidthKbyte) &&
        Objects.equals(this.totalIoWaitUs, diskStat.totalIoWaitUs) &&
        Objects.equals(this.totalIops, diskStat.totalIops) &&
        Objects.equals(this.totalKbyte, diskStat.totalKbyte) &&
        Objects.equals(this.usedKbyte, diskStat.usedKbyte) &&
        Objects.equals(this.usedPercent, diskStat.usedPercent) &&
        Objects.equals(this.writeBandwidthKbyte, diskStat.writeBandwidthKbyte) &&
        Objects.equals(this.writeIops, diskStat.writeIops) &&
        Objects.equals(this.writeMergedPs, diskStat.writeMergedPs) &&
        Objects.equals(this.writeWaitUs, diskStat.writeWaitUs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgQueueLen, create, ioUtil, kbytePerIo, readBandwidthKbyte, readIops, readMergedPs, readWaitUs, totalBandwidthKbyte, totalIoWaitUs, totalIops, totalKbyte, usedKbyte, usedPercent, writeBandwidthKbyte, writeIops, writeMergedPs, writeWaitUs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskStat {\n");
    
    sb.append("    avgQueueLen: ").append(toIndentedString(avgQueueLen)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    ioUtil: ").append(toIndentedString(ioUtil)).append("\n");
    sb.append("    kbytePerIo: ").append(toIndentedString(kbytePerIo)).append("\n");
    sb.append("    readBandwidthKbyte: ").append(toIndentedString(readBandwidthKbyte)).append("\n");
    sb.append("    readIops: ").append(toIndentedString(readIops)).append("\n");
    sb.append("    readMergedPs: ").append(toIndentedString(readMergedPs)).append("\n");
    sb.append("    readWaitUs: ").append(toIndentedString(readWaitUs)).append("\n");
    sb.append("    totalBandwidthKbyte: ").append(toIndentedString(totalBandwidthKbyte)).append("\n");
    sb.append("    totalIoWaitUs: ").append(toIndentedString(totalIoWaitUs)).append("\n");
    sb.append("    totalIops: ").append(toIndentedString(totalIops)).append("\n");
    sb.append("    totalKbyte: ").append(toIndentedString(totalKbyte)).append("\n");
    sb.append("    usedKbyte: ").append(toIndentedString(usedKbyte)).append("\n");
    sb.append("    usedPercent: ").append(toIndentedString(usedPercent)).append("\n");
    sb.append("    writeBandwidthKbyte: ").append(toIndentedString(writeBandwidthKbyte)).append("\n");
    sb.append("    writeIops: ").append(toIndentedString(writeIops)).append("\n");
    sb.append("    writeMergedPs: ").append(toIndentedString(writeMergedPs)).append("\n");
    sb.append("    writeWaitUs: ").append(toIndentedString(writeWaitUs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
