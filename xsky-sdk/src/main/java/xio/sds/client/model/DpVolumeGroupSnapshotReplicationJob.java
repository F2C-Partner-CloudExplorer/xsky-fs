/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.ClusterNestview;
import xio.sds.client.model.DpVolumeGroupSnapshotReplicationPairNestview;
import xio.sds.client.model.VolumeGroupSnapshotNestview;
/**
 * DpVolumeGroupSnapshotReplicationJob is one execution of a dp volume group snapshot protection +X:model:generate;related_depth&#x3D;2;check_get;with_detailed; +X:benchmark:
 */
@Schema(description = "DpVolumeGroupSnapshotReplicationJob is one execution of a dp volume group snapshot protection +X:model:generate;related_depth=2;check_get;with_detailed; +X:benchmark:")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DpVolumeGroupSnapshotReplicationJob {
  @SerializedName("cluster")
  private ClusterNestview cluster = null;

  @SerializedName("diff_type")
  private String diffType = null;

  @SerializedName("dp_volume_group_snapshot_replication_pair")
  private DpVolumeGroupSnapshotReplicationPairNestview dpVolumeGroupSnapshotReplicationPair = null;

  @SerializedName("finished_at")
  private OffsetDateTime finishedAt = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("max_retry_times")
  private Long maxRetryTimes = null;

  @SerializedName("progress")
  private Double progress = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("snapshot")
  private VolumeGroupSnapshotNestview snapshot = null;

  @SerializedName("started_at")
  private OffsetDateTime startedAt = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("volume_group_name")
  private String volumeGroupName = null;

  public DpVolumeGroupSnapshotReplicationJob cluster(ClusterNestview cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public ClusterNestview getCluster() {
    return cluster;
  }

  public void setCluster(ClusterNestview cluster) {
    this.cluster = cluster;
  }

  public DpVolumeGroupSnapshotReplicationJob diffType(String diffType) {
    this.diffType = diffType;
    return this;
  }

   /**
   * Get diffType
   * @return diffType
  **/
  @Schema(description = "")
  public String getDiffType() {
    return diffType;
  }

  public void setDiffType(String diffType) {
    this.diffType = diffType;
  }

  public DpVolumeGroupSnapshotReplicationJob dpVolumeGroupSnapshotReplicationPair(DpVolumeGroupSnapshotReplicationPairNestview dpVolumeGroupSnapshotReplicationPair) {
    this.dpVolumeGroupSnapshotReplicationPair = dpVolumeGroupSnapshotReplicationPair;
    return this;
  }

   /**
   * Get dpVolumeGroupSnapshotReplicationPair
   * @return dpVolumeGroupSnapshotReplicationPair
  **/
  @Schema(description = "")
  public DpVolumeGroupSnapshotReplicationPairNestview getDpVolumeGroupSnapshotReplicationPair() {
    return dpVolumeGroupSnapshotReplicationPair;
  }

  public void setDpVolumeGroupSnapshotReplicationPair(DpVolumeGroupSnapshotReplicationPairNestview dpVolumeGroupSnapshotReplicationPair) {
    this.dpVolumeGroupSnapshotReplicationPair = dpVolumeGroupSnapshotReplicationPair;
  }

  public DpVolumeGroupSnapshotReplicationJob finishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * Get finishedAt
   * @return finishedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }

  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }

  public DpVolumeGroupSnapshotReplicationJob id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DpVolumeGroupSnapshotReplicationJob maxRetryTimes(Long maxRetryTimes) {
    this.maxRetryTimes = maxRetryTimes;
    return this;
  }

   /**
   * Get maxRetryTimes
   * @return maxRetryTimes
  **/
  @Schema(description = "")
  public Long getMaxRetryTimes() {
    return maxRetryTimes;
  }

  public void setMaxRetryTimes(Long maxRetryTimes) {
    this.maxRetryTimes = maxRetryTimes;
  }

  public DpVolumeGroupSnapshotReplicationJob progress(Double progress) {
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * @return progress
  **/
  @Schema(description = "")
  public Double getProgress() {
    return progress;
  }

  public void setProgress(Double progress) {
    this.progress = progress;
  }

  public DpVolumeGroupSnapshotReplicationJob size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public DpVolumeGroupSnapshotReplicationJob snapshot(VolumeGroupSnapshotNestview snapshot) {
    this.snapshot = snapshot;
    return this;
  }

   /**
   * Get snapshot
   * @return snapshot
  **/
  @Schema(description = "")
  public VolumeGroupSnapshotNestview getSnapshot() {
    return snapshot;
  }

  public void setSnapshot(VolumeGroupSnapshotNestview snapshot) {
    this.snapshot = snapshot;
  }

  public DpVolumeGroupSnapshotReplicationJob startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Get startedAt
   * @return startedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }

  public DpVolumeGroupSnapshotReplicationJob status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public DpVolumeGroupSnapshotReplicationJob updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public DpVolumeGroupSnapshotReplicationJob volumeGroupName(String volumeGroupName) {
    this.volumeGroupName = volumeGroupName;
    return this;
  }

   /**
   * Get volumeGroupName
   * @return volumeGroupName
  **/
  @Schema(description = "")
  public String getVolumeGroupName() {
    return volumeGroupName;
  }

  public void setVolumeGroupName(String volumeGroupName) {
    this.volumeGroupName = volumeGroupName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpVolumeGroupSnapshotReplicationJob dpVolumeGroupSnapshotReplicationJob = (DpVolumeGroupSnapshotReplicationJob) o;
    return Objects.equals(this.cluster, dpVolumeGroupSnapshotReplicationJob.cluster) &&
        Objects.equals(this.diffType, dpVolumeGroupSnapshotReplicationJob.diffType) &&
        Objects.equals(this.dpVolumeGroupSnapshotReplicationPair, dpVolumeGroupSnapshotReplicationJob.dpVolumeGroupSnapshotReplicationPair) &&
        Objects.equals(this.finishedAt, dpVolumeGroupSnapshotReplicationJob.finishedAt) &&
        Objects.equals(this.id, dpVolumeGroupSnapshotReplicationJob.id) &&
        Objects.equals(this.maxRetryTimes, dpVolumeGroupSnapshotReplicationJob.maxRetryTimes) &&
        Objects.equals(this.progress, dpVolumeGroupSnapshotReplicationJob.progress) &&
        Objects.equals(this.size, dpVolumeGroupSnapshotReplicationJob.size) &&
        Objects.equals(this.snapshot, dpVolumeGroupSnapshotReplicationJob.snapshot) &&
        Objects.equals(this.startedAt, dpVolumeGroupSnapshotReplicationJob.startedAt) &&
        Objects.equals(this.status, dpVolumeGroupSnapshotReplicationJob.status) &&
        Objects.equals(this.updatedAt, dpVolumeGroupSnapshotReplicationJob.updatedAt) &&
        Objects.equals(this.volumeGroupName, dpVolumeGroupSnapshotReplicationJob.volumeGroupName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, diffType, dpVolumeGroupSnapshotReplicationPair, finishedAt, id, maxRetryTimes, progress, size, snapshot, startedAt, status, updatedAt, volumeGroupName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpVolumeGroupSnapshotReplicationJob {\n");
    
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    diffType: ").append(toIndentedString(diffType)).append("\n");
    sb.append("    dpVolumeGroupSnapshotReplicationPair: ").append(toIndentedString(dpVolumeGroupSnapshotReplicationPair)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxRetryTimes: ").append(toIndentedString(maxRetryTimes)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    volumeGroupName: ").append(toIndentedString(volumeGroupName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
