/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.Cluster;
import xio.sds.client.model.DpBlockAsyncReplicationPolicyNestview;
import xio.sds.client.model.DpVolumeGroupSnapshotReplicationPairNestview;
import xio.sds.client.model.RemoteClusterNestview;
import xio.sds.client.model.VolumeNestview;
/**
 * DpBlockAsyncReplicationPair represent the async replication relationship of a pair of volumes +X:model:generate;related_sel;related_depth&#x3D;2;plur&#x3D;DpBlockAsyncReplicationPairs;order_by&#x3D;-ID;with_detailed; +X:benchmark:
 */
@Schema(description = "DpBlockAsyncReplicationPair represent the async replication relationship of a pair of volumes +X:model:generate;related_sel;related_depth=2;plur=DpBlockAsyncReplicationPairs;order_by=-ID;with_detailed; +X:benchmark:")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DpBlockAsyncReplicationPair {
  @SerializedName("block_volume")
  private VolumeNestview blockVolume = null;

  @SerializedName("cluster")
  private Cluster cluster = null;

  @SerializedName("connected")
  private Boolean connected = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("dp_block_async_replication_policy")
  private DpBlockAsyncReplicationPolicyNestview dpBlockAsyncReplicationPolicy = null;

  @SerializedName("dp_volume_group_snapshot_replication_pair")
  private DpVolumeGroupSnapshotReplicationPairNestview dpVolumeGroupSnapshotReplicationPair = null;

  @SerializedName("failovered")
  private Boolean failovered = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("last_success_time")
  private OffsetDateTime lastSuccessTime = null;

  @SerializedName("local_role")
  private String localRole = null;

  @SerializedName("pair_pool_id")
  private Long pairPoolId = null;

  @SerializedName("pair_pool_name")
  private String pairPoolName = null;

  @SerializedName("pair_volume_id")
  private Long pairVolumeId = null;

  @SerializedName("pair_volume_name")
  private String pairVolumeName = null;

  @SerializedName("paused")
  private Boolean paused = null;

  @SerializedName("policy_cron")
  private String policyCron = null;

  @SerializedName("pre_status")
  private String preStatus = null;

  @SerializedName("remote_cluster")
  private RemoteClusterNestview remoteCluster = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  public DpBlockAsyncReplicationPair blockVolume(VolumeNestview blockVolume) {
    this.blockVolume = blockVolume;
    return this;
  }

   /**
   * Get blockVolume
   * @return blockVolume
  **/
  @Schema(description = "")
  public VolumeNestview getBlockVolume() {
    return blockVolume;
  }

  public void setBlockVolume(VolumeNestview blockVolume) {
    this.blockVolume = blockVolume;
  }

  public DpBlockAsyncReplicationPair cluster(Cluster cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public Cluster getCluster() {
    return cluster;
  }

  public void setCluster(Cluster cluster) {
    this.cluster = cluster;
  }

  public DpBlockAsyncReplicationPair connected(Boolean connected) {
    this.connected = connected;
    return this;
  }

   /**
   * Get connected
   * @return connected
  **/
  @Schema(description = "")
  public Boolean isConnected() {
    return connected;
  }

  public void setConnected(Boolean connected) {
    this.connected = connected;
  }

  public DpBlockAsyncReplicationPair create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public DpBlockAsyncReplicationPair dpBlockAsyncReplicationPolicy(DpBlockAsyncReplicationPolicyNestview dpBlockAsyncReplicationPolicy) {
    this.dpBlockAsyncReplicationPolicy = dpBlockAsyncReplicationPolicy;
    return this;
  }

   /**
   * Get dpBlockAsyncReplicationPolicy
   * @return dpBlockAsyncReplicationPolicy
  **/
  @Schema(description = "")
  public DpBlockAsyncReplicationPolicyNestview getDpBlockAsyncReplicationPolicy() {
    return dpBlockAsyncReplicationPolicy;
  }

  public void setDpBlockAsyncReplicationPolicy(DpBlockAsyncReplicationPolicyNestview dpBlockAsyncReplicationPolicy) {
    this.dpBlockAsyncReplicationPolicy = dpBlockAsyncReplicationPolicy;
  }

  public DpBlockAsyncReplicationPair dpVolumeGroupSnapshotReplicationPair(DpVolumeGroupSnapshotReplicationPairNestview dpVolumeGroupSnapshotReplicationPair) {
    this.dpVolumeGroupSnapshotReplicationPair = dpVolumeGroupSnapshotReplicationPair;
    return this;
  }

   /**
   * Get dpVolumeGroupSnapshotReplicationPair
   * @return dpVolumeGroupSnapshotReplicationPair
  **/
  @Schema(description = "")
  public DpVolumeGroupSnapshotReplicationPairNestview getDpVolumeGroupSnapshotReplicationPair() {
    return dpVolumeGroupSnapshotReplicationPair;
  }

  public void setDpVolumeGroupSnapshotReplicationPair(DpVolumeGroupSnapshotReplicationPairNestview dpVolumeGroupSnapshotReplicationPair) {
    this.dpVolumeGroupSnapshotReplicationPair = dpVolumeGroupSnapshotReplicationPair;
  }

  public DpBlockAsyncReplicationPair failovered(Boolean failovered) {
    this.failovered = failovered;
    return this;
  }

   /**
   * Get failovered
   * @return failovered
  **/
  @Schema(description = "")
  public Boolean isFailovered() {
    return failovered;
  }

  public void setFailovered(Boolean failovered) {
    this.failovered = failovered;
  }

  public DpBlockAsyncReplicationPair id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DpBlockAsyncReplicationPair lastSuccessTime(OffsetDateTime lastSuccessTime) {
    this.lastSuccessTime = lastSuccessTime;
    return this;
  }

   /**
   * Get lastSuccessTime
   * @return lastSuccessTime
  **/
  @Schema(description = "")
  public OffsetDateTime getLastSuccessTime() {
    return lastSuccessTime;
  }

  public void setLastSuccessTime(OffsetDateTime lastSuccessTime) {
    this.lastSuccessTime = lastSuccessTime;
  }

  public DpBlockAsyncReplicationPair localRole(String localRole) {
    this.localRole = localRole;
    return this;
  }

   /**
   * Get localRole
   * @return localRole
  **/
  @Schema(description = "")
  public String getLocalRole() {
    return localRole;
  }

  public void setLocalRole(String localRole) {
    this.localRole = localRole;
  }

  public DpBlockAsyncReplicationPair pairPoolId(Long pairPoolId) {
    this.pairPoolId = pairPoolId;
    return this;
  }

   /**
   * Get pairPoolId
   * @return pairPoolId
  **/
  @Schema(description = "")
  public Long getPairPoolId() {
    return pairPoolId;
  }

  public void setPairPoolId(Long pairPoolId) {
    this.pairPoolId = pairPoolId;
  }

  public DpBlockAsyncReplicationPair pairPoolName(String pairPoolName) {
    this.pairPoolName = pairPoolName;
    return this;
  }

   /**
   * Get pairPoolName
   * @return pairPoolName
  **/
  @Schema(description = "")
  public String getPairPoolName() {
    return pairPoolName;
  }

  public void setPairPoolName(String pairPoolName) {
    this.pairPoolName = pairPoolName;
  }

  public DpBlockAsyncReplicationPair pairVolumeId(Long pairVolumeId) {
    this.pairVolumeId = pairVolumeId;
    return this;
  }

   /**
   * Get pairVolumeId
   * @return pairVolumeId
  **/
  @Schema(description = "")
  public Long getPairVolumeId() {
    return pairVolumeId;
  }

  public void setPairVolumeId(Long pairVolumeId) {
    this.pairVolumeId = pairVolumeId;
  }

  public DpBlockAsyncReplicationPair pairVolumeName(String pairVolumeName) {
    this.pairVolumeName = pairVolumeName;
    return this;
  }

   /**
   * Get pairVolumeName
   * @return pairVolumeName
  **/
  @Schema(description = "")
  public String getPairVolumeName() {
    return pairVolumeName;
  }

  public void setPairVolumeName(String pairVolumeName) {
    this.pairVolumeName = pairVolumeName;
  }

  public DpBlockAsyncReplicationPair paused(Boolean paused) {
    this.paused = paused;
    return this;
  }

   /**
   * Get paused
   * @return paused
  **/
  @Schema(description = "")
  public Boolean isPaused() {
    return paused;
  }

  public void setPaused(Boolean paused) {
    this.paused = paused;
  }

  public DpBlockAsyncReplicationPair policyCron(String policyCron) {
    this.policyCron = policyCron;
    return this;
  }

   /**
   * Get policyCron
   * @return policyCron
  **/
  @Schema(description = "")
  public String getPolicyCron() {
    return policyCron;
  }

  public void setPolicyCron(String policyCron) {
    this.policyCron = policyCron;
  }

  public DpBlockAsyncReplicationPair preStatus(String preStatus) {
    this.preStatus = preStatus;
    return this;
  }

   /**
   * Get preStatus
   * @return preStatus
  **/
  @Schema(description = "")
  public String getPreStatus() {
    return preStatus;
  }

  public void setPreStatus(String preStatus) {
    this.preStatus = preStatus;
  }

  public DpBlockAsyncReplicationPair remoteCluster(RemoteClusterNestview remoteCluster) {
    this.remoteCluster = remoteCluster;
    return this;
  }

   /**
   * Get remoteCluster
   * @return remoteCluster
  **/
  @Schema(description = "")
  public RemoteClusterNestview getRemoteCluster() {
    return remoteCluster;
  }

  public void setRemoteCluster(RemoteClusterNestview remoteCluster) {
    this.remoteCluster = remoteCluster;
  }

  public DpBlockAsyncReplicationPair status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public DpBlockAsyncReplicationPair update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpBlockAsyncReplicationPair dpBlockAsyncReplicationPair = (DpBlockAsyncReplicationPair) o;
    return Objects.equals(this.blockVolume, dpBlockAsyncReplicationPair.blockVolume) &&
        Objects.equals(this.cluster, dpBlockAsyncReplicationPair.cluster) &&
        Objects.equals(this.connected, dpBlockAsyncReplicationPair.connected) &&
        Objects.equals(this.create, dpBlockAsyncReplicationPair.create) &&
        Objects.equals(this.dpBlockAsyncReplicationPolicy, dpBlockAsyncReplicationPair.dpBlockAsyncReplicationPolicy) &&
        Objects.equals(this.dpVolumeGroupSnapshotReplicationPair, dpBlockAsyncReplicationPair.dpVolumeGroupSnapshotReplicationPair) &&
        Objects.equals(this.failovered, dpBlockAsyncReplicationPair.failovered) &&
        Objects.equals(this.id, dpBlockAsyncReplicationPair.id) &&
        Objects.equals(this.lastSuccessTime, dpBlockAsyncReplicationPair.lastSuccessTime) &&
        Objects.equals(this.localRole, dpBlockAsyncReplicationPair.localRole) &&
        Objects.equals(this.pairPoolId, dpBlockAsyncReplicationPair.pairPoolId) &&
        Objects.equals(this.pairPoolName, dpBlockAsyncReplicationPair.pairPoolName) &&
        Objects.equals(this.pairVolumeId, dpBlockAsyncReplicationPair.pairVolumeId) &&
        Objects.equals(this.pairVolumeName, dpBlockAsyncReplicationPair.pairVolumeName) &&
        Objects.equals(this.paused, dpBlockAsyncReplicationPair.paused) &&
        Objects.equals(this.policyCron, dpBlockAsyncReplicationPair.policyCron) &&
        Objects.equals(this.preStatus, dpBlockAsyncReplicationPair.preStatus) &&
        Objects.equals(this.remoteCluster, dpBlockAsyncReplicationPair.remoteCluster) &&
        Objects.equals(this.status, dpBlockAsyncReplicationPair.status) &&
        Objects.equals(this.update, dpBlockAsyncReplicationPair.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockVolume, cluster, connected, create, dpBlockAsyncReplicationPolicy, dpVolumeGroupSnapshotReplicationPair, failovered, id, lastSuccessTime, localRole, pairPoolId, pairPoolName, pairVolumeId, pairVolumeName, paused, policyCron, preStatus, remoteCluster, status, update);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpBlockAsyncReplicationPair {\n");
    
    sb.append("    blockVolume: ").append(toIndentedString(blockVolume)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    dpBlockAsyncReplicationPolicy: ").append(toIndentedString(dpBlockAsyncReplicationPolicy)).append("\n");
    sb.append("    dpVolumeGroupSnapshotReplicationPair: ").append(toIndentedString(dpVolumeGroupSnapshotReplicationPair)).append("\n");
    sb.append("    failovered: ").append(toIndentedString(failovered)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastSuccessTime: ").append(toIndentedString(lastSuccessTime)).append("\n");
    sb.append("    localRole: ").append(toIndentedString(localRole)).append("\n");
    sb.append("    pairPoolId: ").append(toIndentedString(pairPoolId)).append("\n");
    sb.append("    pairPoolName: ").append(toIndentedString(pairPoolName)).append("\n");
    sb.append("    pairVolumeId: ").append(toIndentedString(pairVolumeId)).append("\n");
    sb.append("    pairVolumeName: ").append(toIndentedString(pairVolumeName)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    policyCron: ").append(toIndentedString(policyCron)).append("\n");
    sb.append("    preStatus: ").append(toIndentedString(preStatus)).append("\n");
    sb.append("    remoteCluster: ").append(toIndentedString(remoteCluster)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
