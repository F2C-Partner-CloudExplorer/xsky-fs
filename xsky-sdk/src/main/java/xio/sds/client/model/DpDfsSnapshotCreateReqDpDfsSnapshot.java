/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DpDfsSnapshotCreateReqDpDfsSnapshot
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DpDfsSnapshotCreateReqDpDfsSnapshot {
  @SerializedName("dp_dfs_snapshot_policy_id")
  private Long dpDfsSnapshotPolicyId = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("rootfs_id")
  private Long rootfsId = null;

  @SerializedName("trigger")
  private Boolean trigger = null;

  public DpDfsSnapshotCreateReqDpDfsSnapshot dpDfsSnapshotPolicyId(Long dpDfsSnapshotPolicyId) {
    this.dpDfsSnapshotPolicyId = dpDfsSnapshotPolicyId;
    return this;
  }

   /**
   * Get dpDfsSnapshotPolicyId
   * @return dpDfsSnapshotPolicyId
  **/
  @Schema(required = true, description = "")
  public Long getDpDfsSnapshotPolicyId() {
    return dpDfsSnapshotPolicyId;
  }

  public void setDpDfsSnapshotPolicyId(Long dpDfsSnapshotPolicyId) {
    this.dpDfsSnapshotPolicyId = dpDfsSnapshotPolicyId;
  }

  public DpDfsSnapshotCreateReqDpDfsSnapshot path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @Schema(required = true, description = "")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public DpDfsSnapshotCreateReqDpDfsSnapshot rootfsId(Long rootfsId) {
    this.rootfsId = rootfsId;
    return this;
  }

   /**
   * Get rootfsId
   * @return rootfsId
  **/
  @Schema(required = true, description = "")
  public Long getRootfsId() {
    return rootfsId;
  }

  public void setRootfsId(Long rootfsId) {
    this.rootfsId = rootfsId;
  }

  public DpDfsSnapshotCreateReqDpDfsSnapshot trigger(Boolean trigger) {
    this.trigger = trigger;
    return this;
  }

   /**
   * Get trigger
   * @return trigger
  **/
  @Schema(required = true, description = "")
  public Boolean isTrigger() {
    return trigger;
  }

  public void setTrigger(Boolean trigger) {
    this.trigger = trigger;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpDfsSnapshotCreateReqDpDfsSnapshot dpDfsSnapshotCreateReqDpDfsSnapshot = (DpDfsSnapshotCreateReqDpDfsSnapshot) o;
    return Objects.equals(this.dpDfsSnapshotPolicyId, dpDfsSnapshotCreateReqDpDfsSnapshot.dpDfsSnapshotPolicyId) &&
        Objects.equals(this.path, dpDfsSnapshotCreateReqDpDfsSnapshot.path) &&
        Objects.equals(this.rootfsId, dpDfsSnapshotCreateReqDpDfsSnapshot.rootfsId) &&
        Objects.equals(this.trigger, dpDfsSnapshotCreateReqDpDfsSnapshot.trigger);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dpDfsSnapshotPolicyId, path, rootfsId, trigger);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpDfsSnapshotCreateReqDpDfsSnapshot {\n");
    
    sb.append("    dpDfsSnapshotPolicyId: ").append(toIndentedString(dpDfsSnapshotPolicyId)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    rootfsId: ").append(toIndentedString(rootfsId)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
