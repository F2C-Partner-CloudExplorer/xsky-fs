/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * SSLCertificateCreateReqCertificate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class SSLCertificateCreateReqCertificate {
  @SerializedName("certificate")
  private String certificate = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("private_key")
  private String privateKey = null;

  public SSLCertificateCreateReqCertificate certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * certificate in pem
   * @return certificate
  **/
  @Schema(required = true, description = "certificate in pem")
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }

  public SSLCertificateCreateReqCertificate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * certificate description
   * @return description
  **/
  @Schema(description = "certificate description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public SSLCertificateCreateReqCertificate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * certificate name
   * @return name
  **/
  @Schema(required = true, description = "certificate name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SSLCertificateCreateReqCertificate privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

   /**
   * private key in pem
   * @return privateKey
  **/
  @Schema(required = true, description = "private key in pem")
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSLCertificateCreateReqCertificate ssLCertificateCreateReqCertificate = (SSLCertificateCreateReqCertificate) o;
    return Objects.equals(this.certificate, ssLCertificateCreateReqCertificate.certificate) &&
        Objects.equals(this.description, ssLCertificateCreateReqCertificate.description) &&
        Objects.equals(this.name, ssLCertificateCreateReqCertificate.name) &&
        Objects.equals(this.privateKey, ssLCertificateCreateReqCertificate.privateKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, description, name, privateKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSLCertificateCreateReqCertificate {\n");
    
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
