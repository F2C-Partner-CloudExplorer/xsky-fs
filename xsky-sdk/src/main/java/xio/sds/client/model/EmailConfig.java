/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * EmailConfig define email config
 */
@Schema(description = "EmailConfig define email config")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class EmailConfig {
  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("smtp_auth_enabled")
  private Boolean smtpAuthEnabled = null;

  @SerializedName("smtp_email_from")
  private String smtpEmailFrom = null;

  @SerializedName("smtp_enable_ssl")
  private Boolean smtpEnableSsl = null;

  @SerializedName("smtp_host")
  private String smtpHost = null;

  @SerializedName("smtp_password")
  private String smtpPassword = null;

  @SerializedName("smtp_port")
  private Long smtpPort = null;

  @SerializedName("smtp_rsa_key_id")
  private String smtpRsaKeyId = null;

  @SerializedName("smtp_skip_tls_cert_verify")
  private Boolean smtpSkipTlsCertVerify = null;

  @SerializedName("smtp_ssl_mode")
  private String smtpSslMode = null;

  @SerializedName("smtp_user")
  private String smtpUser = null;

  @SerializedName("subject")
  private String subject = null;

  public EmailConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(description = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public EmailConfig smtpAuthEnabled(Boolean smtpAuthEnabled) {
    this.smtpAuthEnabled = smtpAuthEnabled;
    return this;
  }

   /**
   * Get smtpAuthEnabled
   * @return smtpAuthEnabled
  **/
  @Schema(description = "")
  public Boolean isSmtpAuthEnabled() {
    return smtpAuthEnabled;
  }

  public void setSmtpAuthEnabled(Boolean smtpAuthEnabled) {
    this.smtpAuthEnabled = smtpAuthEnabled;
  }

  public EmailConfig smtpEmailFrom(String smtpEmailFrom) {
    this.smtpEmailFrom = smtpEmailFrom;
    return this;
  }

   /**
   * Get smtpEmailFrom
   * @return smtpEmailFrom
  **/
  @Schema(description = "")
  public String getSmtpEmailFrom() {
    return smtpEmailFrom;
  }

  public void setSmtpEmailFrom(String smtpEmailFrom) {
    this.smtpEmailFrom = smtpEmailFrom;
  }

  public EmailConfig smtpEnableSsl(Boolean smtpEnableSsl) {
    this.smtpEnableSsl = smtpEnableSsl;
    return this;
  }

   /**
   * Get smtpEnableSsl
   * @return smtpEnableSsl
  **/
  @Schema(description = "")
  public Boolean isSmtpEnableSsl() {
    return smtpEnableSsl;
  }

  public void setSmtpEnableSsl(Boolean smtpEnableSsl) {
    this.smtpEnableSsl = smtpEnableSsl;
  }

  public EmailConfig smtpHost(String smtpHost) {
    this.smtpHost = smtpHost;
    return this;
  }

   /**
   * Get smtpHost
   * @return smtpHost
  **/
  @Schema(description = "")
  public String getSmtpHost() {
    return smtpHost;
  }

  public void setSmtpHost(String smtpHost) {
    this.smtpHost = smtpHost;
  }

  public EmailConfig smtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
    return this;
  }

   /**
   * Get smtpPassword
   * @return smtpPassword
  **/
  @Schema(description = "")
  public String getSmtpPassword() {
    return smtpPassword;
  }

  public void setSmtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
  }

  public EmailConfig smtpPort(Long smtpPort) {
    this.smtpPort = smtpPort;
    return this;
  }

   /**
   * Get smtpPort
   * @return smtpPort
  **/
  @Schema(description = "")
  public Long getSmtpPort() {
    return smtpPort;
  }

  public void setSmtpPort(Long smtpPort) {
    this.smtpPort = smtpPort;
  }

  public EmailConfig smtpRsaKeyId(String smtpRsaKeyId) {
    this.smtpRsaKeyId = smtpRsaKeyId;
    return this;
  }

   /**
   * Get smtpRsaKeyId
   * @return smtpRsaKeyId
  **/
  @Schema(description = "")
  public String getSmtpRsaKeyId() {
    return smtpRsaKeyId;
  }

  public void setSmtpRsaKeyId(String smtpRsaKeyId) {
    this.smtpRsaKeyId = smtpRsaKeyId;
  }

  public EmailConfig smtpSkipTlsCertVerify(Boolean smtpSkipTlsCertVerify) {
    this.smtpSkipTlsCertVerify = smtpSkipTlsCertVerify;
    return this;
  }

   /**
   * Get smtpSkipTlsCertVerify
   * @return smtpSkipTlsCertVerify
  **/
  @Schema(description = "")
  public Boolean isSmtpSkipTlsCertVerify() {
    return smtpSkipTlsCertVerify;
  }

  public void setSmtpSkipTlsCertVerify(Boolean smtpSkipTlsCertVerify) {
    this.smtpSkipTlsCertVerify = smtpSkipTlsCertVerify;
  }

  public EmailConfig smtpSslMode(String smtpSslMode) {
    this.smtpSslMode = smtpSslMode;
    return this;
  }

   /**
   * Get smtpSslMode
   * @return smtpSslMode
  **/
  @Schema(description = "")
  public String getSmtpSslMode() {
    return smtpSslMode;
  }

  public void setSmtpSslMode(String smtpSslMode) {
    this.smtpSslMode = smtpSslMode;
  }

  public EmailConfig smtpUser(String smtpUser) {
    this.smtpUser = smtpUser;
    return this;
  }

   /**
   * Get smtpUser
   * @return smtpUser
  **/
  @Schema(description = "")
  public String getSmtpUser() {
    return smtpUser;
  }

  public void setSmtpUser(String smtpUser) {
    this.smtpUser = smtpUser;
  }

  public EmailConfig subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @Schema(description = "")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailConfig emailConfig = (EmailConfig) o;
    return Objects.equals(this.enabled, emailConfig.enabled) &&
        Objects.equals(this.smtpAuthEnabled, emailConfig.smtpAuthEnabled) &&
        Objects.equals(this.smtpEmailFrom, emailConfig.smtpEmailFrom) &&
        Objects.equals(this.smtpEnableSsl, emailConfig.smtpEnableSsl) &&
        Objects.equals(this.smtpHost, emailConfig.smtpHost) &&
        Objects.equals(this.smtpPassword, emailConfig.smtpPassword) &&
        Objects.equals(this.smtpPort, emailConfig.smtpPort) &&
        Objects.equals(this.smtpRsaKeyId, emailConfig.smtpRsaKeyId) &&
        Objects.equals(this.smtpSkipTlsCertVerify, emailConfig.smtpSkipTlsCertVerify) &&
        Objects.equals(this.smtpSslMode, emailConfig.smtpSslMode) &&
        Objects.equals(this.smtpUser, emailConfig.smtpUser) &&
        Objects.equals(this.subject, emailConfig.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, smtpAuthEnabled, smtpEmailFrom, smtpEnableSsl, smtpHost, smtpPassword, smtpPort, smtpRsaKeyId, smtpSkipTlsCertVerify, smtpSslMode, smtpUser, subject);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailConfig {\n");
    
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    smtpAuthEnabled: ").append(toIndentedString(smtpAuthEnabled)).append("\n");
    sb.append("    smtpEmailFrom: ").append(toIndentedString(smtpEmailFrom)).append("\n");
    sb.append("    smtpEnableSsl: ").append(toIndentedString(smtpEnableSsl)).append("\n");
    sb.append("    smtpHost: ").append(toIndentedString(smtpHost)).append("\n");
    sb.append("    smtpPassword: ").append(toIndentedString(smtpPassword)).append("\n");
    sb.append("    smtpPort: ").append(toIndentedString(smtpPort)).append("\n");
    sb.append("    smtpRsaKeyId: ").append(toIndentedString(smtpRsaKeyId)).append("\n");
    sb.append("    smtpSkipTlsCertVerify: ").append(toIndentedString(smtpSkipTlsCertVerify)).append("\n");
    sb.append("    smtpSslMode: ").append(toIndentedString(smtpSslMode)).append("\n");
    sb.append("    smtpUser: ").append(toIndentedString(smtpUser)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
