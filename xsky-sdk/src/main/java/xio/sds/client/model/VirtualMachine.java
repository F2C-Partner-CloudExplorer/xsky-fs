/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.ClusterNestview;
import xio.sds.client.model.HostNestview;
import xio.sds.client.model.VMDisk;
import xio.sds.client.model.VMFlavorNestview;
import xio.sds.client.model.VMImageNestview;
import xio.sds.client.model.VMNetworkInterface;
import xio.sds.client.model.VolumeNestview;
/**
 * VirtualMachine defines libvirt VM
 */
@Schema(description = "VirtualMachine defines libvirt VM")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class VirtualMachine {
  @SerializedName("action_status")
  private String actionStatus = null;

  @SerializedName("cluster")
  private ClusterNestview cluster = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("custom_cpu")
  private Long customCpu = null;

  @SerializedName("disks")
  private List<VMDisk> disks = null;

  @SerializedName("flavor")
  private VMFlavorNestview flavor = null;

  @SerializedName("host")
  private HostNestview host = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("image")
  private VMImageNestview image = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("nics")
  private List<VMNetworkInterface> nics = null;

  @SerializedName("root_volume")
  private VolumeNestview rootVolume = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("vm_status")
  private String vmStatus = null;

  public VirtualMachine actionStatus(String actionStatus) {
    this.actionStatus = actionStatus;
    return this;
  }

   /**
   * Get actionStatus
   * @return actionStatus
  **/
  @Schema(description = "")
  public String getActionStatus() {
    return actionStatus;
  }

  public void setActionStatus(String actionStatus) {
    this.actionStatus = actionStatus;
  }

  public VirtualMachine cluster(ClusterNestview cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public ClusterNestview getCluster() {
    return cluster;
  }

  public void setCluster(ClusterNestview cluster) {
    this.cluster = cluster;
  }

  public VirtualMachine create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public VirtualMachine customCpu(Long customCpu) {
    this.customCpu = customCpu;
    return this;
  }

   /**
   * Get customCpu
   * @return customCpu
  **/
  @Schema(description = "")
  public Long getCustomCpu() {
    return customCpu;
  }

  public void setCustomCpu(Long customCpu) {
    this.customCpu = customCpu;
  }

  public VirtualMachine disks(List<VMDisk> disks) {
    this.disks = disks;
    return this;
  }

  public VirtualMachine addDisksItem(VMDisk disksItem) {
    if (this.disks == null) {
      this.disks = new ArrayList<VMDisk>();
    }
    this.disks.add(disksItem);
    return this;
  }

   /**
   * Get disks
   * @return disks
  **/
  @Schema(description = "")
  public List<VMDisk> getDisks() {
    return disks;
  }

  public void setDisks(List<VMDisk> disks) {
    this.disks = disks;
  }

  public VirtualMachine flavor(VMFlavorNestview flavor) {
    this.flavor = flavor;
    return this;
  }

   /**
   * Get flavor
   * @return flavor
  **/
  @Schema(description = "")
  public VMFlavorNestview getFlavor() {
    return flavor;
  }

  public void setFlavor(VMFlavorNestview flavor) {
    this.flavor = flavor;
  }

  public VirtualMachine host(HostNestview host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(description = "")
  public HostNestview getHost() {
    return host;
  }

  public void setHost(HostNestview host) {
    this.host = host;
  }

  public VirtualMachine id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public VirtualMachine image(VMImageNestview image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public VMImageNestview getImage() {
    return image;
  }

  public void setImage(VMImageNestview image) {
    this.image = image;
  }

  public VirtualMachine name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public VirtualMachine nics(List<VMNetworkInterface> nics) {
    this.nics = nics;
    return this;
  }

  public VirtualMachine addNicsItem(VMNetworkInterface nicsItem) {
    if (this.nics == null) {
      this.nics = new ArrayList<VMNetworkInterface>();
    }
    this.nics.add(nicsItem);
    return this;
  }

   /**
   * Get nics
   * @return nics
  **/
  @Schema(description = "")
  public List<VMNetworkInterface> getNics() {
    return nics;
  }

  public void setNics(List<VMNetworkInterface> nics) {
    this.nics = nics;
  }

  public VirtualMachine rootVolume(VolumeNestview rootVolume) {
    this.rootVolume = rootVolume;
    return this;
  }

   /**
   * Get rootVolume
   * @return rootVolume
  **/
  @Schema(description = "")
  public VolumeNestview getRootVolume() {
    return rootVolume;
  }

  public void setRootVolume(VolumeNestview rootVolume) {
    this.rootVolume = rootVolume;
  }

  public VirtualMachine status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public VirtualMachine update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }

  public VirtualMachine uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public VirtualMachine vmStatus(String vmStatus) {
    this.vmStatus = vmStatus;
    return this;
  }

   /**
   * Get vmStatus
   * @return vmStatus
  **/
  @Schema(description = "")
  public String getVmStatus() {
    return vmStatus;
  }

  public void setVmStatus(String vmStatus) {
    this.vmStatus = vmStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachine virtualMachine = (VirtualMachine) o;
    return Objects.equals(this.actionStatus, virtualMachine.actionStatus) &&
        Objects.equals(this.cluster, virtualMachine.cluster) &&
        Objects.equals(this.create, virtualMachine.create) &&
        Objects.equals(this.customCpu, virtualMachine.customCpu) &&
        Objects.equals(this.disks, virtualMachine.disks) &&
        Objects.equals(this.flavor, virtualMachine.flavor) &&
        Objects.equals(this.host, virtualMachine.host) &&
        Objects.equals(this.id, virtualMachine.id) &&
        Objects.equals(this.image, virtualMachine.image) &&
        Objects.equals(this.name, virtualMachine.name) &&
        Objects.equals(this.nics, virtualMachine.nics) &&
        Objects.equals(this.rootVolume, virtualMachine.rootVolume) &&
        Objects.equals(this.status, virtualMachine.status) &&
        Objects.equals(this.update, virtualMachine.update) &&
        Objects.equals(this.uuid, virtualMachine.uuid) &&
        Objects.equals(this.vmStatus, virtualMachine.vmStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionStatus, cluster, create, customCpu, disks, flavor, host, id, image, name, nics, rootVolume, status, update, uuid, vmStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachine {\n");
    
    sb.append("    actionStatus: ").append(toIndentedString(actionStatus)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    customCpu: ").append(toIndentedString(customCpu)).append("\n");
    sb.append("    disks: ").append(toIndentedString(disks)).append("\n");
    sb.append("    flavor: ").append(toIndentedString(flavor)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nics: ").append(toIndentedString(nics)).append("\n");
    sb.append("    rootVolume: ").append(toIndentedString(rootVolume)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    vmStatus: ").append(toIndentedString(vmStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
