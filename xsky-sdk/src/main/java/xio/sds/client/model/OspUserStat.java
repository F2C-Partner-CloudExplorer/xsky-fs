/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import xio.sds.client.model.OspStorageClassStat;
import xio.sds.client.model.OspUserZoneStat;
/**
 * OspUserStat
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class OspUserStat {
  @SerializedName("cache_allocated_size")
  private Long cacheAllocatedSize = null;

  @SerializedName("fast_flow_allocated_objects")
  private Long fastFlowAllocatedObjects = null;

  @SerializedName("rx_ops_pm")
  private Double rxOpsPm = null;

  @SerializedName("latency_del")
  private Long latencyDel = null;

  @SerializedName("origin_cdn_allocated_size")
  private Long originCdnAllocatedSize = null;

  @SerializedName("recycle_external_objects")
  private Long recycleExternalObjects = null;

  @SerializedName("fast_flow_allocated_size")
  private Long fastFlowAllocatedSize = null;

  @SerializedName("local_utilized_size")
  private Long localUtilizedSize = null;

  @SerializedName("total_obj_expired_ops")
  private Long totalObjExpiredOps = null;

  @SerializedName("zone_stats")
  private OspUserZoneStat zoneStats = null;

  @SerializedName("total_rx_ops")
  private Long totalRxOps = null;

  @SerializedName("latency_list")
  private Long latencyList = null;

  @SerializedName("list_latency_us")
  private Double listLatencyUs = null;

  @SerializedName("allocated_objects")
  private Long allocatedObjects = null;

  @SerializedName("recycle_local_utilized_size")
  private Long recycleLocalUtilizedSize = null;

  @SerializedName("total_tx_bytes")
  private Long totalTxBytes = null;

  @SerializedName("obj_expired_ops_pm")
  private Double objExpiredOpsPm = null;

  @SerializedName("cache_utilized_size")
  private Long cacheUtilizedSize = null;

  @SerializedName("local_allocated_size")
  private Long localAllocatedSize = null;

  @SerializedName("create")
  private String create = null;

  @SerializedName("utilized_size")
  private Long utilizedSize = null;

  @SerializedName("total_del_success_ops")
  private Long totalDelSuccessOps = null;

  @SerializedName("origin_cdn_allocated_objects")
  private Long originCdnAllocatedObjects = null;

  @SerializedName("total_list_success_ops")
  private Long totalListSuccessOps = null;

  @SerializedName("latency_obj_expired")
  private Long latencyObjExpired = null;

  @SerializedName("total_obj_expired_success_ops")
  private Long totalObjExpiredSuccessOps = null;

  @SerializedName("recycle_local_objects")
  private Long recycleLocalObjects = null;

  @SerializedName("rx_bandwidth_kbyte")
  private Double rxBandwidthKbyte = null;

  @SerializedName("total_ops_pm")
  private Double totalOpsPm = null;

  @SerializedName("recycle_local_size")
  private Long recycleLocalSize = null;

  @SerializedName("total_rx_success_ops")
  private Long totalRxSuccessOps = null;

  @SerializedName("recycle_external_size")
  private Long recycleExternalSize = null;

  @SerializedName("del_latency_us")
  private Double delLatencyUs = null;

  @SerializedName("total_rx_bytes")
  private Long totalRxBytes = null;

  @SerializedName("external_allocated_size")
  private Long externalAllocatedSize = null;

  @SerializedName("local_allocated_objects")
  private Long localAllocatedObjects = null;

  @SerializedName("total_ops")
  private Long totalOps = null;

  @SerializedName("total_del_ops")
  private Long totalDelOps = null;

  @SerializedName("down_latency_us")
  private Double downLatencyUs = null;

  @SerializedName("latency_down")
  private Long latencyDown = null;

  @SerializedName("recycle_utilized_size")
  private Long recycleUtilizedSize = null;

  @SerializedName("list_ops_pm")
  private Double listOpsPm = null;

  @SerializedName("external_utilized_size")
  private Long externalUtilizedSize = null;

  @SerializedName("tx_ops_pm")
  private Double txOpsPm = null;

  @SerializedName("tx_bandwidth_kbyte")
  private Double txBandwidthKbyte = null;

  @SerializedName("del_ops_pm")
  private Double delOpsPm = null;

  @SerializedName("origin_cdn_utilized_size")
  private Long originCdnUtilizedSize = null;

  @SerializedName("fast_flow_utilized_size")
  private Long fastFlowUtilizedSize = null;

  @SerializedName("up_latency_us")
  private Double upLatencyUs = null;

  @SerializedName("allocated_size")
  private Long allocatedSize = null;

  @SerializedName("total_tx_success_ops")
  private Long totalTxSuccessOps = null;

  @SerializedName("latency_up")
  private Long latencyUp = null;

  @SerializedName("recycle_external_utilized_size")
  private Long recycleExternalUtilizedSize = null;

  @SerializedName("cache_allocated_objects")
  private Long cacheAllocatedObjects = null;

  @SerializedName("total_list_ops")
  private Long totalListOps = null;

  @SerializedName("recycle_size")
  private Long recycleSize = null;

  @SerializedName("obj_expired_latency_us")
  private Double objExpiredLatencyUs = null;

  @SerializedName("total_tx_ops")
  private Long totalTxOps = null;

  @SerializedName("recycle_objects")
  private Long recycleObjects = null;

  @SerializedName("external_allocated_objects")
  private Long externalAllocatedObjects = null;

  @SerializedName("storage_classes")
  private OspStorageClassStat storageClasses = null;

  public OspUserStat cacheAllocatedSize(Long cacheAllocatedSize) {
    this.cacheAllocatedSize = cacheAllocatedSize;
    return this;
  }

   /**
   * Get cacheAllocatedSize
   * @return cacheAllocatedSize
  **/
  @Schema(description = "")
  public Long getCacheAllocatedSize() {
    return cacheAllocatedSize;
  }

  public void setCacheAllocatedSize(Long cacheAllocatedSize) {
    this.cacheAllocatedSize = cacheAllocatedSize;
  }

  public OspUserStat fastFlowAllocatedObjects(Long fastFlowAllocatedObjects) {
    this.fastFlowAllocatedObjects = fastFlowAllocatedObjects;
    return this;
  }

   /**
   * Get fastFlowAllocatedObjects
   * @return fastFlowAllocatedObjects
  **/
  @Schema(description = "")
  public Long getFastFlowAllocatedObjects() {
    return fastFlowAllocatedObjects;
  }

  public void setFastFlowAllocatedObjects(Long fastFlowAllocatedObjects) {
    this.fastFlowAllocatedObjects = fastFlowAllocatedObjects;
  }

  public OspUserStat rxOpsPm(Double rxOpsPm) {
    this.rxOpsPm = rxOpsPm;
    return this;
  }

   /**
   * Get rxOpsPm
   * @return rxOpsPm
  **/
  @Schema(description = "")
  public Double getRxOpsPm() {
    return rxOpsPm;
  }

  public void setRxOpsPm(Double rxOpsPm) {
    this.rxOpsPm = rxOpsPm;
  }

  public OspUserStat latencyDel(Long latencyDel) {
    this.latencyDel = latencyDel;
    return this;
  }

   /**
   * Get latencyDel
   * @return latencyDel
  **/
  @Schema(description = "")
  public Long getLatencyDel() {
    return latencyDel;
  }

  public void setLatencyDel(Long latencyDel) {
    this.latencyDel = latencyDel;
  }

  public OspUserStat originCdnAllocatedSize(Long originCdnAllocatedSize) {
    this.originCdnAllocatedSize = originCdnAllocatedSize;
    return this;
  }

   /**
   * Get originCdnAllocatedSize
   * @return originCdnAllocatedSize
  **/
  @Schema(description = "")
  public Long getOriginCdnAllocatedSize() {
    return originCdnAllocatedSize;
  }

  public void setOriginCdnAllocatedSize(Long originCdnAllocatedSize) {
    this.originCdnAllocatedSize = originCdnAllocatedSize;
  }

  public OspUserStat recycleExternalObjects(Long recycleExternalObjects) {
    this.recycleExternalObjects = recycleExternalObjects;
    return this;
  }

   /**
   * Get recycleExternalObjects
   * @return recycleExternalObjects
  **/
  @Schema(description = "")
  public Long getRecycleExternalObjects() {
    return recycleExternalObjects;
  }

  public void setRecycleExternalObjects(Long recycleExternalObjects) {
    this.recycleExternalObjects = recycleExternalObjects;
  }

  public OspUserStat fastFlowAllocatedSize(Long fastFlowAllocatedSize) {
    this.fastFlowAllocatedSize = fastFlowAllocatedSize;
    return this;
  }

   /**
   * Get fastFlowAllocatedSize
   * @return fastFlowAllocatedSize
  **/
  @Schema(description = "")
  public Long getFastFlowAllocatedSize() {
    return fastFlowAllocatedSize;
  }

  public void setFastFlowAllocatedSize(Long fastFlowAllocatedSize) {
    this.fastFlowAllocatedSize = fastFlowAllocatedSize;
  }

  public OspUserStat localUtilizedSize(Long localUtilizedSize) {
    this.localUtilizedSize = localUtilizedSize;
    return this;
  }

   /**
   * Get localUtilizedSize
   * @return localUtilizedSize
  **/
  @Schema(description = "")
  public Long getLocalUtilizedSize() {
    return localUtilizedSize;
  }

  public void setLocalUtilizedSize(Long localUtilizedSize) {
    this.localUtilizedSize = localUtilizedSize;
  }

  public OspUserStat totalObjExpiredOps(Long totalObjExpiredOps) {
    this.totalObjExpiredOps = totalObjExpiredOps;
    return this;
  }

   /**
   * Get totalObjExpiredOps
   * @return totalObjExpiredOps
  **/
  @Schema(description = "")
  public Long getTotalObjExpiredOps() {
    return totalObjExpiredOps;
  }

  public void setTotalObjExpiredOps(Long totalObjExpiredOps) {
    this.totalObjExpiredOps = totalObjExpiredOps;
  }

  public OspUserStat zoneStats(OspUserZoneStat zoneStats) {
    this.zoneStats = zoneStats;
    return this;
  }

   /**
   * Get zoneStats
   * @return zoneStats
  **/
  @Schema(description = "")
  public OspUserZoneStat getZoneStats() {
    return zoneStats;
  }

  public void setZoneStats(OspUserZoneStat zoneStats) {
    this.zoneStats = zoneStats;
  }

  public OspUserStat totalRxOps(Long totalRxOps) {
    this.totalRxOps = totalRxOps;
    return this;
  }

   /**
   * Get totalRxOps
   * @return totalRxOps
  **/
  @Schema(description = "")
  public Long getTotalRxOps() {
    return totalRxOps;
  }

  public void setTotalRxOps(Long totalRxOps) {
    this.totalRxOps = totalRxOps;
  }

  public OspUserStat latencyList(Long latencyList) {
    this.latencyList = latencyList;
    return this;
  }

   /**
   * Get latencyList
   * @return latencyList
  **/
  @Schema(description = "")
  public Long getLatencyList() {
    return latencyList;
  }

  public void setLatencyList(Long latencyList) {
    this.latencyList = latencyList;
  }

  public OspUserStat listLatencyUs(Double listLatencyUs) {
    this.listLatencyUs = listLatencyUs;
    return this;
  }

   /**
   * Get listLatencyUs
   * @return listLatencyUs
  **/
  @Schema(description = "")
  public Double getListLatencyUs() {
    return listLatencyUs;
  }

  public void setListLatencyUs(Double listLatencyUs) {
    this.listLatencyUs = listLatencyUs;
  }

  public OspUserStat allocatedObjects(Long allocatedObjects) {
    this.allocatedObjects = allocatedObjects;
    return this;
  }

   /**
   * Get allocatedObjects
   * @return allocatedObjects
  **/
  @Schema(description = "")
  public Long getAllocatedObjects() {
    return allocatedObjects;
  }

  public void setAllocatedObjects(Long allocatedObjects) {
    this.allocatedObjects = allocatedObjects;
  }

  public OspUserStat recycleLocalUtilizedSize(Long recycleLocalUtilizedSize) {
    this.recycleLocalUtilizedSize = recycleLocalUtilizedSize;
    return this;
  }

   /**
   * Get recycleLocalUtilizedSize
   * @return recycleLocalUtilizedSize
  **/
  @Schema(description = "")
  public Long getRecycleLocalUtilizedSize() {
    return recycleLocalUtilizedSize;
  }

  public void setRecycleLocalUtilizedSize(Long recycleLocalUtilizedSize) {
    this.recycleLocalUtilizedSize = recycleLocalUtilizedSize;
  }

  public OspUserStat totalTxBytes(Long totalTxBytes) {
    this.totalTxBytes = totalTxBytes;
    return this;
  }

   /**
   * Get totalTxBytes
   * @return totalTxBytes
  **/
  @Schema(description = "")
  public Long getTotalTxBytes() {
    return totalTxBytes;
  }

  public void setTotalTxBytes(Long totalTxBytes) {
    this.totalTxBytes = totalTxBytes;
  }

  public OspUserStat objExpiredOpsPm(Double objExpiredOpsPm) {
    this.objExpiredOpsPm = objExpiredOpsPm;
    return this;
  }

   /**
   * Get objExpiredOpsPm
   * @return objExpiredOpsPm
  **/
  @Schema(description = "")
  public Double getObjExpiredOpsPm() {
    return objExpiredOpsPm;
  }

  public void setObjExpiredOpsPm(Double objExpiredOpsPm) {
    this.objExpiredOpsPm = objExpiredOpsPm;
  }

  public OspUserStat cacheUtilizedSize(Long cacheUtilizedSize) {
    this.cacheUtilizedSize = cacheUtilizedSize;
    return this;
  }

   /**
   * Get cacheUtilizedSize
   * @return cacheUtilizedSize
  **/
  @Schema(description = "")
  public Long getCacheUtilizedSize() {
    return cacheUtilizedSize;
  }

  public void setCacheUtilizedSize(Long cacheUtilizedSize) {
    this.cacheUtilizedSize = cacheUtilizedSize;
  }

  public OspUserStat localAllocatedSize(Long localAllocatedSize) {
    this.localAllocatedSize = localAllocatedSize;
    return this;
  }

   /**
   * Get localAllocatedSize
   * @return localAllocatedSize
  **/
  @Schema(description = "")
  public Long getLocalAllocatedSize() {
    return localAllocatedSize;
  }

  public void setLocalAllocatedSize(Long localAllocatedSize) {
    this.localAllocatedSize = localAllocatedSize;
  }

  public OspUserStat create(String create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public String getCreate() {
    return create;
  }

  public void setCreate(String create) {
    this.create = create;
  }

  public OspUserStat utilizedSize(Long utilizedSize) {
    this.utilizedSize = utilizedSize;
    return this;
  }

   /**
   * Get utilizedSize
   * @return utilizedSize
  **/
  @Schema(description = "")
  public Long getUtilizedSize() {
    return utilizedSize;
  }

  public void setUtilizedSize(Long utilizedSize) {
    this.utilizedSize = utilizedSize;
  }

  public OspUserStat totalDelSuccessOps(Long totalDelSuccessOps) {
    this.totalDelSuccessOps = totalDelSuccessOps;
    return this;
  }

   /**
   * Get totalDelSuccessOps
   * @return totalDelSuccessOps
  **/
  @Schema(description = "")
  public Long getTotalDelSuccessOps() {
    return totalDelSuccessOps;
  }

  public void setTotalDelSuccessOps(Long totalDelSuccessOps) {
    this.totalDelSuccessOps = totalDelSuccessOps;
  }

  public OspUserStat originCdnAllocatedObjects(Long originCdnAllocatedObjects) {
    this.originCdnAllocatedObjects = originCdnAllocatedObjects;
    return this;
  }

   /**
   * Get originCdnAllocatedObjects
   * @return originCdnAllocatedObjects
  **/
  @Schema(description = "")
  public Long getOriginCdnAllocatedObjects() {
    return originCdnAllocatedObjects;
  }

  public void setOriginCdnAllocatedObjects(Long originCdnAllocatedObjects) {
    this.originCdnAllocatedObjects = originCdnAllocatedObjects;
  }

  public OspUserStat totalListSuccessOps(Long totalListSuccessOps) {
    this.totalListSuccessOps = totalListSuccessOps;
    return this;
  }

   /**
   * Get totalListSuccessOps
   * @return totalListSuccessOps
  **/
  @Schema(description = "")
  public Long getTotalListSuccessOps() {
    return totalListSuccessOps;
  }

  public void setTotalListSuccessOps(Long totalListSuccessOps) {
    this.totalListSuccessOps = totalListSuccessOps;
  }

  public OspUserStat latencyObjExpired(Long latencyObjExpired) {
    this.latencyObjExpired = latencyObjExpired;
    return this;
  }

   /**
   * Get latencyObjExpired
   * @return latencyObjExpired
  **/
  @Schema(description = "")
  public Long getLatencyObjExpired() {
    return latencyObjExpired;
  }

  public void setLatencyObjExpired(Long latencyObjExpired) {
    this.latencyObjExpired = latencyObjExpired;
  }

  public OspUserStat totalObjExpiredSuccessOps(Long totalObjExpiredSuccessOps) {
    this.totalObjExpiredSuccessOps = totalObjExpiredSuccessOps;
    return this;
  }

   /**
   * Get totalObjExpiredSuccessOps
   * @return totalObjExpiredSuccessOps
  **/
  @Schema(description = "")
  public Long getTotalObjExpiredSuccessOps() {
    return totalObjExpiredSuccessOps;
  }

  public void setTotalObjExpiredSuccessOps(Long totalObjExpiredSuccessOps) {
    this.totalObjExpiredSuccessOps = totalObjExpiredSuccessOps;
  }

  public OspUserStat recycleLocalObjects(Long recycleLocalObjects) {
    this.recycleLocalObjects = recycleLocalObjects;
    return this;
  }

   /**
   * Get recycleLocalObjects
   * @return recycleLocalObjects
  **/
  @Schema(description = "")
  public Long getRecycleLocalObjects() {
    return recycleLocalObjects;
  }

  public void setRecycleLocalObjects(Long recycleLocalObjects) {
    this.recycleLocalObjects = recycleLocalObjects;
  }

  public OspUserStat rxBandwidthKbyte(Double rxBandwidthKbyte) {
    this.rxBandwidthKbyte = rxBandwidthKbyte;
    return this;
  }

   /**
   * Get rxBandwidthKbyte
   * @return rxBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getRxBandwidthKbyte() {
    return rxBandwidthKbyte;
  }

  public void setRxBandwidthKbyte(Double rxBandwidthKbyte) {
    this.rxBandwidthKbyte = rxBandwidthKbyte;
  }

  public OspUserStat totalOpsPm(Double totalOpsPm) {
    this.totalOpsPm = totalOpsPm;
    return this;
  }

   /**
   * Get totalOpsPm
   * @return totalOpsPm
  **/
  @Schema(description = "")
  public Double getTotalOpsPm() {
    return totalOpsPm;
  }

  public void setTotalOpsPm(Double totalOpsPm) {
    this.totalOpsPm = totalOpsPm;
  }

  public OspUserStat recycleLocalSize(Long recycleLocalSize) {
    this.recycleLocalSize = recycleLocalSize;
    return this;
  }

   /**
   * Get recycleLocalSize
   * @return recycleLocalSize
  **/
  @Schema(description = "")
  public Long getRecycleLocalSize() {
    return recycleLocalSize;
  }

  public void setRecycleLocalSize(Long recycleLocalSize) {
    this.recycleLocalSize = recycleLocalSize;
  }

  public OspUserStat totalRxSuccessOps(Long totalRxSuccessOps) {
    this.totalRxSuccessOps = totalRxSuccessOps;
    return this;
  }

   /**
   * Get totalRxSuccessOps
   * @return totalRxSuccessOps
  **/
  @Schema(description = "")
  public Long getTotalRxSuccessOps() {
    return totalRxSuccessOps;
  }

  public void setTotalRxSuccessOps(Long totalRxSuccessOps) {
    this.totalRxSuccessOps = totalRxSuccessOps;
  }

  public OspUserStat recycleExternalSize(Long recycleExternalSize) {
    this.recycleExternalSize = recycleExternalSize;
    return this;
  }

   /**
   * Get recycleExternalSize
   * @return recycleExternalSize
  **/
  @Schema(description = "")
  public Long getRecycleExternalSize() {
    return recycleExternalSize;
  }

  public void setRecycleExternalSize(Long recycleExternalSize) {
    this.recycleExternalSize = recycleExternalSize;
  }

  public OspUserStat delLatencyUs(Double delLatencyUs) {
    this.delLatencyUs = delLatencyUs;
    return this;
  }

   /**
   * Get delLatencyUs
   * @return delLatencyUs
  **/
  @Schema(description = "")
  public Double getDelLatencyUs() {
    return delLatencyUs;
  }

  public void setDelLatencyUs(Double delLatencyUs) {
    this.delLatencyUs = delLatencyUs;
  }

  public OspUserStat totalRxBytes(Long totalRxBytes) {
    this.totalRxBytes = totalRxBytes;
    return this;
  }

   /**
   * Get totalRxBytes
   * @return totalRxBytes
  **/
  @Schema(description = "")
  public Long getTotalRxBytes() {
    return totalRxBytes;
  }

  public void setTotalRxBytes(Long totalRxBytes) {
    this.totalRxBytes = totalRxBytes;
  }

  public OspUserStat externalAllocatedSize(Long externalAllocatedSize) {
    this.externalAllocatedSize = externalAllocatedSize;
    return this;
  }

   /**
   * Get externalAllocatedSize
   * @return externalAllocatedSize
  **/
  @Schema(description = "")
  public Long getExternalAllocatedSize() {
    return externalAllocatedSize;
  }

  public void setExternalAllocatedSize(Long externalAllocatedSize) {
    this.externalAllocatedSize = externalAllocatedSize;
  }

  public OspUserStat localAllocatedObjects(Long localAllocatedObjects) {
    this.localAllocatedObjects = localAllocatedObjects;
    return this;
  }

   /**
   * Get localAllocatedObjects
   * @return localAllocatedObjects
  **/
  @Schema(description = "")
  public Long getLocalAllocatedObjects() {
    return localAllocatedObjects;
  }

  public void setLocalAllocatedObjects(Long localAllocatedObjects) {
    this.localAllocatedObjects = localAllocatedObjects;
  }

  public OspUserStat totalOps(Long totalOps) {
    this.totalOps = totalOps;
    return this;
  }

   /**
   * Get totalOps
   * @return totalOps
  **/
  @Schema(description = "")
  public Long getTotalOps() {
    return totalOps;
  }

  public void setTotalOps(Long totalOps) {
    this.totalOps = totalOps;
  }

  public OspUserStat totalDelOps(Long totalDelOps) {
    this.totalDelOps = totalDelOps;
    return this;
  }

   /**
   * Get totalDelOps
   * @return totalDelOps
  **/
  @Schema(description = "")
  public Long getTotalDelOps() {
    return totalDelOps;
  }

  public void setTotalDelOps(Long totalDelOps) {
    this.totalDelOps = totalDelOps;
  }

  public OspUserStat downLatencyUs(Double downLatencyUs) {
    this.downLatencyUs = downLatencyUs;
    return this;
  }

   /**
   * Get downLatencyUs
   * @return downLatencyUs
  **/
  @Schema(description = "")
  public Double getDownLatencyUs() {
    return downLatencyUs;
  }

  public void setDownLatencyUs(Double downLatencyUs) {
    this.downLatencyUs = downLatencyUs;
  }

  public OspUserStat latencyDown(Long latencyDown) {
    this.latencyDown = latencyDown;
    return this;
  }

   /**
   * Get latencyDown
   * @return latencyDown
  **/
  @Schema(description = "")
  public Long getLatencyDown() {
    return latencyDown;
  }

  public void setLatencyDown(Long latencyDown) {
    this.latencyDown = latencyDown;
  }

  public OspUserStat recycleUtilizedSize(Long recycleUtilizedSize) {
    this.recycleUtilizedSize = recycleUtilizedSize;
    return this;
  }

   /**
   * Get recycleUtilizedSize
   * @return recycleUtilizedSize
  **/
  @Schema(description = "")
  public Long getRecycleUtilizedSize() {
    return recycleUtilizedSize;
  }

  public void setRecycleUtilizedSize(Long recycleUtilizedSize) {
    this.recycleUtilizedSize = recycleUtilizedSize;
  }

  public OspUserStat listOpsPm(Double listOpsPm) {
    this.listOpsPm = listOpsPm;
    return this;
  }

   /**
   * Get listOpsPm
   * @return listOpsPm
  **/
  @Schema(description = "")
  public Double getListOpsPm() {
    return listOpsPm;
  }

  public void setListOpsPm(Double listOpsPm) {
    this.listOpsPm = listOpsPm;
  }

  public OspUserStat externalUtilizedSize(Long externalUtilizedSize) {
    this.externalUtilizedSize = externalUtilizedSize;
    return this;
  }

   /**
   * Get externalUtilizedSize
   * @return externalUtilizedSize
  **/
  @Schema(description = "")
  public Long getExternalUtilizedSize() {
    return externalUtilizedSize;
  }

  public void setExternalUtilizedSize(Long externalUtilizedSize) {
    this.externalUtilizedSize = externalUtilizedSize;
  }

  public OspUserStat txOpsPm(Double txOpsPm) {
    this.txOpsPm = txOpsPm;
    return this;
  }

   /**
   * Get txOpsPm
   * @return txOpsPm
  **/
  @Schema(description = "")
  public Double getTxOpsPm() {
    return txOpsPm;
  }

  public void setTxOpsPm(Double txOpsPm) {
    this.txOpsPm = txOpsPm;
  }

  public OspUserStat txBandwidthKbyte(Double txBandwidthKbyte) {
    this.txBandwidthKbyte = txBandwidthKbyte;
    return this;
  }

   /**
   * Get txBandwidthKbyte
   * @return txBandwidthKbyte
  **/
  @Schema(description = "")
  public Double getTxBandwidthKbyte() {
    return txBandwidthKbyte;
  }

  public void setTxBandwidthKbyte(Double txBandwidthKbyte) {
    this.txBandwidthKbyte = txBandwidthKbyte;
  }

  public OspUserStat delOpsPm(Double delOpsPm) {
    this.delOpsPm = delOpsPm;
    return this;
  }

   /**
   * Get delOpsPm
   * @return delOpsPm
  **/
  @Schema(description = "")
  public Double getDelOpsPm() {
    return delOpsPm;
  }

  public void setDelOpsPm(Double delOpsPm) {
    this.delOpsPm = delOpsPm;
  }

  public OspUserStat originCdnUtilizedSize(Long originCdnUtilizedSize) {
    this.originCdnUtilizedSize = originCdnUtilizedSize;
    return this;
  }

   /**
   * Get originCdnUtilizedSize
   * @return originCdnUtilizedSize
  **/
  @Schema(description = "")
  public Long getOriginCdnUtilizedSize() {
    return originCdnUtilizedSize;
  }

  public void setOriginCdnUtilizedSize(Long originCdnUtilizedSize) {
    this.originCdnUtilizedSize = originCdnUtilizedSize;
  }

  public OspUserStat fastFlowUtilizedSize(Long fastFlowUtilizedSize) {
    this.fastFlowUtilizedSize = fastFlowUtilizedSize;
    return this;
  }

   /**
   * Get fastFlowUtilizedSize
   * @return fastFlowUtilizedSize
  **/
  @Schema(description = "")
  public Long getFastFlowUtilizedSize() {
    return fastFlowUtilizedSize;
  }

  public void setFastFlowUtilizedSize(Long fastFlowUtilizedSize) {
    this.fastFlowUtilizedSize = fastFlowUtilizedSize;
  }

  public OspUserStat upLatencyUs(Double upLatencyUs) {
    this.upLatencyUs = upLatencyUs;
    return this;
  }

   /**
   * Get upLatencyUs
   * @return upLatencyUs
  **/
  @Schema(description = "")
  public Double getUpLatencyUs() {
    return upLatencyUs;
  }

  public void setUpLatencyUs(Double upLatencyUs) {
    this.upLatencyUs = upLatencyUs;
  }

  public OspUserStat allocatedSize(Long allocatedSize) {
    this.allocatedSize = allocatedSize;
    return this;
  }

   /**
   * Get allocatedSize
   * @return allocatedSize
  **/
  @Schema(description = "")
  public Long getAllocatedSize() {
    return allocatedSize;
  }

  public void setAllocatedSize(Long allocatedSize) {
    this.allocatedSize = allocatedSize;
  }

  public OspUserStat totalTxSuccessOps(Long totalTxSuccessOps) {
    this.totalTxSuccessOps = totalTxSuccessOps;
    return this;
  }

   /**
   * Get totalTxSuccessOps
   * @return totalTxSuccessOps
  **/
  @Schema(description = "")
  public Long getTotalTxSuccessOps() {
    return totalTxSuccessOps;
  }

  public void setTotalTxSuccessOps(Long totalTxSuccessOps) {
    this.totalTxSuccessOps = totalTxSuccessOps;
  }

  public OspUserStat latencyUp(Long latencyUp) {
    this.latencyUp = latencyUp;
    return this;
  }

   /**
   * Get latencyUp
   * @return latencyUp
  **/
  @Schema(description = "")
  public Long getLatencyUp() {
    return latencyUp;
  }

  public void setLatencyUp(Long latencyUp) {
    this.latencyUp = latencyUp;
  }

  public OspUserStat recycleExternalUtilizedSize(Long recycleExternalUtilizedSize) {
    this.recycleExternalUtilizedSize = recycleExternalUtilizedSize;
    return this;
  }

   /**
   * Get recycleExternalUtilizedSize
   * @return recycleExternalUtilizedSize
  **/
  @Schema(description = "")
  public Long getRecycleExternalUtilizedSize() {
    return recycleExternalUtilizedSize;
  }

  public void setRecycleExternalUtilizedSize(Long recycleExternalUtilizedSize) {
    this.recycleExternalUtilizedSize = recycleExternalUtilizedSize;
  }

  public OspUserStat cacheAllocatedObjects(Long cacheAllocatedObjects) {
    this.cacheAllocatedObjects = cacheAllocatedObjects;
    return this;
  }

   /**
   * Get cacheAllocatedObjects
   * @return cacheAllocatedObjects
  **/
  @Schema(description = "")
  public Long getCacheAllocatedObjects() {
    return cacheAllocatedObjects;
  }

  public void setCacheAllocatedObjects(Long cacheAllocatedObjects) {
    this.cacheAllocatedObjects = cacheAllocatedObjects;
  }

  public OspUserStat totalListOps(Long totalListOps) {
    this.totalListOps = totalListOps;
    return this;
  }

   /**
   * Get totalListOps
   * @return totalListOps
  **/
  @Schema(description = "")
  public Long getTotalListOps() {
    return totalListOps;
  }

  public void setTotalListOps(Long totalListOps) {
    this.totalListOps = totalListOps;
  }

  public OspUserStat recycleSize(Long recycleSize) {
    this.recycleSize = recycleSize;
    return this;
  }

   /**
   * Get recycleSize
   * @return recycleSize
  **/
  @Schema(description = "")
  public Long getRecycleSize() {
    return recycleSize;
  }

  public void setRecycleSize(Long recycleSize) {
    this.recycleSize = recycleSize;
  }

  public OspUserStat objExpiredLatencyUs(Double objExpiredLatencyUs) {
    this.objExpiredLatencyUs = objExpiredLatencyUs;
    return this;
  }

   /**
   * Get objExpiredLatencyUs
   * @return objExpiredLatencyUs
  **/
  @Schema(description = "")
  public Double getObjExpiredLatencyUs() {
    return objExpiredLatencyUs;
  }

  public void setObjExpiredLatencyUs(Double objExpiredLatencyUs) {
    this.objExpiredLatencyUs = objExpiredLatencyUs;
  }

  public OspUserStat totalTxOps(Long totalTxOps) {
    this.totalTxOps = totalTxOps;
    return this;
  }

   /**
   * Get totalTxOps
   * @return totalTxOps
  **/
  @Schema(description = "")
  public Long getTotalTxOps() {
    return totalTxOps;
  }

  public void setTotalTxOps(Long totalTxOps) {
    this.totalTxOps = totalTxOps;
  }

  public OspUserStat recycleObjects(Long recycleObjects) {
    this.recycleObjects = recycleObjects;
    return this;
  }

   /**
   * Get recycleObjects
   * @return recycleObjects
  **/
  @Schema(description = "")
  public Long getRecycleObjects() {
    return recycleObjects;
  }

  public void setRecycleObjects(Long recycleObjects) {
    this.recycleObjects = recycleObjects;
  }

  public OspUserStat externalAllocatedObjects(Long externalAllocatedObjects) {
    this.externalAllocatedObjects = externalAllocatedObjects;
    return this;
  }

   /**
   * Get externalAllocatedObjects
   * @return externalAllocatedObjects
  **/
  @Schema(description = "")
  public Long getExternalAllocatedObjects() {
    return externalAllocatedObjects;
  }

  public void setExternalAllocatedObjects(Long externalAllocatedObjects) {
    this.externalAllocatedObjects = externalAllocatedObjects;
  }

  public OspUserStat storageClasses(OspStorageClassStat storageClasses) {
    this.storageClasses = storageClasses;
    return this;
  }

   /**
   * Get storageClasses
   * @return storageClasses
  **/
  @Schema(description = "")
  public OspStorageClassStat getStorageClasses() {
    return storageClasses;
  }

  public void setStorageClasses(OspStorageClassStat storageClasses) {
    this.storageClasses = storageClasses;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OspUserStat ospUserStat = (OspUserStat) o;
    return Objects.equals(this.cacheAllocatedSize, ospUserStat.cacheAllocatedSize) &&
        Objects.equals(this.fastFlowAllocatedObjects, ospUserStat.fastFlowAllocatedObjects) &&
        Objects.equals(this.rxOpsPm, ospUserStat.rxOpsPm) &&
        Objects.equals(this.latencyDel, ospUserStat.latencyDel) &&
        Objects.equals(this.originCdnAllocatedSize, ospUserStat.originCdnAllocatedSize) &&
        Objects.equals(this.recycleExternalObjects, ospUserStat.recycleExternalObjects) &&
        Objects.equals(this.fastFlowAllocatedSize, ospUserStat.fastFlowAllocatedSize) &&
        Objects.equals(this.localUtilizedSize, ospUserStat.localUtilizedSize) &&
        Objects.equals(this.totalObjExpiredOps, ospUserStat.totalObjExpiredOps) &&
        Objects.equals(this.zoneStats, ospUserStat.zoneStats) &&
        Objects.equals(this.totalRxOps, ospUserStat.totalRxOps) &&
        Objects.equals(this.latencyList, ospUserStat.latencyList) &&
        Objects.equals(this.listLatencyUs, ospUserStat.listLatencyUs) &&
        Objects.equals(this.allocatedObjects, ospUserStat.allocatedObjects) &&
        Objects.equals(this.recycleLocalUtilizedSize, ospUserStat.recycleLocalUtilizedSize) &&
        Objects.equals(this.totalTxBytes, ospUserStat.totalTxBytes) &&
        Objects.equals(this.objExpiredOpsPm, ospUserStat.objExpiredOpsPm) &&
        Objects.equals(this.cacheUtilizedSize, ospUserStat.cacheUtilizedSize) &&
        Objects.equals(this.localAllocatedSize, ospUserStat.localAllocatedSize) &&
        Objects.equals(this.create, ospUserStat.create) &&
        Objects.equals(this.utilizedSize, ospUserStat.utilizedSize) &&
        Objects.equals(this.totalDelSuccessOps, ospUserStat.totalDelSuccessOps) &&
        Objects.equals(this.originCdnAllocatedObjects, ospUserStat.originCdnAllocatedObjects) &&
        Objects.equals(this.totalListSuccessOps, ospUserStat.totalListSuccessOps) &&
        Objects.equals(this.latencyObjExpired, ospUserStat.latencyObjExpired) &&
        Objects.equals(this.totalObjExpiredSuccessOps, ospUserStat.totalObjExpiredSuccessOps) &&
        Objects.equals(this.recycleLocalObjects, ospUserStat.recycleLocalObjects) &&
        Objects.equals(this.rxBandwidthKbyte, ospUserStat.rxBandwidthKbyte) &&
        Objects.equals(this.totalOpsPm, ospUserStat.totalOpsPm) &&
        Objects.equals(this.recycleLocalSize, ospUserStat.recycleLocalSize) &&
        Objects.equals(this.totalRxSuccessOps, ospUserStat.totalRxSuccessOps) &&
        Objects.equals(this.recycleExternalSize, ospUserStat.recycleExternalSize) &&
        Objects.equals(this.delLatencyUs, ospUserStat.delLatencyUs) &&
        Objects.equals(this.totalRxBytes, ospUserStat.totalRxBytes) &&
        Objects.equals(this.externalAllocatedSize, ospUserStat.externalAllocatedSize) &&
        Objects.equals(this.localAllocatedObjects, ospUserStat.localAllocatedObjects) &&
        Objects.equals(this.totalOps, ospUserStat.totalOps) &&
        Objects.equals(this.totalDelOps, ospUserStat.totalDelOps) &&
        Objects.equals(this.downLatencyUs, ospUserStat.downLatencyUs) &&
        Objects.equals(this.latencyDown, ospUserStat.latencyDown) &&
        Objects.equals(this.recycleUtilizedSize, ospUserStat.recycleUtilizedSize) &&
        Objects.equals(this.listOpsPm, ospUserStat.listOpsPm) &&
        Objects.equals(this.externalUtilizedSize, ospUserStat.externalUtilizedSize) &&
        Objects.equals(this.txOpsPm, ospUserStat.txOpsPm) &&
        Objects.equals(this.txBandwidthKbyte, ospUserStat.txBandwidthKbyte) &&
        Objects.equals(this.delOpsPm, ospUserStat.delOpsPm) &&
        Objects.equals(this.originCdnUtilizedSize, ospUserStat.originCdnUtilizedSize) &&
        Objects.equals(this.fastFlowUtilizedSize, ospUserStat.fastFlowUtilizedSize) &&
        Objects.equals(this.upLatencyUs, ospUserStat.upLatencyUs) &&
        Objects.equals(this.allocatedSize, ospUserStat.allocatedSize) &&
        Objects.equals(this.totalTxSuccessOps, ospUserStat.totalTxSuccessOps) &&
        Objects.equals(this.latencyUp, ospUserStat.latencyUp) &&
        Objects.equals(this.recycleExternalUtilizedSize, ospUserStat.recycleExternalUtilizedSize) &&
        Objects.equals(this.cacheAllocatedObjects, ospUserStat.cacheAllocatedObjects) &&
        Objects.equals(this.totalListOps, ospUserStat.totalListOps) &&
        Objects.equals(this.recycleSize, ospUserStat.recycleSize) &&
        Objects.equals(this.objExpiredLatencyUs, ospUserStat.objExpiredLatencyUs) &&
        Objects.equals(this.totalTxOps, ospUserStat.totalTxOps) &&
        Objects.equals(this.recycleObjects, ospUserStat.recycleObjects) &&
        Objects.equals(this.externalAllocatedObjects, ospUserStat.externalAllocatedObjects) &&
        Objects.equals(this.storageClasses, ospUserStat.storageClasses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheAllocatedSize, fastFlowAllocatedObjects, rxOpsPm, latencyDel, originCdnAllocatedSize, recycleExternalObjects, fastFlowAllocatedSize, localUtilizedSize, totalObjExpiredOps, zoneStats, totalRxOps, latencyList, listLatencyUs, allocatedObjects, recycleLocalUtilizedSize, totalTxBytes, objExpiredOpsPm, cacheUtilizedSize, localAllocatedSize, create, utilizedSize, totalDelSuccessOps, originCdnAllocatedObjects, totalListSuccessOps, latencyObjExpired, totalObjExpiredSuccessOps, recycleLocalObjects, rxBandwidthKbyte, totalOpsPm, recycleLocalSize, totalRxSuccessOps, recycleExternalSize, delLatencyUs, totalRxBytes, externalAllocatedSize, localAllocatedObjects, totalOps, totalDelOps, downLatencyUs, latencyDown, recycleUtilizedSize, listOpsPm, externalUtilizedSize, txOpsPm, txBandwidthKbyte, delOpsPm, originCdnUtilizedSize, fastFlowUtilizedSize, upLatencyUs, allocatedSize, totalTxSuccessOps, latencyUp, recycleExternalUtilizedSize, cacheAllocatedObjects, totalListOps, recycleSize, objExpiredLatencyUs, totalTxOps, recycleObjects, externalAllocatedObjects, storageClasses);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OspUserStat {\n");
    
    sb.append("    cacheAllocatedSize: ").append(toIndentedString(cacheAllocatedSize)).append("\n");
    sb.append("    fastFlowAllocatedObjects: ").append(toIndentedString(fastFlowAllocatedObjects)).append("\n");
    sb.append("    rxOpsPm: ").append(toIndentedString(rxOpsPm)).append("\n");
    sb.append("    latencyDel: ").append(toIndentedString(latencyDel)).append("\n");
    sb.append("    originCdnAllocatedSize: ").append(toIndentedString(originCdnAllocatedSize)).append("\n");
    sb.append("    recycleExternalObjects: ").append(toIndentedString(recycleExternalObjects)).append("\n");
    sb.append("    fastFlowAllocatedSize: ").append(toIndentedString(fastFlowAllocatedSize)).append("\n");
    sb.append("    localUtilizedSize: ").append(toIndentedString(localUtilizedSize)).append("\n");
    sb.append("    totalObjExpiredOps: ").append(toIndentedString(totalObjExpiredOps)).append("\n");
    sb.append("    zoneStats: ").append(toIndentedString(zoneStats)).append("\n");
    sb.append("    totalRxOps: ").append(toIndentedString(totalRxOps)).append("\n");
    sb.append("    latencyList: ").append(toIndentedString(latencyList)).append("\n");
    sb.append("    listLatencyUs: ").append(toIndentedString(listLatencyUs)).append("\n");
    sb.append("    allocatedObjects: ").append(toIndentedString(allocatedObjects)).append("\n");
    sb.append("    recycleLocalUtilizedSize: ").append(toIndentedString(recycleLocalUtilizedSize)).append("\n");
    sb.append("    totalTxBytes: ").append(toIndentedString(totalTxBytes)).append("\n");
    sb.append("    objExpiredOpsPm: ").append(toIndentedString(objExpiredOpsPm)).append("\n");
    sb.append("    cacheUtilizedSize: ").append(toIndentedString(cacheUtilizedSize)).append("\n");
    sb.append("    localAllocatedSize: ").append(toIndentedString(localAllocatedSize)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    utilizedSize: ").append(toIndentedString(utilizedSize)).append("\n");
    sb.append("    totalDelSuccessOps: ").append(toIndentedString(totalDelSuccessOps)).append("\n");
    sb.append("    originCdnAllocatedObjects: ").append(toIndentedString(originCdnAllocatedObjects)).append("\n");
    sb.append("    totalListSuccessOps: ").append(toIndentedString(totalListSuccessOps)).append("\n");
    sb.append("    latencyObjExpired: ").append(toIndentedString(latencyObjExpired)).append("\n");
    sb.append("    totalObjExpiredSuccessOps: ").append(toIndentedString(totalObjExpiredSuccessOps)).append("\n");
    sb.append("    recycleLocalObjects: ").append(toIndentedString(recycleLocalObjects)).append("\n");
    sb.append("    rxBandwidthKbyte: ").append(toIndentedString(rxBandwidthKbyte)).append("\n");
    sb.append("    totalOpsPm: ").append(toIndentedString(totalOpsPm)).append("\n");
    sb.append("    recycleLocalSize: ").append(toIndentedString(recycleLocalSize)).append("\n");
    sb.append("    totalRxSuccessOps: ").append(toIndentedString(totalRxSuccessOps)).append("\n");
    sb.append("    recycleExternalSize: ").append(toIndentedString(recycleExternalSize)).append("\n");
    sb.append("    delLatencyUs: ").append(toIndentedString(delLatencyUs)).append("\n");
    sb.append("    totalRxBytes: ").append(toIndentedString(totalRxBytes)).append("\n");
    sb.append("    externalAllocatedSize: ").append(toIndentedString(externalAllocatedSize)).append("\n");
    sb.append("    localAllocatedObjects: ").append(toIndentedString(localAllocatedObjects)).append("\n");
    sb.append("    totalOps: ").append(toIndentedString(totalOps)).append("\n");
    sb.append("    totalDelOps: ").append(toIndentedString(totalDelOps)).append("\n");
    sb.append("    downLatencyUs: ").append(toIndentedString(downLatencyUs)).append("\n");
    sb.append("    latencyDown: ").append(toIndentedString(latencyDown)).append("\n");
    sb.append("    recycleUtilizedSize: ").append(toIndentedString(recycleUtilizedSize)).append("\n");
    sb.append("    listOpsPm: ").append(toIndentedString(listOpsPm)).append("\n");
    sb.append("    externalUtilizedSize: ").append(toIndentedString(externalUtilizedSize)).append("\n");
    sb.append("    txOpsPm: ").append(toIndentedString(txOpsPm)).append("\n");
    sb.append("    txBandwidthKbyte: ").append(toIndentedString(txBandwidthKbyte)).append("\n");
    sb.append("    delOpsPm: ").append(toIndentedString(delOpsPm)).append("\n");
    sb.append("    originCdnUtilizedSize: ").append(toIndentedString(originCdnUtilizedSize)).append("\n");
    sb.append("    fastFlowUtilizedSize: ").append(toIndentedString(fastFlowUtilizedSize)).append("\n");
    sb.append("    upLatencyUs: ").append(toIndentedString(upLatencyUs)).append("\n");
    sb.append("    allocatedSize: ").append(toIndentedString(allocatedSize)).append("\n");
    sb.append("    totalTxSuccessOps: ").append(toIndentedString(totalTxSuccessOps)).append("\n");
    sb.append("    latencyUp: ").append(toIndentedString(latencyUp)).append("\n");
    sb.append("    recycleExternalUtilizedSize: ").append(toIndentedString(recycleExternalUtilizedSize)).append("\n");
    sb.append("    cacheAllocatedObjects: ").append(toIndentedString(cacheAllocatedObjects)).append("\n");
    sb.append("    totalListOps: ").append(toIndentedString(totalListOps)).append("\n");
    sb.append("    recycleSize: ").append(toIndentedString(recycleSize)).append("\n");
    sb.append("    objExpiredLatencyUs: ").append(toIndentedString(objExpiredLatencyUs)).append("\n");
    sb.append("    totalTxOps: ").append(toIndentedString(totalTxOps)).append("\n");
    sb.append("    recycleObjects: ").append(toIndentedString(recycleObjects)).append("\n");
    sb.append("    externalAllocatedObjects: ").append(toIndentedString(externalAllocatedObjects)).append("\n");
    sb.append("    storageClasses: ").append(toIndentedString(storageClasses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
