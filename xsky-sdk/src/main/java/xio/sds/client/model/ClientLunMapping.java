/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.Client;
import xio.sds.client.model.ClusterNestview;
import xio.sds.client.model.Host;
import xio.sds.client.model.LunNestview;
import xio.sds.client.model.TargetNestview;
import xio.sds.client.model.Volume;
/**
 * ClientLunMapping defines a mapping relation with lun and client group
 */
@Schema(description = "ClientLunMapping defines a mapping relation with lun and client group")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class ClientLunMapping {
  @SerializedName("block_volume")
  private Volume blockVolume = null;

  @SerializedName("client")
  private Client client = null;

  @SerializedName("cluster")
  private ClusterNestview cluster = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("host")
  private Host host = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("lun")
  private LunNestview lun = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("target")
  private TargetNestview target = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  public ClientLunMapping blockVolume(Volume blockVolume) {
    this.blockVolume = blockVolume;
    return this;
  }

   /**
   * Get blockVolume
   * @return blockVolume
  **/
  @Schema(description = "")
  public Volume getBlockVolume() {
    return blockVolume;
  }

  public void setBlockVolume(Volume blockVolume) {
    this.blockVolume = blockVolume;
  }

  public ClientLunMapping client(Client client) {
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @Schema(description = "")
  public Client getClient() {
    return client;
  }

  public void setClient(Client client) {
    this.client = client;
  }

  public ClientLunMapping cluster(ClusterNestview cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public ClusterNestview getCluster() {
    return cluster;
  }

  public void setCluster(ClusterNestview cluster) {
    this.cluster = cluster;
  }

  public ClientLunMapping create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public ClientLunMapping host(Host host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(description = "")
  public Host getHost() {
    return host;
  }

  public void setHost(Host host) {
    this.host = host;
  }

  public ClientLunMapping id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ClientLunMapping lun(LunNestview lun) {
    this.lun = lun;
    return this;
  }

   /**
   * Get lun
   * @return lun
  **/
  @Schema(description = "")
  public LunNestview getLun() {
    return lun;
  }

  public void setLun(LunNestview lun) {
    this.lun = lun;
  }

  public ClientLunMapping status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public ClientLunMapping target(TargetNestview target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @Schema(description = "")
  public TargetNestview getTarget() {
    return target;
  }

  public void setTarget(TargetNestview target) {
    this.target = target;
  }

  public ClientLunMapping update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientLunMapping clientLunMapping = (ClientLunMapping) o;
    return Objects.equals(this.blockVolume, clientLunMapping.blockVolume) &&
        Objects.equals(this.client, clientLunMapping.client) &&
        Objects.equals(this.cluster, clientLunMapping.cluster) &&
        Objects.equals(this.create, clientLunMapping.create) &&
        Objects.equals(this.host, clientLunMapping.host) &&
        Objects.equals(this.id, clientLunMapping.id) &&
        Objects.equals(this.lun, clientLunMapping.lun) &&
        Objects.equals(this.status, clientLunMapping.status) &&
        Objects.equals(this.target, clientLunMapping.target) &&
        Objects.equals(this.update, clientLunMapping.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockVolume, client, cluster, create, host, id, lun, status, target, update);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientLunMapping {\n");
    
    sb.append("    blockVolume: ").append(toIndentedString(blockVolume)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lun: ").append(toIndentedString(lun)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
