/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import xio.sds.client.model.MatchingRuleMatchCondition;
/**
 * MatchingRule defines a matching rule
 */
@Schema(description = "MatchingRule defines a matching rule")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class MatchingRule {
  @SerializedName("class_id")
  private String classId = null;

  @SerializedName("class_name")
  private String className = null;

  @SerializedName("matching_condition")
  private MatchingRuleMatchCondition matchingCondition = null;

  @SerializedName("prior")
  private Integer prior = null;

  public MatchingRule classId(String classId) {
    this.classId = classId;
    return this;
  }

   /**
   * Get classId
   * @return classId
  **/
  @Schema(description = "")
  public String getClassId() {
    return classId;
  }

  public void setClassId(String classId) {
    this.classId = classId;
  }

  public MatchingRule className(String className) {
    this.className = className;
    return this;
  }

   /**
   * Get className
   * @return className
  **/
  @Schema(description = "")
  public String getClassName() {
    return className;
  }

  public void setClassName(String className) {
    this.className = className;
  }

  public MatchingRule matchingCondition(MatchingRuleMatchCondition matchingCondition) {
    this.matchingCondition = matchingCondition;
    return this;
  }

   /**
   * Get matchingCondition
   * @return matchingCondition
  **/
  @Schema(description = "")
  public MatchingRuleMatchCondition getMatchingCondition() {
    return matchingCondition;
  }

  public void setMatchingCondition(MatchingRuleMatchCondition matchingCondition) {
    this.matchingCondition = matchingCondition;
  }

  public MatchingRule prior(Integer prior) {
    this.prior = prior;
    return this;
  }

   /**
   * Get prior
   * @return prior
  **/
  @Schema(description = "")
  public Integer getPrior() {
    return prior;
  }

  public void setPrior(Integer prior) {
    this.prior = prior;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchingRule matchingRule = (MatchingRule) o;
    return Objects.equals(this.classId, matchingRule.classId) &&
        Objects.equals(this.className, matchingRule.className) &&
        Objects.equals(this.matchingCondition, matchingRule.matchingCondition) &&
        Objects.equals(this.prior, matchingRule.prior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classId, className, matchingCondition, prior);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchingRule {\n");
    
    sb.append("    classId: ").append(toIndentedString(classId)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    matchingCondition: ").append(toIndentedString(matchingCondition)).append("\n");
    sb.append("    prior: ").append(toIndentedString(prior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
