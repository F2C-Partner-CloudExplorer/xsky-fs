/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DirResource
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DirResource {
  @SerializedName("bpp_existed")
  private Boolean bppExisted = null;

  @SerializedName("bpp_on_parent_path_existed")
  private Boolean bppOnParentPathExisted = null;

  @SerializedName("bpp_on_sub_path_existed")
  private Boolean bppOnSubPathExisted = null;

  @SerializedName("bucket_existed")
  private Boolean bucketExisted = null;

  @SerializedName("bucket_on_parent_path_existed")
  private Boolean bucketOnParentPathExisted = null;

  @SerializedName("bucket_on_sub_path_existed")
  private Boolean bucketOnSubPathExisted = null;

  @SerializedName("dir")
  private String dir = null;

  @SerializedName("ftp_share_existed")
  private Boolean ftpShareExisted = null;

  @SerializedName("ftp_share_on_parent_path_existed")
  private Boolean ftpShareOnParentPathExisted = null;

  @SerializedName("ftp_share_on_sub_path_existed")
  private Boolean ftpShareOnSubPathExisted = null;

  @SerializedName("hdfs_existed")
  private Boolean hdfsExisted = null;

  @SerializedName("hdfs_on_parent_path_existed")
  private Boolean hdfsOnParentPathExisted = null;

  @SerializedName("hdfs_on_sub_path_existed")
  private Boolean hdfsOnSubPathExisted = null;

  @SerializedName("nfs_share_existed")
  private Boolean nfsShareExisted = null;

  @SerializedName("nfs_share_on_parent_path_existed")
  private Boolean nfsShareOnParentPathExisted = null;

  @SerializedName("nfs_share_on_sub_path_existed")
  private Boolean nfsShareOnSubPathExisted = null;

  @SerializedName("smb_share_existed")
  private Boolean smbShareExisted = null;

  @SerializedName("smb_share_on_parent_path_existed")
  private Boolean smbShareOnParentPathExisted = null;

  @SerializedName("smb_share_on_sub_path_existed")
  private Boolean smbShareOnSubPathExisted = null;

  @SerializedName("worm_existed")
  private Boolean wormExisted = null;

  @SerializedName("worm_log_existed")
  private Boolean wormLogExisted = null;

  @SerializedName("worm_on_parent_path_existed")
  private Boolean wormOnParentPathExisted = null;

  @SerializedName("worm_on_sub_path_existed")
  private Boolean wormOnSubPathExisted = null;

  public DirResource bppExisted(Boolean bppExisted) {
    this.bppExisted = bppExisted;
    return this;
  }

   /**
   * Get bppExisted
   * @return bppExisted
  **/
  @Schema(description = "")
  public Boolean isBppExisted() {
    return bppExisted;
  }

  public void setBppExisted(Boolean bppExisted) {
    this.bppExisted = bppExisted;
  }

  public DirResource bppOnParentPathExisted(Boolean bppOnParentPathExisted) {
    this.bppOnParentPathExisted = bppOnParentPathExisted;
    return this;
  }

   /**
   * Get bppOnParentPathExisted
   * @return bppOnParentPathExisted
  **/
  @Schema(description = "")
  public Boolean isBppOnParentPathExisted() {
    return bppOnParentPathExisted;
  }

  public void setBppOnParentPathExisted(Boolean bppOnParentPathExisted) {
    this.bppOnParentPathExisted = bppOnParentPathExisted;
  }

  public DirResource bppOnSubPathExisted(Boolean bppOnSubPathExisted) {
    this.bppOnSubPathExisted = bppOnSubPathExisted;
    return this;
  }

   /**
   * BPPExisted means &#x27;BucketParentPath&#x27; in fs_user
   * @return bppOnSubPathExisted
  **/
  @Schema(description = "BPPExisted means 'BucketParentPath' in fs_user")
  public Boolean isBppOnSubPathExisted() {
    return bppOnSubPathExisted;
  }

  public void setBppOnSubPathExisted(Boolean bppOnSubPathExisted) {
    this.bppOnSubPathExisted = bppOnSubPathExisted;
  }

  public DirResource bucketExisted(Boolean bucketExisted) {
    this.bucketExisted = bucketExisted;
    return this;
  }

   /**
   * Get bucketExisted
   * @return bucketExisted
  **/
  @Schema(description = "")
  public Boolean isBucketExisted() {
    return bucketExisted;
  }

  public void setBucketExisted(Boolean bucketExisted) {
    this.bucketExisted = bucketExisted;
  }

  public DirResource bucketOnParentPathExisted(Boolean bucketOnParentPathExisted) {
    this.bucketOnParentPathExisted = bucketOnParentPathExisted;
    return this;
  }

   /**
   * Get bucketOnParentPathExisted
   * @return bucketOnParentPathExisted
  **/
  @Schema(description = "")
  public Boolean isBucketOnParentPathExisted() {
    return bucketOnParentPathExisted;
  }

  public void setBucketOnParentPathExisted(Boolean bucketOnParentPathExisted) {
    this.bucketOnParentPathExisted = bucketOnParentPathExisted;
  }

  public DirResource bucketOnSubPathExisted(Boolean bucketOnSubPathExisted) {
    this.bucketOnSubPathExisted = bucketOnSubPathExisted;
    return this;
  }

   /**
   * Get bucketOnSubPathExisted
   * @return bucketOnSubPathExisted
  **/
  @Schema(description = "")
  public Boolean isBucketOnSubPathExisted() {
    return bucketOnSubPathExisted;
  }

  public void setBucketOnSubPathExisted(Boolean bucketOnSubPathExisted) {
    this.bucketOnSubPathExisted = bucketOnSubPathExisted;
  }

  public DirResource dir(String dir) {
    this.dir = dir;
    return this;
  }

   /**
   * Get dir
   * @return dir
  **/
  @Schema(description = "")
  public String getDir() {
    return dir;
  }

  public void setDir(String dir) {
    this.dir = dir;
  }

  public DirResource ftpShareExisted(Boolean ftpShareExisted) {
    this.ftpShareExisted = ftpShareExisted;
    return this;
  }

   /**
   * Get ftpShareExisted
   * @return ftpShareExisted
  **/
  @Schema(description = "")
  public Boolean isFtpShareExisted() {
    return ftpShareExisted;
  }

  public void setFtpShareExisted(Boolean ftpShareExisted) {
    this.ftpShareExisted = ftpShareExisted;
  }

  public DirResource ftpShareOnParentPathExisted(Boolean ftpShareOnParentPathExisted) {
    this.ftpShareOnParentPathExisted = ftpShareOnParentPathExisted;
    return this;
  }

   /**
   * Get ftpShareOnParentPathExisted
   * @return ftpShareOnParentPathExisted
  **/
  @Schema(description = "")
  public Boolean isFtpShareOnParentPathExisted() {
    return ftpShareOnParentPathExisted;
  }

  public void setFtpShareOnParentPathExisted(Boolean ftpShareOnParentPathExisted) {
    this.ftpShareOnParentPathExisted = ftpShareOnParentPathExisted;
  }

  public DirResource ftpShareOnSubPathExisted(Boolean ftpShareOnSubPathExisted) {
    this.ftpShareOnSubPathExisted = ftpShareOnSubPathExisted;
    return this;
  }

   /**
   * Get ftpShareOnSubPathExisted
   * @return ftpShareOnSubPathExisted
  **/
  @Schema(description = "")
  public Boolean isFtpShareOnSubPathExisted() {
    return ftpShareOnSubPathExisted;
  }

  public void setFtpShareOnSubPathExisted(Boolean ftpShareOnSubPathExisted) {
    this.ftpShareOnSubPathExisted = ftpShareOnSubPathExisted;
  }

  public DirResource hdfsExisted(Boolean hdfsExisted) {
    this.hdfsExisted = hdfsExisted;
    return this;
  }

   /**
   * Get hdfsExisted
   * @return hdfsExisted
  **/
  @Schema(description = "")
  public Boolean isHdfsExisted() {
    return hdfsExisted;
  }

  public void setHdfsExisted(Boolean hdfsExisted) {
    this.hdfsExisted = hdfsExisted;
  }

  public DirResource hdfsOnParentPathExisted(Boolean hdfsOnParentPathExisted) {
    this.hdfsOnParentPathExisted = hdfsOnParentPathExisted;
    return this;
  }

   /**
   * Get hdfsOnParentPathExisted
   * @return hdfsOnParentPathExisted
  **/
  @Schema(description = "")
  public Boolean isHdfsOnParentPathExisted() {
    return hdfsOnParentPathExisted;
  }

  public void setHdfsOnParentPathExisted(Boolean hdfsOnParentPathExisted) {
    this.hdfsOnParentPathExisted = hdfsOnParentPathExisted;
  }

  public DirResource hdfsOnSubPathExisted(Boolean hdfsOnSubPathExisted) {
    this.hdfsOnSubPathExisted = hdfsOnSubPathExisted;
    return this;
  }

   /**
   * Get hdfsOnSubPathExisted
   * @return hdfsOnSubPathExisted
  **/
  @Schema(description = "")
  public Boolean isHdfsOnSubPathExisted() {
    return hdfsOnSubPathExisted;
  }

  public void setHdfsOnSubPathExisted(Boolean hdfsOnSubPathExisted) {
    this.hdfsOnSubPathExisted = hdfsOnSubPathExisted;
  }

  public DirResource nfsShareExisted(Boolean nfsShareExisted) {
    this.nfsShareExisted = nfsShareExisted;
    return this;
  }

   /**
   * Get nfsShareExisted
   * @return nfsShareExisted
  **/
  @Schema(description = "")
  public Boolean isNfsShareExisted() {
    return nfsShareExisted;
  }

  public void setNfsShareExisted(Boolean nfsShareExisted) {
    this.nfsShareExisted = nfsShareExisted;
  }

  public DirResource nfsShareOnParentPathExisted(Boolean nfsShareOnParentPathExisted) {
    this.nfsShareOnParentPathExisted = nfsShareOnParentPathExisted;
    return this;
  }

   /**
   * Get nfsShareOnParentPathExisted
   * @return nfsShareOnParentPathExisted
  **/
  @Schema(description = "")
  public Boolean isNfsShareOnParentPathExisted() {
    return nfsShareOnParentPathExisted;
  }

  public void setNfsShareOnParentPathExisted(Boolean nfsShareOnParentPathExisted) {
    this.nfsShareOnParentPathExisted = nfsShareOnParentPathExisted;
  }

  public DirResource nfsShareOnSubPathExisted(Boolean nfsShareOnSubPathExisted) {
    this.nfsShareOnSubPathExisted = nfsShareOnSubPathExisted;
    return this;
  }

   /**
   * Get nfsShareOnSubPathExisted
   * @return nfsShareOnSubPathExisted
  **/
  @Schema(description = "")
  public Boolean isNfsShareOnSubPathExisted() {
    return nfsShareOnSubPathExisted;
  }

  public void setNfsShareOnSubPathExisted(Boolean nfsShareOnSubPathExisted) {
    this.nfsShareOnSubPathExisted = nfsShareOnSubPathExisted;
  }

  public DirResource smbShareExisted(Boolean smbShareExisted) {
    this.smbShareExisted = smbShareExisted;
    return this;
  }

   /**
   * Get smbShareExisted
   * @return smbShareExisted
  **/
  @Schema(description = "")
  public Boolean isSmbShareExisted() {
    return smbShareExisted;
  }

  public void setSmbShareExisted(Boolean smbShareExisted) {
    this.smbShareExisted = smbShareExisted;
  }

  public DirResource smbShareOnParentPathExisted(Boolean smbShareOnParentPathExisted) {
    this.smbShareOnParentPathExisted = smbShareOnParentPathExisted;
    return this;
  }

   /**
   * Get smbShareOnParentPathExisted
   * @return smbShareOnParentPathExisted
  **/
  @Schema(description = "")
  public Boolean isSmbShareOnParentPathExisted() {
    return smbShareOnParentPathExisted;
  }

  public void setSmbShareOnParentPathExisted(Boolean smbShareOnParentPathExisted) {
    this.smbShareOnParentPathExisted = smbShareOnParentPathExisted;
  }

  public DirResource smbShareOnSubPathExisted(Boolean smbShareOnSubPathExisted) {
    this.smbShareOnSubPathExisted = smbShareOnSubPathExisted;
    return this;
  }

   /**
   * Get smbShareOnSubPathExisted
   * @return smbShareOnSubPathExisted
  **/
  @Schema(description = "")
  public Boolean isSmbShareOnSubPathExisted() {
    return smbShareOnSubPathExisted;
  }

  public void setSmbShareOnSubPathExisted(Boolean smbShareOnSubPathExisted) {
    this.smbShareOnSubPathExisted = smbShareOnSubPathExisted;
  }

  public DirResource wormExisted(Boolean wormExisted) {
    this.wormExisted = wormExisted;
    return this;
  }

   /**
   * Get wormExisted
   * @return wormExisted
  **/
  @Schema(description = "")
  public Boolean isWormExisted() {
    return wormExisted;
  }

  public void setWormExisted(Boolean wormExisted) {
    this.wormExisted = wormExisted;
  }

  public DirResource wormLogExisted(Boolean wormLogExisted) {
    this.wormLogExisted = wormLogExisted;
    return this;
  }

   /**
   * Get wormLogExisted
   * @return wormLogExisted
  **/
  @Schema(description = "")
  public Boolean isWormLogExisted() {
    return wormLogExisted;
  }

  public void setWormLogExisted(Boolean wormLogExisted) {
    this.wormLogExisted = wormLogExisted;
  }

  public DirResource wormOnParentPathExisted(Boolean wormOnParentPathExisted) {
    this.wormOnParentPathExisted = wormOnParentPathExisted;
    return this;
  }

   /**
   * Get wormOnParentPathExisted
   * @return wormOnParentPathExisted
  **/
  @Schema(description = "")
  public Boolean isWormOnParentPathExisted() {
    return wormOnParentPathExisted;
  }

  public void setWormOnParentPathExisted(Boolean wormOnParentPathExisted) {
    this.wormOnParentPathExisted = wormOnParentPathExisted;
  }

  public DirResource wormOnSubPathExisted(Boolean wormOnSubPathExisted) {
    this.wormOnSubPathExisted = wormOnSubPathExisted;
    return this;
  }

   /**
   * Get wormOnSubPathExisted
   * @return wormOnSubPathExisted
  **/
  @Schema(description = "")
  public Boolean isWormOnSubPathExisted() {
    return wormOnSubPathExisted;
  }

  public void setWormOnSubPathExisted(Boolean wormOnSubPathExisted) {
    this.wormOnSubPathExisted = wormOnSubPathExisted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirResource dirResource = (DirResource) o;
    return Objects.equals(this.bppExisted, dirResource.bppExisted) &&
        Objects.equals(this.bppOnParentPathExisted, dirResource.bppOnParentPathExisted) &&
        Objects.equals(this.bppOnSubPathExisted, dirResource.bppOnSubPathExisted) &&
        Objects.equals(this.bucketExisted, dirResource.bucketExisted) &&
        Objects.equals(this.bucketOnParentPathExisted, dirResource.bucketOnParentPathExisted) &&
        Objects.equals(this.bucketOnSubPathExisted, dirResource.bucketOnSubPathExisted) &&
        Objects.equals(this.dir, dirResource.dir) &&
        Objects.equals(this.ftpShareExisted, dirResource.ftpShareExisted) &&
        Objects.equals(this.ftpShareOnParentPathExisted, dirResource.ftpShareOnParentPathExisted) &&
        Objects.equals(this.ftpShareOnSubPathExisted, dirResource.ftpShareOnSubPathExisted) &&
        Objects.equals(this.hdfsExisted, dirResource.hdfsExisted) &&
        Objects.equals(this.hdfsOnParentPathExisted, dirResource.hdfsOnParentPathExisted) &&
        Objects.equals(this.hdfsOnSubPathExisted, dirResource.hdfsOnSubPathExisted) &&
        Objects.equals(this.nfsShareExisted, dirResource.nfsShareExisted) &&
        Objects.equals(this.nfsShareOnParentPathExisted, dirResource.nfsShareOnParentPathExisted) &&
        Objects.equals(this.nfsShareOnSubPathExisted, dirResource.nfsShareOnSubPathExisted) &&
        Objects.equals(this.smbShareExisted, dirResource.smbShareExisted) &&
        Objects.equals(this.smbShareOnParentPathExisted, dirResource.smbShareOnParentPathExisted) &&
        Objects.equals(this.smbShareOnSubPathExisted, dirResource.smbShareOnSubPathExisted) &&
        Objects.equals(this.wormExisted, dirResource.wormExisted) &&
        Objects.equals(this.wormLogExisted, dirResource.wormLogExisted) &&
        Objects.equals(this.wormOnParentPathExisted, dirResource.wormOnParentPathExisted) &&
        Objects.equals(this.wormOnSubPathExisted, dirResource.wormOnSubPathExisted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bppExisted, bppOnParentPathExisted, bppOnSubPathExisted, bucketExisted, bucketOnParentPathExisted, bucketOnSubPathExisted, dir, ftpShareExisted, ftpShareOnParentPathExisted, ftpShareOnSubPathExisted, hdfsExisted, hdfsOnParentPathExisted, hdfsOnSubPathExisted, nfsShareExisted, nfsShareOnParentPathExisted, nfsShareOnSubPathExisted, smbShareExisted, smbShareOnParentPathExisted, smbShareOnSubPathExisted, wormExisted, wormLogExisted, wormOnParentPathExisted, wormOnSubPathExisted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirResource {\n");
    
    sb.append("    bppExisted: ").append(toIndentedString(bppExisted)).append("\n");
    sb.append("    bppOnParentPathExisted: ").append(toIndentedString(bppOnParentPathExisted)).append("\n");
    sb.append("    bppOnSubPathExisted: ").append(toIndentedString(bppOnSubPathExisted)).append("\n");
    sb.append("    bucketExisted: ").append(toIndentedString(bucketExisted)).append("\n");
    sb.append("    bucketOnParentPathExisted: ").append(toIndentedString(bucketOnParentPathExisted)).append("\n");
    sb.append("    bucketOnSubPathExisted: ").append(toIndentedString(bucketOnSubPathExisted)).append("\n");
    sb.append("    dir: ").append(toIndentedString(dir)).append("\n");
    sb.append("    ftpShareExisted: ").append(toIndentedString(ftpShareExisted)).append("\n");
    sb.append("    ftpShareOnParentPathExisted: ").append(toIndentedString(ftpShareOnParentPathExisted)).append("\n");
    sb.append("    ftpShareOnSubPathExisted: ").append(toIndentedString(ftpShareOnSubPathExisted)).append("\n");
    sb.append("    hdfsExisted: ").append(toIndentedString(hdfsExisted)).append("\n");
    sb.append("    hdfsOnParentPathExisted: ").append(toIndentedString(hdfsOnParentPathExisted)).append("\n");
    sb.append("    hdfsOnSubPathExisted: ").append(toIndentedString(hdfsOnSubPathExisted)).append("\n");
    sb.append("    nfsShareExisted: ").append(toIndentedString(nfsShareExisted)).append("\n");
    sb.append("    nfsShareOnParentPathExisted: ").append(toIndentedString(nfsShareOnParentPathExisted)).append("\n");
    sb.append("    nfsShareOnSubPathExisted: ").append(toIndentedString(nfsShareOnSubPathExisted)).append("\n");
    sb.append("    smbShareExisted: ").append(toIndentedString(smbShareExisted)).append("\n");
    sb.append("    smbShareOnParentPathExisted: ").append(toIndentedString(smbShareOnParentPathExisted)).append("\n");
    sb.append("    smbShareOnSubPathExisted: ").append(toIndentedString(smbShareOnSubPathExisted)).append("\n");
    sb.append("    wormExisted: ").append(toIndentedString(wormExisted)).append("\n");
    sb.append("    wormLogExisted: ").append(toIndentedString(wormLogExisted)).append("\n");
    sb.append("    wormOnParentPathExisted: ").append(toIndentedString(wormOnParentPathExisted)).append("\n");
    sb.append("    wormOnSubPathExisted: ").append(toIndentedString(wormOnSubPathExisted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
