/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.ClusterNestview;
import xio.sds.client.model.DfsNFSShareNestview;
/**
 * DfsNFSShareACL defines model of dfs nfs share ACL +X:model:generate;order_by&#x3D;-ID +X:benchmark:
 */
@Schema(description = "DfsNFSShareACL defines model of dfs nfs share ACL +X:model:generate;order_by=-ID +X:benchmark:")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DfsNFSShareACL {
  @SerializedName("all_squash")
  private Boolean allSquash = null;

  @SerializedName("clients")
  private String clients = null;

  @SerializedName("cluster")
  private ClusterNestview cluster = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("dfs_nfs_share")
  private DfsNFSShareNestview dfsNfsShare = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("permission")
  private String permission = null;

  @SerializedName("root_squash")
  private Boolean rootSquash = null;

  @SerializedName("sync")
  private Boolean sync = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  public DfsNFSShareACL allSquash(Boolean allSquash) {
    this.allSquash = allSquash;
    return this;
  }

   /**
   * Get allSquash
   * @return allSquash
  **/
  @Schema(description = "")
  public Boolean isAllSquash() {
    return allSquash;
  }

  public void setAllSquash(Boolean allSquash) {
    this.allSquash = allSquash;
  }

  public DfsNFSShareACL clients(String clients) {
    this.clients = clients;
    return this;
  }

   /**
   * Get clients
   * @return clients
  **/
  @Schema(description = "")
  public String getClients() {
    return clients;
  }

  public void setClients(String clients) {
    this.clients = clients;
  }

  public DfsNFSShareACL cluster(ClusterNestview cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public ClusterNestview getCluster() {
    return cluster;
  }

  public void setCluster(ClusterNestview cluster) {
    this.cluster = cluster;
  }

  public DfsNFSShareACL create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public DfsNFSShareACL dfsNfsShare(DfsNFSShareNestview dfsNfsShare) {
    this.dfsNfsShare = dfsNfsShare;
    return this;
  }

   /**
   * Get dfsNfsShare
   * @return dfsNfsShare
  **/
  @Schema(description = "")
  public DfsNFSShareNestview getDfsNfsShare() {
    return dfsNfsShare;
  }

  public void setDfsNfsShare(DfsNFSShareNestview dfsNfsShare) {
    this.dfsNfsShare = dfsNfsShare;
  }

  public DfsNFSShareACL id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DfsNFSShareACL permission(String permission) {
    this.permission = permission;
    return this;
  }

   /**
   * Get permission
   * @return permission
  **/
  @Schema(description = "")
  public String getPermission() {
    return permission;
  }

  public void setPermission(String permission) {
    this.permission = permission;
  }

  public DfsNFSShareACL rootSquash(Boolean rootSquash) {
    this.rootSquash = rootSquash;
    return this;
  }

   /**
   * Get rootSquash
   * @return rootSquash
  **/
  @Schema(description = "")
  public Boolean isRootSquash() {
    return rootSquash;
  }

  public void setRootSquash(Boolean rootSquash) {
    this.rootSquash = rootSquash;
  }

  public DfsNFSShareACL sync(Boolean sync) {
    this.sync = sync;
    return this;
  }

   /**
   * Get sync
   * @return sync
  **/
  @Schema(description = "")
  public Boolean isSync() {
    return sync;
  }

  public void setSync(Boolean sync) {
    this.sync = sync;
  }

  public DfsNFSShareACL type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public DfsNFSShareACL update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfsNFSShareACL dfsNFSShareACL = (DfsNFSShareACL) o;
    return Objects.equals(this.allSquash, dfsNFSShareACL.allSquash) &&
        Objects.equals(this.clients, dfsNFSShareACL.clients) &&
        Objects.equals(this.cluster, dfsNFSShareACL.cluster) &&
        Objects.equals(this.create, dfsNFSShareACL.create) &&
        Objects.equals(this.dfsNfsShare, dfsNFSShareACL.dfsNfsShare) &&
        Objects.equals(this.id, dfsNFSShareACL.id) &&
        Objects.equals(this.permission, dfsNFSShareACL.permission) &&
        Objects.equals(this.rootSquash, dfsNFSShareACL.rootSquash) &&
        Objects.equals(this.sync, dfsNFSShareACL.sync) &&
        Objects.equals(this.type, dfsNFSShareACL.type) &&
        Objects.equals(this.update, dfsNFSShareACL.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allSquash, clients, cluster, create, dfsNfsShare, id, permission, rootSquash, sync, type, update);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfsNFSShareACL {\n");
    
    sb.append("    allSquash: ").append(toIndentedString(allSquash)).append("\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    dfsNfsShare: ").append(toIndentedString(dfsNfsShare)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    rootSquash: ").append(toIndentedString(rootSquash)).append("\n");
    sb.append("    sync: ").append(toIndentedString(sync)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
