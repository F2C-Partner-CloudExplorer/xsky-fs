/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import xio.sds.client.model.OspReplicationStatsTarget;
/**
 * OspReplicationStatsBackendVal
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class OspReplicationStatsBackendVal {
  @SerializedName("count")
  private Long count = null;

  @SerializedName("backend_id")
  private Long backendId = null;

  @SerializedName("targets")
  private List<OspReplicationStatsTarget> targets = null;

  @SerializedName("size")
  private Long size = null;

  public OspReplicationStatsBackendVal count(Long count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @Schema(description = "")
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }

  public OspReplicationStatsBackendVal backendId(Long backendId) {
    this.backendId = backendId;
    return this;
  }

   /**
   * Get backendId
   * @return backendId
  **/
  @Schema(description = "")
  public Long getBackendId() {
    return backendId;
  }

  public void setBackendId(Long backendId) {
    this.backendId = backendId;
  }

  public OspReplicationStatsBackendVal targets(List<OspReplicationStatsTarget> targets) {
    this.targets = targets;
    return this;
  }

  public OspReplicationStatsBackendVal addTargetsItem(OspReplicationStatsTarget targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<OspReplicationStatsTarget>();
    }
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * Get targets
   * @return targets
  **/
  @Schema(description = "")
  public List<OspReplicationStatsTarget> getTargets() {
    return targets;
  }

  public void setTargets(List<OspReplicationStatsTarget> targets) {
    this.targets = targets;
  }

  public OspReplicationStatsBackendVal size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OspReplicationStatsBackendVal ospReplicationStatsBackendVal = (OspReplicationStatsBackendVal) o;
    return Objects.equals(this.count, ospReplicationStatsBackendVal.count) &&
        Objects.equals(this.backendId, ospReplicationStatsBackendVal.backendId) &&
        Objects.equals(this.targets, ospReplicationStatsBackendVal.targets) &&
        Objects.equals(this.size, ospReplicationStatsBackendVal.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, backendId, targets, size);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OspReplicationStatsBackendVal {\n");
    
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    backendId: ").append(toIndentedString(backendId)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
