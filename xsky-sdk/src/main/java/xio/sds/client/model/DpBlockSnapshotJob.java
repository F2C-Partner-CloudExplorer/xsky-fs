/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.Cluster;
import xio.sds.client.model.DpBlockSnapshotPolicyNestview;
import xio.sds.client.model.SnapshotNestview;
import xio.sds.client.model.VolumeNestview;
/**
 * DpBlockSnapshotJob is one execution of a dp block snapshot plan
 */
@Schema(description = "DpBlockSnapshotJob is one execution of a dp block snapshot plan")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DpBlockSnapshotJob {
  @SerializedName("block_snapshot")
  private SnapshotNestview blockSnapshot = null;

  @SerializedName("block_volume")
  private VolumeNestview blockVolume = null;

  @SerializedName("block_volume_size")
  private Long blockVolumeSize = null;

  @SerializedName("cluster")
  private Cluster cluster = null;

  @SerializedName("diff_type")
  private String diffType = null;

  @SerializedName("dp_block_snapshot_policy")
  private DpBlockSnapshotPolicyNestview dpBlockSnapshotPolicy = null;

  @SerializedName("finished_at")
  private OffsetDateTime finishedAt = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("progress")
  private Double progress = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("started_at")
  private OffsetDateTime startedAt = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  public DpBlockSnapshotJob blockSnapshot(SnapshotNestview blockSnapshot) {
    this.blockSnapshot = blockSnapshot;
    return this;
  }

   /**
   * Get blockSnapshot
   * @return blockSnapshot
  **/
  @Schema(description = "")
  public SnapshotNestview getBlockSnapshot() {
    return blockSnapshot;
  }

  public void setBlockSnapshot(SnapshotNestview blockSnapshot) {
    this.blockSnapshot = blockSnapshot;
  }

  public DpBlockSnapshotJob blockVolume(VolumeNestview blockVolume) {
    this.blockVolume = blockVolume;
    return this;
  }

   /**
   * Get blockVolume
   * @return blockVolume
  **/
  @Schema(description = "")
  public VolumeNestview getBlockVolume() {
    return blockVolume;
  }

  public void setBlockVolume(VolumeNestview blockVolume) {
    this.blockVolume = blockVolume;
  }

  public DpBlockSnapshotJob blockVolumeSize(Long blockVolumeSize) {
    this.blockVolumeSize = blockVolumeSize;
    return this;
  }

   /**
   * Get blockVolumeSize
   * @return blockVolumeSize
  **/
  @Schema(description = "")
  public Long getBlockVolumeSize() {
    return blockVolumeSize;
  }

  public void setBlockVolumeSize(Long blockVolumeSize) {
    this.blockVolumeSize = blockVolumeSize;
  }

  public DpBlockSnapshotJob cluster(Cluster cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public Cluster getCluster() {
    return cluster;
  }

  public void setCluster(Cluster cluster) {
    this.cluster = cluster;
  }

  public DpBlockSnapshotJob diffType(String diffType) {
    this.diffType = diffType;
    return this;
  }

   /**
   * Get diffType
   * @return diffType
  **/
  @Schema(description = "")
  public String getDiffType() {
    return diffType;
  }

  public void setDiffType(String diffType) {
    this.diffType = diffType;
  }

  public DpBlockSnapshotJob dpBlockSnapshotPolicy(DpBlockSnapshotPolicyNestview dpBlockSnapshotPolicy) {
    this.dpBlockSnapshotPolicy = dpBlockSnapshotPolicy;
    return this;
  }

   /**
   * Get dpBlockSnapshotPolicy
   * @return dpBlockSnapshotPolicy
  **/
  @Schema(description = "")
  public DpBlockSnapshotPolicyNestview getDpBlockSnapshotPolicy() {
    return dpBlockSnapshotPolicy;
  }

  public void setDpBlockSnapshotPolicy(DpBlockSnapshotPolicyNestview dpBlockSnapshotPolicy) {
    this.dpBlockSnapshotPolicy = dpBlockSnapshotPolicy;
  }

  public DpBlockSnapshotJob finishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * Get finishedAt
   * @return finishedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }

  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }

  public DpBlockSnapshotJob id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DpBlockSnapshotJob progress(Double progress) {
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * @return progress
  **/
  @Schema(description = "")
  public Double getProgress() {
    return progress;
  }

  public void setProgress(Double progress) {
    this.progress = progress;
  }

  public DpBlockSnapshotJob size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public DpBlockSnapshotJob startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Get startedAt
   * @return startedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }

  public DpBlockSnapshotJob status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public DpBlockSnapshotJob updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpBlockSnapshotJob dpBlockSnapshotJob = (DpBlockSnapshotJob) o;
    return Objects.equals(this.blockSnapshot, dpBlockSnapshotJob.blockSnapshot) &&
        Objects.equals(this.blockVolume, dpBlockSnapshotJob.blockVolume) &&
        Objects.equals(this.blockVolumeSize, dpBlockSnapshotJob.blockVolumeSize) &&
        Objects.equals(this.cluster, dpBlockSnapshotJob.cluster) &&
        Objects.equals(this.diffType, dpBlockSnapshotJob.diffType) &&
        Objects.equals(this.dpBlockSnapshotPolicy, dpBlockSnapshotJob.dpBlockSnapshotPolicy) &&
        Objects.equals(this.finishedAt, dpBlockSnapshotJob.finishedAt) &&
        Objects.equals(this.id, dpBlockSnapshotJob.id) &&
        Objects.equals(this.progress, dpBlockSnapshotJob.progress) &&
        Objects.equals(this.size, dpBlockSnapshotJob.size) &&
        Objects.equals(this.startedAt, dpBlockSnapshotJob.startedAt) &&
        Objects.equals(this.status, dpBlockSnapshotJob.status) &&
        Objects.equals(this.updatedAt, dpBlockSnapshotJob.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockSnapshot, blockVolume, blockVolumeSize, cluster, diffType, dpBlockSnapshotPolicy, finishedAt, id, progress, size, startedAt, status, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpBlockSnapshotJob {\n");
    
    sb.append("    blockSnapshot: ").append(toIndentedString(blockSnapshot)).append("\n");
    sb.append("    blockVolume: ").append(toIndentedString(blockVolume)).append("\n");
    sb.append("    blockVolumeSize: ").append(toIndentedString(blockVolumeSize)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    diffType: ").append(toIndentedString(diffType)).append("\n");
    sb.append("    dpBlockSnapshotPolicy: ").append(toIndentedString(dpBlockSnapshotPolicy)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
