/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * VolumeNonIOTask
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class VolumeNonIOTask {
  @SerializedName("ats")
  private Double ats = null;

  @SerializedName("ats_hb")
  private Double atsHb = null;

  @SerializedName("other")
  private Double other = null;

  @SerializedName("unmap")
  private Double unmap = null;

  @SerializedName("write_same")
  private Double writeSame = null;

  @SerializedName("xcopy")
  private Double xcopy = null;

  public VolumeNonIOTask ats(Double ats) {
    this.ats = ats;
    return this;
  }

   /**
   * Get ats
   * @return ats
  **/
  @Schema(description = "")
  public Double getAts() {
    return ats;
  }

  public void setAts(Double ats) {
    this.ats = ats;
  }

  public VolumeNonIOTask atsHb(Double atsHb) {
    this.atsHb = atsHb;
    return this;
  }

   /**
   * Get atsHb
   * @return atsHb
  **/
  @Schema(description = "")
  public Double getAtsHb() {
    return atsHb;
  }

  public void setAtsHb(Double atsHb) {
    this.atsHb = atsHb;
  }

  public VolumeNonIOTask other(Double other) {
    this.other = other;
    return this;
  }

   /**
   * Get other
   * @return other
  **/
  @Schema(description = "")
  public Double getOther() {
    return other;
  }

  public void setOther(Double other) {
    this.other = other;
  }

  public VolumeNonIOTask unmap(Double unmap) {
    this.unmap = unmap;
    return this;
  }

   /**
   * Get unmap
   * @return unmap
  **/
  @Schema(description = "")
  public Double getUnmap() {
    return unmap;
  }

  public void setUnmap(Double unmap) {
    this.unmap = unmap;
  }

  public VolumeNonIOTask writeSame(Double writeSame) {
    this.writeSame = writeSame;
    return this;
  }

   /**
   * Get writeSame
   * @return writeSame
  **/
  @Schema(description = "")
  public Double getWriteSame() {
    return writeSame;
  }

  public void setWriteSame(Double writeSame) {
    this.writeSame = writeSame;
  }

  public VolumeNonIOTask xcopy(Double xcopy) {
    this.xcopy = xcopy;
    return this;
  }

   /**
   * Get xcopy
   * @return xcopy
  **/
  @Schema(description = "")
  public Double getXcopy() {
    return xcopy;
  }

  public void setXcopy(Double xcopy) {
    this.xcopy = xcopy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeNonIOTask volumeNonIOTask = (VolumeNonIOTask) o;
    return Objects.equals(this.ats, volumeNonIOTask.ats) &&
        Objects.equals(this.atsHb, volumeNonIOTask.atsHb) &&
        Objects.equals(this.other, volumeNonIOTask.other) &&
        Objects.equals(this.unmap, volumeNonIOTask.unmap) &&
        Objects.equals(this.writeSame, volumeNonIOTask.writeSame) &&
        Objects.equals(this.xcopy, volumeNonIOTask.xcopy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ats, atsHb, other, unmap, writeSame, xcopy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeNonIOTask {\n");
    
    sb.append("    ats: ").append(toIndentedString(ats)).append("\n");
    sb.append("    atsHb: ").append(toIndentedString(atsHb)).append("\n");
    sb.append("    other: ").append(toIndentedString(other)).append("\n");
    sb.append("    unmap: ").append(toIndentedString(unmap)).append("\n");
    sb.append("    writeSame: ").append(toIndentedString(writeSame)).append("\n");
    sb.append("    xcopy: ").append(toIndentedString(xcopy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
