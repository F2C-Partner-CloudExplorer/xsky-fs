/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.ClusterNestview;
import xio.sds.client.model.ConsistentSnapshotNestview;
import xio.sds.client.model.PoolNestview;
import xio.sds.client.model.RemoteClusterNestview;
import xio.sds.client.model.VolumeGroupSnapshotNestview;
import xio.sds.client.model.VolumeNestview;
/**
 * Snapshot contains all information about a single snapshot
 */
@Schema(description = "Snapshot contains all information about a single snapshot")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class Snapshot {
  @SerializedName("action_status")
  private String actionStatus = null;

  @SerializedName("allocated_size")
  private Long allocatedSize = null;

  @SerializedName("block_consistent_snapshot")
  private ConsistentSnapshotNestview blockConsistentSnapshot = null;

  @SerializedName("block_volume_group_snapshot")
  private VolumeGroupSnapshotNestview blockVolumeGroupSnapshot = null;

  @SerializedName("cloned_block_volume_num")
  private Long clonedBlockVolumeNum = null;

  @SerializedName("cluster")
  private ClusterNestview cluster = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("creator")
  private String creator = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("passive")
  private Boolean passive = null;

  @SerializedName("pool")
  private PoolNestview pool = null;

  @SerializedName("protected")
  private Boolean _protected = null;

  @SerializedName("remote_cluster")
  private RemoteClusterNestview remoteCluster = null;

  @SerializedName("reserved")
  private Boolean reserved = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("snap_name")
  private String snapName = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("uid")
  private String uid = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  @SerializedName("volume")
  private VolumeNestview volume = null;

  public Snapshot actionStatus(String actionStatus) {
    this.actionStatus = actionStatus;
    return this;
  }

   /**
   * Get actionStatus
   * @return actionStatus
  **/
  @Schema(description = "")
  public String getActionStatus() {
    return actionStatus;
  }

  public void setActionStatus(String actionStatus) {
    this.actionStatus = actionStatus;
  }

  public Snapshot allocatedSize(Long allocatedSize) {
    this.allocatedSize = allocatedSize;
    return this;
  }

   /**
   * Get allocatedSize
   * @return allocatedSize
  **/
  @Schema(description = "")
  public Long getAllocatedSize() {
    return allocatedSize;
  }

  public void setAllocatedSize(Long allocatedSize) {
    this.allocatedSize = allocatedSize;
  }

  public Snapshot blockConsistentSnapshot(ConsistentSnapshotNestview blockConsistentSnapshot) {
    this.blockConsistentSnapshot = blockConsistentSnapshot;
    return this;
  }

   /**
   * Get blockConsistentSnapshot
   * @return blockConsistentSnapshot
  **/
  @Schema(description = "")
  public ConsistentSnapshotNestview getBlockConsistentSnapshot() {
    return blockConsistentSnapshot;
  }

  public void setBlockConsistentSnapshot(ConsistentSnapshotNestview blockConsistentSnapshot) {
    this.blockConsistentSnapshot = blockConsistentSnapshot;
  }

  public Snapshot blockVolumeGroupSnapshot(VolumeGroupSnapshotNestview blockVolumeGroupSnapshot) {
    this.blockVolumeGroupSnapshot = blockVolumeGroupSnapshot;
    return this;
  }

   /**
   * Get blockVolumeGroupSnapshot
   * @return blockVolumeGroupSnapshot
  **/
  @Schema(description = "")
  public VolumeGroupSnapshotNestview getBlockVolumeGroupSnapshot() {
    return blockVolumeGroupSnapshot;
  }

  public void setBlockVolumeGroupSnapshot(VolumeGroupSnapshotNestview blockVolumeGroupSnapshot) {
    this.blockVolumeGroupSnapshot = blockVolumeGroupSnapshot;
  }

  public Snapshot clonedBlockVolumeNum(Long clonedBlockVolumeNum) {
    this.clonedBlockVolumeNum = clonedBlockVolumeNum;
    return this;
  }

   /**
   * Get clonedBlockVolumeNum
   * @return clonedBlockVolumeNum
  **/
  @Schema(description = "")
  public Long getClonedBlockVolumeNum() {
    return clonedBlockVolumeNum;
  }

  public void setClonedBlockVolumeNum(Long clonedBlockVolumeNum) {
    this.clonedBlockVolumeNum = clonedBlockVolumeNum;
  }

  public Snapshot cluster(ClusterNestview cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public ClusterNestview getCluster() {
    return cluster;
  }

  public void setCluster(ClusterNestview cluster) {
    this.cluster = cluster;
  }

  public Snapshot create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public Snapshot creator(String creator) {
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @Schema(description = "")
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }

  public Snapshot description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Snapshot hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Get hidden
   * @return hidden
  **/
  @Schema(description = "")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public Snapshot id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Snapshot name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Snapshot passive(Boolean passive) {
    this.passive = passive;
    return this;
  }

   /**
   * Get passive
   * @return passive
  **/
  @Schema(description = "")
  public Boolean isPassive() {
    return passive;
  }

  public void setPassive(Boolean passive) {
    this.passive = passive;
  }

  public Snapshot pool(PoolNestview pool) {
    this.pool = pool;
    return this;
  }

   /**
   * Get pool
   * @return pool
  **/
  @Schema(description = "")
  public PoolNestview getPool() {
    return pool;
  }

  public void setPool(PoolNestview pool) {
    this.pool = pool;
  }

  public Snapshot _protected(Boolean _protected) {
    this._protected = _protected;
    return this;
  }

   /**
   * Get _protected
   * @return _protected
  **/
  @Schema(description = "")
  public Boolean isProtected() {
    return _protected;
  }

  public void setProtected(Boolean _protected) {
    this._protected = _protected;
  }

  public Snapshot remoteCluster(RemoteClusterNestview remoteCluster) {
    this.remoteCluster = remoteCluster;
    return this;
  }

   /**
   * Get remoteCluster
   * @return remoteCluster
  **/
  @Schema(description = "")
  public RemoteClusterNestview getRemoteCluster() {
    return remoteCluster;
  }

  public void setRemoteCluster(RemoteClusterNestview remoteCluster) {
    this.remoteCluster = remoteCluster;
  }

  public Snapshot reserved(Boolean reserved) {
    this.reserved = reserved;
    return this;
  }

   /**
   * Get reserved
   * @return reserved
  **/
  @Schema(description = "")
  public Boolean isReserved() {
    return reserved;
  }

  public void setReserved(Boolean reserved) {
    this.reserved = reserved;
  }

  public Snapshot size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public Snapshot snapName(String snapName) {
    this.snapName = snapName;
    return this;
  }

   /**
   * Get snapName
   * @return snapName
  **/
  @Schema(description = "")
  public String getSnapName() {
    return snapName;
  }

  public void setSnapName(String snapName) {
    this.snapName = snapName;
  }

  public Snapshot status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public Snapshot uid(String uid) {
    this.uid = uid;
    return this;
  }

   /**
   * Get uid
   * @return uid
  **/
  @Schema(description = "")
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }

  public Snapshot update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }

  public Snapshot volume(VolumeNestview volume) {
    this.volume = volume;
    return this;
  }

   /**
   * Get volume
   * @return volume
  **/
  @Schema(description = "")
  public VolumeNestview getVolume() {
    return volume;
  }

  public void setVolume(VolumeNestview volume) {
    this.volume = volume;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Snapshot snapshot = (Snapshot) o;
    return Objects.equals(this.actionStatus, snapshot.actionStatus) &&
        Objects.equals(this.allocatedSize, snapshot.allocatedSize) &&
        Objects.equals(this.blockConsistentSnapshot, snapshot.blockConsistentSnapshot) &&
        Objects.equals(this.blockVolumeGroupSnapshot, snapshot.blockVolumeGroupSnapshot) &&
        Objects.equals(this.clonedBlockVolumeNum, snapshot.clonedBlockVolumeNum) &&
        Objects.equals(this.cluster, snapshot.cluster) &&
        Objects.equals(this.create, snapshot.create) &&
        Objects.equals(this.creator, snapshot.creator) &&
        Objects.equals(this.description, snapshot.description) &&
        Objects.equals(this.hidden, snapshot.hidden) &&
        Objects.equals(this.id, snapshot.id) &&
        Objects.equals(this.name, snapshot.name) &&
        Objects.equals(this.passive, snapshot.passive) &&
        Objects.equals(this.pool, snapshot.pool) &&
        Objects.equals(this._protected, snapshot._protected) &&
        Objects.equals(this.remoteCluster, snapshot.remoteCluster) &&
        Objects.equals(this.reserved, snapshot.reserved) &&
        Objects.equals(this.size, snapshot.size) &&
        Objects.equals(this.snapName, snapshot.snapName) &&
        Objects.equals(this.status, snapshot.status) &&
        Objects.equals(this.uid, snapshot.uid) &&
        Objects.equals(this.update, snapshot.update) &&
        Objects.equals(this.volume, snapshot.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionStatus, allocatedSize, blockConsistentSnapshot, blockVolumeGroupSnapshot, clonedBlockVolumeNum, cluster, create, creator, description, hidden, id, name, passive, pool, _protected, remoteCluster, reserved, size, snapName, status, uid, update, volume);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Snapshot {\n");
    
    sb.append("    actionStatus: ").append(toIndentedString(actionStatus)).append("\n");
    sb.append("    allocatedSize: ").append(toIndentedString(allocatedSize)).append("\n");
    sb.append("    blockConsistentSnapshot: ").append(toIndentedString(blockConsistentSnapshot)).append("\n");
    sb.append("    blockVolumeGroupSnapshot: ").append(toIndentedString(blockVolumeGroupSnapshot)).append("\n");
    sb.append("    clonedBlockVolumeNum: ").append(toIndentedString(clonedBlockVolumeNum)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    passive: ").append(toIndentedString(passive)).append("\n");
    sb.append("    pool: ").append(toIndentedString(pool)).append("\n");
    sb.append("    _protected: ").append(toIndentedString(_protected)).append("\n");
    sb.append("    remoteCluster: ").append(toIndentedString(remoteCluster)).append("\n");
    sb.append("    reserved: ").append(toIndentedString(reserved)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    snapName: ").append(toIndentedString(snapName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
