/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.ClusterNestview;
/**
 * NetworkDiagnosis defines model of network diagnosis +X:model:generate&#x3D;CRUL;with_detailed
 */
@Schema(description = "NetworkDiagnosis defines model of network diagnosis +X:model:generate=CRUL;with_detailed")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class NetworkDiagnosis {
  @SerializedName("cluster")
  private ClusterNestview cluster = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("diagnose_active_num")
  private Long diagnoseActiveNum = null;

  @SerializedName("diagnose_error_num")
  private Long diagnoseErrorNum = null;

  @SerializedName("diagnose_num")
  private Long diagnoseNum = null;

  @SerializedName("diagnose_warning_num")
  private Long diagnoseWarningNum = null;

  @SerializedName("diagnosing_num")
  private Long diagnosingNum = null;

  @SerializedName("host_num")
  private Long hostNum = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("networks")
  private List<String> networks = null;

  @SerializedName("not_diagnose_num")
  private Long notDiagnoseNum = null;

  @SerializedName("progress")
  private Double progress = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  public NetworkDiagnosis cluster(ClusterNestview cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public ClusterNestview getCluster() {
    return cluster;
  }

  public void setCluster(ClusterNestview cluster) {
    this.cluster = cluster;
  }

  public NetworkDiagnosis create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public NetworkDiagnosis diagnoseActiveNum(Long diagnoseActiveNum) {
    this.diagnoseActiveNum = diagnoseActiveNum;
    return this;
  }

   /**
   * Get diagnoseActiveNum
   * @return diagnoseActiveNum
  **/
  @Schema(description = "")
  public Long getDiagnoseActiveNum() {
    return diagnoseActiveNum;
  }

  public void setDiagnoseActiveNum(Long diagnoseActiveNum) {
    this.diagnoseActiveNum = diagnoseActiveNum;
  }

  public NetworkDiagnosis diagnoseErrorNum(Long diagnoseErrorNum) {
    this.diagnoseErrorNum = diagnoseErrorNum;
    return this;
  }

   /**
   * Get diagnoseErrorNum
   * @return diagnoseErrorNum
  **/
  @Schema(description = "")
  public Long getDiagnoseErrorNum() {
    return diagnoseErrorNum;
  }

  public void setDiagnoseErrorNum(Long diagnoseErrorNum) {
    this.diagnoseErrorNum = diagnoseErrorNum;
  }

  public NetworkDiagnosis diagnoseNum(Long diagnoseNum) {
    this.diagnoseNum = diagnoseNum;
    return this;
  }

   /**
   * Get diagnoseNum
   * @return diagnoseNum
  **/
  @Schema(description = "")
  public Long getDiagnoseNum() {
    return diagnoseNum;
  }

  public void setDiagnoseNum(Long diagnoseNum) {
    this.diagnoseNum = diagnoseNum;
  }

  public NetworkDiagnosis diagnoseWarningNum(Long diagnoseWarningNum) {
    this.diagnoseWarningNum = diagnoseWarningNum;
    return this;
  }

   /**
   * Get diagnoseWarningNum
   * @return diagnoseWarningNum
  **/
  @Schema(description = "")
  public Long getDiagnoseWarningNum() {
    return diagnoseWarningNum;
  }

  public void setDiagnoseWarningNum(Long diagnoseWarningNum) {
    this.diagnoseWarningNum = diagnoseWarningNum;
  }

  public NetworkDiagnosis diagnosingNum(Long diagnosingNum) {
    this.diagnosingNum = diagnosingNum;
    return this;
  }

   /**
   * Get diagnosingNum
   * @return diagnosingNum
  **/
  @Schema(description = "")
  public Long getDiagnosingNum() {
    return diagnosingNum;
  }

  public void setDiagnosingNum(Long diagnosingNum) {
    this.diagnosingNum = diagnosingNum;
  }

  public NetworkDiagnosis hostNum(Long hostNum) {
    this.hostNum = hostNum;
    return this;
  }

   /**
   * Get hostNum
   * @return hostNum
  **/
  @Schema(description = "")
  public Long getHostNum() {
    return hostNum;
  }

  public void setHostNum(Long hostNum) {
    this.hostNum = hostNum;
  }

  public NetworkDiagnosis id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public NetworkDiagnosis networks(List<String> networks) {
    this.networks = networks;
    return this;
  }

  public NetworkDiagnosis addNetworksItem(String networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<String>();
    }
    this.networks.add(networksItem);
    return this;
  }

   /**
   * Get networks
   * @return networks
  **/
  @Schema(description = "")
  public List<String> getNetworks() {
    return networks;
  }

  public void setNetworks(List<String> networks) {
    this.networks = networks;
  }

  public NetworkDiagnosis notDiagnoseNum(Long notDiagnoseNum) {
    this.notDiagnoseNum = notDiagnoseNum;
    return this;
  }

   /**
   * Get notDiagnoseNum
   * @return notDiagnoseNum
  **/
  @Schema(description = "")
  public Long getNotDiagnoseNum() {
    return notDiagnoseNum;
  }

  public void setNotDiagnoseNum(Long notDiagnoseNum) {
    this.notDiagnoseNum = notDiagnoseNum;
  }

  public NetworkDiagnosis progress(Double progress) {
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * @return progress
  **/
  @Schema(description = "")
  public Double getProgress() {
    return progress;
  }

  public void setProgress(Double progress) {
    this.progress = progress;
  }

  public NetworkDiagnosis status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public NetworkDiagnosis update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkDiagnosis networkDiagnosis = (NetworkDiagnosis) o;
    return Objects.equals(this.cluster, networkDiagnosis.cluster) &&
        Objects.equals(this.create, networkDiagnosis.create) &&
        Objects.equals(this.diagnoseActiveNum, networkDiagnosis.diagnoseActiveNum) &&
        Objects.equals(this.diagnoseErrorNum, networkDiagnosis.diagnoseErrorNum) &&
        Objects.equals(this.diagnoseNum, networkDiagnosis.diagnoseNum) &&
        Objects.equals(this.diagnoseWarningNum, networkDiagnosis.diagnoseWarningNum) &&
        Objects.equals(this.diagnosingNum, networkDiagnosis.diagnosingNum) &&
        Objects.equals(this.hostNum, networkDiagnosis.hostNum) &&
        Objects.equals(this.id, networkDiagnosis.id) &&
        Objects.equals(this.networks, networkDiagnosis.networks) &&
        Objects.equals(this.notDiagnoseNum, networkDiagnosis.notDiagnoseNum) &&
        Objects.equals(this.progress, networkDiagnosis.progress) &&
        Objects.equals(this.status, networkDiagnosis.status) &&
        Objects.equals(this.update, networkDiagnosis.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, create, diagnoseActiveNum, diagnoseErrorNum, diagnoseNum, diagnoseWarningNum, diagnosingNum, hostNum, id, networks, notDiagnoseNum, progress, status, update);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkDiagnosis {\n");
    
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    diagnoseActiveNum: ").append(toIndentedString(diagnoseActiveNum)).append("\n");
    sb.append("    diagnoseErrorNum: ").append(toIndentedString(diagnoseErrorNum)).append("\n");
    sb.append("    diagnoseNum: ").append(toIndentedString(diagnoseNum)).append("\n");
    sb.append("    diagnoseWarningNum: ").append(toIndentedString(diagnoseWarningNum)).append("\n");
    sb.append("    diagnosingNum: ").append(toIndentedString(diagnosingNum)).append("\n");
    sb.append("    hostNum: ").append(toIndentedString(hostNum)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    notDiagnoseNum: ").append(toIndentedString(notDiagnoseNum)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
