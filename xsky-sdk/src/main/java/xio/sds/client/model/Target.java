/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.AccessPathNestview;
import xio.sds.client.model.ClusterNestview;
import xio.sds.client.model.HostNestview;
/**
 * Target defines targets of different metric
 */
@Schema(description = "Target defines targets of different metric")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class Target {
  @SerializedName("access_path")
  private AccessPathNestview accessPath = null;

  @SerializedName("board")
  private Long board = null;

  @SerializedName("cluster")
  private ClusterNestview cluster = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("dc_name")
  private String dcName = null;

  @SerializedName("gateway_ips")
  private String gatewayIps = null;

  @SerializedName("host")
  private HostNestview host = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("iqn")
  private String iqn = null;

  @SerializedName("logout")
  private Boolean logout = null;

  @SerializedName("port")
  private Long port = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  public Target accessPath(AccessPathNestview accessPath) {
    this.accessPath = accessPath;
    return this;
  }

   /**
   * Get accessPath
   * @return accessPath
  **/
  @Schema(description = "")
  public AccessPathNestview getAccessPath() {
    return accessPath;
  }

  public void setAccessPath(AccessPathNestview accessPath) {
    this.accessPath = accessPath;
  }

  public Target board(Long board) {
    this.board = board;
    return this;
  }

   /**
   * Get board
   * @return board
  **/
  @Schema(description = "")
  public Long getBoard() {
    return board;
  }

  public void setBoard(Long board) {
    this.board = board;
  }

  public Target cluster(ClusterNestview cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public ClusterNestview getCluster() {
    return cluster;
  }

  public void setCluster(ClusterNestview cluster) {
    this.cluster = cluster;
  }

  public Target create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public Target dcName(String dcName) {
    this.dcName = dcName;
    return this;
  }

   /**
   * Get dcName
   * @return dcName
  **/
  @Schema(description = "")
  public String getDcName() {
    return dcName;
  }

  public void setDcName(String dcName) {
    this.dcName = dcName;
  }

  public Target gatewayIps(String gatewayIps) {
    this.gatewayIps = gatewayIps;
    return this;
  }

   /**
   * Get gatewayIps
   * @return gatewayIps
  **/
  @Schema(description = "")
  public String getGatewayIps() {
    return gatewayIps;
  }

  public void setGatewayIps(String gatewayIps) {
    this.gatewayIps = gatewayIps;
  }

  public Target host(HostNestview host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(description = "")
  public HostNestview getHost() {
    return host;
  }

  public void setHost(HostNestview host) {
    this.host = host;
  }

  public Target id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Target iqn(String iqn) {
    this.iqn = iqn;
    return this;
  }

   /**
   * Get iqn
   * @return iqn
  **/
  @Schema(description = "")
  public String getIqn() {
    return iqn;
  }

  public void setIqn(String iqn) {
    this.iqn = iqn;
  }

  public Target logout(Boolean logout) {
    this.logout = logout;
    return this;
  }

   /**
   * Get logout
   * @return logout
  **/
  @Schema(description = "")
  public Boolean isLogout() {
    return logout;
  }

  public void setLogout(Boolean logout) {
    this.logout = logout;
  }

  public Target port(Long port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @Schema(description = "")
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }

  public Target status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public Target update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Target target = (Target) o;
    return Objects.equals(this.accessPath, target.accessPath) &&
        Objects.equals(this.board, target.board) &&
        Objects.equals(this.cluster, target.cluster) &&
        Objects.equals(this.create, target.create) &&
        Objects.equals(this.dcName, target.dcName) &&
        Objects.equals(this.gatewayIps, target.gatewayIps) &&
        Objects.equals(this.host, target.host) &&
        Objects.equals(this.id, target.id) &&
        Objects.equals(this.iqn, target.iqn) &&
        Objects.equals(this.logout, target.logout) &&
        Objects.equals(this.port, target.port) &&
        Objects.equals(this.status, target.status) &&
        Objects.equals(this.update, target.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessPath, board, cluster, create, dcName, gatewayIps, host, id, iqn, logout, port, status, update);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Target {\n");
    
    sb.append("    accessPath: ").append(toIndentedString(accessPath)).append("\n");
    sb.append("    board: ").append(toIndentedString(board)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    dcName: ").append(toIndentedString(dcName)).append("\n");
    sb.append("    gatewayIps: ").append(toIndentedString(gatewayIps)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    iqn: ").append(toIndentedString(iqn)).append("\n");
    sb.append("    logout: ").append(toIndentedString(logout)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
