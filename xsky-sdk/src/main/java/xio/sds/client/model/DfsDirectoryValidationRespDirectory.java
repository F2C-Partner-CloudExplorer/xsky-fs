/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DfsDirectoryValidationRespDirectory
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DfsDirectoryValidationRespDirectory {
  @SerializedName("dp_dfs_snapshot_policy_num")
  private Long dpDfsSnapshotPolicyNum = null;

  @SerializedName("existed")
  private Boolean existed = null;

  @SerializedName("parent_child_bucket_existed")
  private Boolean parentChildBucketExisted = null;

  @SerializedName("parent_child_snapshot_existed")
  private Boolean parentChildSnapshotExisted = null;

  @SerializedName("quota_existed")
  private Boolean quotaExisted = null;

  @SerializedName("root_dir_snap_num")
  private Long rootDirSnapNum = null;

  @SerializedName("share_existed")
  private Boolean shareExisted = null;

  @SerializedName("snapshot_existed")
  private Boolean snapshotExisted = null;

  public DfsDirectoryValidationRespDirectory dpDfsSnapshotPolicyNum(Long dpDfsSnapshotPolicyNum) {
    this.dpDfsSnapshotPolicyNum = dpDfsSnapshotPolicyNum;
    return this;
  }

   /**
   * count of data protection snapshot policy on the directory
   * @return dpDfsSnapshotPolicyNum
  **/
  @Schema(required = true, description = "count of data protection snapshot policy on the directory")
  public Long getDpDfsSnapshotPolicyNum() {
    return dpDfsSnapshotPolicyNum;
  }

  public void setDpDfsSnapshotPolicyNum(Long dpDfsSnapshotPolicyNum) {
    this.dpDfsSnapshotPolicyNum = dpDfsSnapshotPolicyNum;
  }

  public DfsDirectoryValidationRespDirectory existed(Boolean existed) {
    this.existed = existed;
    return this;
  }

   /**
   * directory existed
   * @return existed
  **/
  @Schema(required = true, description = "directory existed")
  public Boolean isExisted() {
    return existed;
  }

  public void setExisted(Boolean existed) {
    this.existed = existed;
  }

  public DfsDirectoryValidationRespDirectory parentChildBucketExisted(Boolean parentChildBucketExisted) {
    this.parentChildBucketExisted = parentChildBucketExisted;
    return this;
  }

   /**
   * bucket existed on the parent or child directory
   * @return parentChildBucketExisted
  **/
  @Schema(required = true, description = "bucket existed on the parent or child directory")
  public Boolean isParentChildBucketExisted() {
    return parentChildBucketExisted;
  }

  public void setParentChildBucketExisted(Boolean parentChildBucketExisted) {
    this.parentChildBucketExisted = parentChildBucketExisted;
  }

  public DfsDirectoryValidationRespDirectory parentChildSnapshotExisted(Boolean parentChildSnapshotExisted) {
    this.parentChildSnapshotExisted = parentChildSnapshotExisted;
    return this;
  }

   /**
   * snapshot existed on the parent or child directory
   * @return parentChildSnapshotExisted
  **/
  @Schema(required = true, description = "snapshot existed on the parent or child directory")
  public Boolean isParentChildSnapshotExisted() {
    return parentChildSnapshotExisted;
  }

  public void setParentChildSnapshotExisted(Boolean parentChildSnapshotExisted) {
    this.parentChildSnapshotExisted = parentChildSnapshotExisted;
  }

  public DfsDirectoryValidationRespDirectory quotaExisted(Boolean quotaExisted) {
    this.quotaExisted = quotaExisted;
    return this;
  }

   /**
   * quota existed on the directory
   * @return quotaExisted
  **/
  @Schema(required = true, description = "quota existed on the directory")
  public Boolean isQuotaExisted() {
    return quotaExisted;
  }

  public void setQuotaExisted(Boolean quotaExisted) {
    this.quotaExisted = quotaExisted;
  }

  public DfsDirectoryValidationRespDirectory rootDirSnapNum(Long rootDirSnapNum) {
    this.rootDirSnapNum = rootDirSnapNum;
    return this;
  }

   /**
   * count of snapshot on the root directory
   * @return rootDirSnapNum
  **/
  @Schema(required = true, description = "count of snapshot on the root directory")
  public Long getRootDirSnapNum() {
    return rootDirSnapNum;
  }

  public void setRootDirSnapNum(Long rootDirSnapNum) {
    this.rootDirSnapNum = rootDirSnapNum;
  }

  public DfsDirectoryValidationRespDirectory shareExisted(Boolean shareExisted) {
    this.shareExisted = shareExisted;
    return this;
  }

   /**
   * share existed on the directory
   * @return shareExisted
  **/
  @Schema(required = true, description = "share existed on the directory")
  public Boolean isShareExisted() {
    return shareExisted;
  }

  public void setShareExisted(Boolean shareExisted) {
    this.shareExisted = shareExisted;
  }

  public DfsDirectoryValidationRespDirectory snapshotExisted(Boolean snapshotExisted) {
    this.snapshotExisted = snapshotExisted;
    return this;
  }

   /**
   * snapshot existed on the directory
   * @return snapshotExisted
  **/
  @Schema(required = true, description = "snapshot existed on the directory")
  public Boolean isSnapshotExisted() {
    return snapshotExisted;
  }

  public void setSnapshotExisted(Boolean snapshotExisted) {
    this.snapshotExisted = snapshotExisted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfsDirectoryValidationRespDirectory dfsDirectoryValidationRespDirectory = (DfsDirectoryValidationRespDirectory) o;
    return Objects.equals(this.dpDfsSnapshotPolicyNum, dfsDirectoryValidationRespDirectory.dpDfsSnapshotPolicyNum) &&
        Objects.equals(this.existed, dfsDirectoryValidationRespDirectory.existed) &&
        Objects.equals(this.parentChildBucketExisted, dfsDirectoryValidationRespDirectory.parentChildBucketExisted) &&
        Objects.equals(this.parentChildSnapshotExisted, dfsDirectoryValidationRespDirectory.parentChildSnapshotExisted) &&
        Objects.equals(this.quotaExisted, dfsDirectoryValidationRespDirectory.quotaExisted) &&
        Objects.equals(this.rootDirSnapNum, dfsDirectoryValidationRespDirectory.rootDirSnapNum) &&
        Objects.equals(this.shareExisted, dfsDirectoryValidationRespDirectory.shareExisted) &&
        Objects.equals(this.snapshotExisted, dfsDirectoryValidationRespDirectory.snapshotExisted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dpDfsSnapshotPolicyNum, existed, parentChildBucketExisted, parentChildSnapshotExisted, quotaExisted, rootDirSnapNum, shareExisted, snapshotExisted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfsDirectoryValidationRespDirectory {\n");
    
    sb.append("    dpDfsSnapshotPolicyNum: ").append(toIndentedString(dpDfsSnapshotPolicyNum)).append("\n");
    sb.append("    existed: ").append(toIndentedString(existed)).append("\n");
    sb.append("    parentChildBucketExisted: ").append(toIndentedString(parentChildBucketExisted)).append("\n");
    sb.append("    parentChildSnapshotExisted: ").append(toIndentedString(parentChildSnapshotExisted)).append("\n");
    sb.append("    quotaExisted: ").append(toIndentedString(quotaExisted)).append("\n");
    sb.append("    rootDirSnapNum: ").append(toIndentedString(rootDirSnapNum)).append("\n");
    sb.append("    shareExisted: ").append(toIndentedString(shareExisted)).append("\n");
    sb.append("    snapshotExisted: ").append(toIndentedString(snapshotExisted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
