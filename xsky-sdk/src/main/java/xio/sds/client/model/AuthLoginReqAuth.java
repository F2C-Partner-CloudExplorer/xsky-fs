/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import xio.sds.client.model.LoginSSOExtra;
/**
 * AuthLoginReqAuth
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class AuthLoginReqAuth {
  @SerializedName("encrypted_password")
  private String encryptedPassword = null;

  @SerializedName("extra")
  private LoginSSOExtra extra = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("platform")
  private String platform = null;

  @SerializedName("rsa_key_id")
  private String rsaKeyId = null;

  @SerializedName("sign")
  private String sign = null;

  @SerializedName("timestamp")
  private String timestamp = null;

  @SerializedName("token")
  private String token = null;

  public AuthLoginReqAuth encryptedPassword(String encryptedPassword) {
    this.encryptedPassword = encryptedPassword;
    return this;
  }

   /**
   * encrypted password for auth
   * @return encryptedPassword
  **/
  @Schema(description = "encrypted password for auth")
  public String getEncryptedPassword() {
    return encryptedPassword;
  }

  public void setEncryptedPassword(String encryptedPassword) {
    this.encryptedPassword = encryptedPassword;
  }

  public AuthLoginReqAuth extra(LoginSSOExtra extra) {
    this.extra = extra;
    return this;
  }

   /**
   * Get extra
   * @return extra
  **/
  @Schema(description = "")
  public LoginSSOExtra getExtra() {
    return extra;
  }

  public void setExtra(LoginSSOExtra extra) {
    this.extra = extra;
  }

  public AuthLoginReqAuth name(String name) {
    this.name = name;
    return this;
  }

   /**
   * user name or email for auth
   * @return name
  **/
  @Schema(description = "user name or email for auth")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AuthLoginReqAuth password(String password) {
    this.password = password;
    return this;
  }

   /**
   * password for auth
   * @return password
  **/
  @Schema(description = "password for auth")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public AuthLoginReqAuth platform(String platform) {
    this.platform = platform;
    return this;
  }

   /**
   * uuid of the identity platform
   * @return platform
  **/
  @Schema(description = "uuid of the identity platform")
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }

  public AuthLoginReqAuth rsaKeyId(String rsaKeyId) {
    this.rsaKeyId = rsaKeyId;
    return this;
  }

   /**
   * rsa key id
   * @return rsaKeyId
  **/
  @Schema(description = "rsa key id")
  public String getRsaKeyId() {
    return rsaKeyId;
  }

  public void setRsaKeyId(String rsaKeyId) {
    this.rsaKeyId = rsaKeyId;
  }

  public AuthLoginReqAuth sign(String sign) {
    this.sign = sign;
    return this;
  }

   /**
   * signature of login request
   * @return sign
  **/
  @Schema(description = "signature of login request")
  public String getSign() {
    return sign;
  }

  public void setSign(String sign) {
    this.sign = sign;
  }

  public AuthLoginReqAuth timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * timestamp of platform token
   * @return timestamp
  **/
  @Schema(description = "timestamp of platform token")
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }

  public AuthLoginReqAuth token(String token) {
    this.token = token;
    return this;
  }

   /**
   * token of the identity platform
   * @return token
  **/
  @Schema(description = "token of the identity platform")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthLoginReqAuth authLoginReqAuth = (AuthLoginReqAuth) o;
    return Objects.equals(this.encryptedPassword, authLoginReqAuth.encryptedPassword) &&
        Objects.equals(this.extra, authLoginReqAuth.extra) &&
        Objects.equals(this.name, authLoginReqAuth.name) &&
        Objects.equals(this.password, authLoginReqAuth.password) &&
        Objects.equals(this.platform, authLoginReqAuth.platform) &&
        Objects.equals(this.rsaKeyId, authLoginReqAuth.rsaKeyId) &&
        Objects.equals(this.sign, authLoginReqAuth.sign) &&
        Objects.equals(this.timestamp, authLoginReqAuth.timestamp) &&
        Objects.equals(this.token, authLoginReqAuth.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptedPassword, extra, name, password, platform, rsaKeyId, sign, timestamp, token);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthLoginReqAuth {\n");
    
    sb.append("    encryptedPassword: ").append(toIndentedString(encryptedPassword)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    rsaKeyId: ").append(toIndentedString(rsaKeyId)).append("\n");
    sb.append("    sign: ").append(toIndentedString(sign)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
