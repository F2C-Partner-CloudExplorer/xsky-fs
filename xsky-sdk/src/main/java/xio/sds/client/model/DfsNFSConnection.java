/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import xio.sds.client.model.ClusterNestview;
import xio.sds.client.model.DfsGatewayNestview;
import xio.sds.client.model.DfsNFSShareNestview;
/**
 * DfsNFSConnection defines model of dfs nfs connection +X:model:generate;order_by&#x3D;-ID;related_depth&#x3D;2 +X:benchmark:
 */
@Schema(description = "DfsNFSConnection defines model of dfs nfs connection +X:model:generate;order_by=-ID;related_depth=2 +X:benchmark:")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T09:00:29.487Z[GMT]")
public class DfsNFSConnection {
  @SerializedName("client_ip")
  private String clientIp = null;

  @SerializedName("cluster")
  private ClusterNestview cluster = null;

  @SerializedName("create")
  private OffsetDateTime create = null;

  @SerializedName("dfs_gateway")
  private DfsGatewayNestview dfsGateway = null;

  @SerializedName("dfs_nfs_share")
  private DfsNFSShareNestview dfsNfsShare = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("nfs_version")
  private String nfsVersion = null;

  @SerializedName("update")
  private OffsetDateTime update = null;

  public DfsNFSConnection clientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

   /**
   * Get clientIp
   * @return clientIp
  **/
  @Schema(description = "")
  public String getClientIp() {
    return clientIp;
  }

  public void setClientIp(String clientIp) {
    this.clientIp = clientIp;
  }

  public DfsNFSConnection cluster(ClusterNestview cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public ClusterNestview getCluster() {
    return cluster;
  }

  public void setCluster(ClusterNestview cluster) {
    this.cluster = cluster;
  }

  public DfsNFSConnection create(OffsetDateTime create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @Schema(description = "")
  public OffsetDateTime getCreate() {
    return create;
  }

  public void setCreate(OffsetDateTime create) {
    this.create = create;
  }

  public DfsNFSConnection dfsGateway(DfsGatewayNestview dfsGateway) {
    this.dfsGateway = dfsGateway;
    return this;
  }

   /**
   * Get dfsGateway
   * @return dfsGateway
  **/
  @Schema(description = "")
  public DfsGatewayNestview getDfsGateway() {
    return dfsGateway;
  }

  public void setDfsGateway(DfsGatewayNestview dfsGateway) {
    this.dfsGateway = dfsGateway;
  }

  public DfsNFSConnection dfsNfsShare(DfsNFSShareNestview dfsNfsShare) {
    this.dfsNfsShare = dfsNfsShare;
    return this;
  }

   /**
   * Get dfsNfsShare
   * @return dfsNfsShare
  **/
  @Schema(description = "")
  public DfsNFSShareNestview getDfsNfsShare() {
    return dfsNfsShare;
  }

  public void setDfsNfsShare(DfsNFSShareNestview dfsNfsShare) {
    this.dfsNfsShare = dfsNfsShare;
  }

  public DfsNFSConnection id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DfsNFSConnection nfsVersion(String nfsVersion) {
    this.nfsVersion = nfsVersion;
    return this;
  }

   /**
   * Get nfsVersion
   * @return nfsVersion
  **/
  @Schema(description = "")
  public String getNfsVersion() {
    return nfsVersion;
  }

  public void setNfsVersion(String nfsVersion) {
    this.nfsVersion = nfsVersion;
  }

  public DfsNFSConnection update(OffsetDateTime update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdate() {
    return update;
  }

  public void setUpdate(OffsetDateTime update) {
    this.update = update;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfsNFSConnection dfsNFSConnection = (DfsNFSConnection) o;
    return Objects.equals(this.clientIp, dfsNFSConnection.clientIp) &&
        Objects.equals(this.cluster, dfsNFSConnection.cluster) &&
        Objects.equals(this.create, dfsNFSConnection.create) &&
        Objects.equals(this.dfsGateway, dfsNFSConnection.dfsGateway) &&
        Objects.equals(this.dfsNfsShare, dfsNFSConnection.dfsNfsShare) &&
        Objects.equals(this.id, dfsNFSConnection.id) &&
        Objects.equals(this.nfsVersion, dfsNFSConnection.nfsVersion) &&
        Objects.equals(this.update, dfsNFSConnection.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientIp, cluster, create, dfsGateway, dfsNfsShare, id, nfsVersion, update);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfsNFSConnection {\n");
    
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    dfsGateway: ").append(toIndentedString(dfsGateway)).append("\n");
    sb.append("    dfsNfsShare: ").append(toIndentedString(dfsNfsShare)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nfsVersion: ").append(toIndentedString(nfsVersion)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
