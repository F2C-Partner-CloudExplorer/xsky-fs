/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DeleteHostsGatewayLbGroupOpReq;
import xio.sds.client.model.HostCreateReq;
import xio.sds.client.model.HostResp;
import xio.sds.client.model.HostSamplesResp;
import xio.sds.client.model.HostUpdateReq;
import xio.sds.client.model.HostsResp;
import xio.sds.client.model.OpHostsZoneReq;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HostsApi {
    private ApiClient apiClient;

    public HostsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HostsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createHost
     * @param body host info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHostCall(HostCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHostValidateBeforeCall(HostCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createHost(Async)");
        }
        
        com.squareup.okhttp.Call call = createHostCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * check env and install packages
     * @param body host info (required)
     * @param clusterId cluster id (optional)
     * @return HostResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostResp createHost(HostCreateReq body, String clusterId) throws ApiException {
        ApiResponse<HostResp> resp = createHostWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * check env and install packages
     * @param body host info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;HostResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostResp> createHostWithHttpInfo(HostCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createHostValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * check env and install packages
     * @param body host info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHostAsync(HostCreateReq body, String clusterId, final ApiCallback<HostResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHostValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteHost
     * @param hostId host id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHostCall(Long hostId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/{host_id}"
            .replaceAll("\\{" + "host_id" + "\\}", apiClient.escapeString(hostId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHostValidateBeforeCall(Long hostId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hostId' is set
        if (hostId == null) {
            throw new ApiException("Missing the required parameter 'hostId' when calling deleteHost(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteHostCall(hostId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete host
     * @param hostId host id (required)
     * @param force force delete or not (optional)
     * @return HostResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostResp deleteHost(Long hostId, Boolean force) throws ApiException {
        ApiResponse<HostResp> resp = deleteHostWithHttpInfo(hostId, force);
        return resp.getData();
    }

    /**
     * 
     * delete host
     * @param hostId host id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;HostResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostResp> deleteHostWithHttpInfo(Long hostId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteHostValidateBeforeCall(hostId, force, null, null);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete host
     * @param hostId host id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteHostAsync(Long hostId, Boolean force, final ApiCallback<HostResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHostValidateBeforeCall(hostId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteHostsGatewayLbGroup
     * @param body osp zone info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHostsGatewayLbGroupCall(DeleteHostsGatewayLbGroupOpReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/:delete-hosts-gateway-lb-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHostsGatewayLbGroupValidateBeforeCall(DeleteHostsGatewayLbGroupOpReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteHostsGatewayLbGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteHostsGatewayLbGroupCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete hosts gateway load balancer group from osp zone
     * @param body osp zone info (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteHostsGatewayLbGroup(DeleteHostsGatewayLbGroupOpReq body) throws ApiException {
        deleteHostsGatewayLbGroupWithHttpInfo(body);
    }

    /**
     * 
     * delete hosts gateway load balancer group from osp zone
     * @param body osp zone info (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteHostsGatewayLbGroupWithHttpInfo(DeleteHostsGatewayLbGroupOpReq body) throws ApiException {
        com.squareup.okhttp.Call call = deleteHostsGatewayLbGroupValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * delete hosts gateway load balancer group from osp zone
     * @param body osp zone info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteHostsGatewayLbGroupAsync(DeleteHostsGatewayLbGroupOpReq body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHostsGatewayLbGroupValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getHost
     * @param hostId the host id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHostCall(Long hostId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/{host_id}"
            .replaceAll("\\{" + "host_id" + "\\}", apiClient.escapeString(hostId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHostValidateBeforeCall(Long hostId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hostId' is set
        if (hostId == null) {
            throw new ApiException("Missing the required parameter 'hostId' when calling getHost(Async)");
        }
        
        com.squareup.okhttp.Call call = getHostCall(hostId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a host info
     * @param hostId the host id (required)
     * @return HostResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostResp getHost(Long hostId) throws ApiException {
        ApiResponse<HostResp> resp = getHostWithHttpInfo(hostId);
        return resp.getData();
    }

    /**
     * 
     * get a host info
     * @param hostId the host id (required)
     * @return ApiResponse&lt;HostResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostResp> getHostWithHttpInfo(Long hostId) throws ApiException {
        com.squareup.okhttp.Call call = getHostValidateBeforeCall(hostId, null, null);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a host info
     * @param hostId the host id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHostAsync(Long hostId, final ApiCallback<HostResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHostValidateBeforeCall(hostId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHostSamples
     * @param hostId host id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHostSamplesCall(Long hostId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/{host_id}/samples"
            .replaceAll("\\{" + "host_id" + "\\}", apiClient.escapeString(hostId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHostSamplesValidateBeforeCall(Long hostId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hostId' is set
        if (hostId == null) {
            throw new ApiException("Missing the required parameter 'hostId' when calling getHostSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getHostSamplesCall(hostId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a host&#x27;s samples
     * @param hostId host id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return HostSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostSamplesResp getHostSamples(Long hostId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<HostSamplesResp> resp = getHostSamplesWithHttpInfo(hostId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get a host&#x27;s samples
     * @param hostId host id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;HostSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostSamplesResp> getHostSamplesWithHttpInfo(Long hostId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getHostSamplesValidateBeforeCall(hostId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<HostSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a host&#x27;s samples
     * @param hostId host id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHostSamplesAsync(Long hostId, String durationBegin, String durationEnd, String period, final ApiCallback<HostSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHostSamplesValidateBeforeCall(hostId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for hostDeletable
     * @param hostId host id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hostDeletableCall(Long hostId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/{host_id}:host-deletable"
            .replaceAll("\\{" + "host_id" + "\\}", apiClient.escapeString(hostId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hostDeletableValidateBeforeCall(Long hostId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hostId' is set
        if (hostId == null) {
            throw new ApiException("Missing the required parameter 'hostId' when calling hostDeletable(Async)");
        }
        
        com.squareup.okhttp.Call call = hostDeletableCall(hostId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * check host deletable
     * @param hostId host id (required)
     * @return HostResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostResp hostDeletable(Long hostId) throws ApiException {
        ApiResponse<HostResp> resp = hostDeletableWithHttpInfo(hostId);
        return resp.getData();
    }

    /**
     * 
     * check host deletable
     * @param hostId host id (required)
     * @return ApiResponse&lt;HostResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostResp> hostDeletableWithHttpInfo(Long hostId) throws ApiException {
        com.squareup.okhttp.Call call = hostDeletableValidateBeforeCall(hostId, null, null);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * check host deletable
     * @param hostId host id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hostDeletableAsync(Long hostId, final ApiCallback<HostResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hostDeletableValidateBeforeCall(hostId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listHosts
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param protectionDomainId protection domain id (optional)
     * @param clusterId cluster id (optional)
     * @param ospClusterId osp cluster id (optional)
     * @param hostname host name (optional)
     * @param type if it existed, value should be xdcactive (optional)
     * @param role filter by host role (optional)
     * @param fcAvailable available host with fc port (optional)
     * @param replicationGatewayAvailable available host for replication gateway (optional)
     * @param ospZoneId osp zone id (optional)
     * @param datacenterIds datacenter ids (optional)
     * @param usage host usage (optional)
     * @param withS3Lb host used by s3 load balancer (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listHostsCall(Long limit, Long offset, Long protectionDomainId, String clusterId, String ospClusterId, String hostname, String type, String role, Boolean fcAvailable, Boolean replicationGatewayAvailable, Long ospZoneId, Long datacenterIds, String usage, Boolean withS3Lb, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (protectionDomainId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("protection_domain_id", protectionDomainId));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (ospClusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("osp_cluster_id", ospClusterId));
        if (hostname != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hostname", hostname));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        if (fcAvailable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fc_available", fcAvailable));
        if (replicationGatewayAvailable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replication_gateway_available", replicationGatewayAvailable));
        if (ospZoneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("osp_zone_id", ospZoneId));
        if (datacenterIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("datacenter_ids", datacenterIds));
        if (usage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("usage", usage));
        if (withS3Lb != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_s3_lb", withS3Lb));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listHostsValidateBeforeCall(Long limit, Long offset, Long protectionDomainId, String clusterId, String ospClusterId, String hostname, String type, String role, Boolean fcAvailable, Boolean replicationGatewayAvailable, Long ospZoneId, Long datacenterIds, String usage, Boolean withS3Lb, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listHostsCall(limit, offset, protectionDomainId, clusterId, ospClusterId, hostname, type, role, fcAvailable, replicationGatewayAvailable, ospZoneId, datacenterIds, usage, withS3Lb, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List hosts by fileter
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param protectionDomainId protection domain id (optional)
     * @param clusterId cluster id (optional)
     * @param ospClusterId osp cluster id (optional)
     * @param hostname host name (optional)
     * @param type if it existed, value should be xdcactive (optional)
     * @param role filter by host role (optional)
     * @param fcAvailable available host with fc port (optional)
     * @param replicationGatewayAvailable available host for replication gateway (optional)
     * @param ospZoneId osp zone id (optional)
     * @param datacenterIds datacenter ids (optional)
     * @param usage host usage (optional)
     * @param withS3Lb host used by s3 load balancer (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return HostsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostsResp listHosts(Long limit, Long offset, Long protectionDomainId, String clusterId, String ospClusterId, String hostname, String type, String role, Boolean fcAvailable, Boolean replicationGatewayAvailable, Long ospZoneId, Long datacenterIds, String usage, Boolean withS3Lb, String q, String sort) throws ApiException {
        ApiResponse<HostsResp> resp = listHostsWithHttpInfo(limit, offset, protectionDomainId, clusterId, ospClusterId, hostname, type, role, fcAvailable, replicationGatewayAvailable, ospZoneId, datacenterIds, usage, withS3Lb, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List hosts by fileter
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param protectionDomainId protection domain id (optional)
     * @param clusterId cluster id (optional)
     * @param ospClusterId osp cluster id (optional)
     * @param hostname host name (optional)
     * @param type if it existed, value should be xdcactive (optional)
     * @param role filter by host role (optional)
     * @param fcAvailable available host with fc port (optional)
     * @param replicationGatewayAvailable available host for replication gateway (optional)
     * @param ospZoneId osp zone id (optional)
     * @param datacenterIds datacenter ids (optional)
     * @param usage host usage (optional)
     * @param withS3Lb host used by s3 load balancer (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;HostsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostsResp> listHostsWithHttpInfo(Long limit, Long offset, Long protectionDomainId, String clusterId, String ospClusterId, String hostname, String type, String role, Boolean fcAvailable, Boolean replicationGatewayAvailable, Long ospZoneId, Long datacenterIds, String usage, Boolean withS3Lb, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listHostsValidateBeforeCall(limit, offset, protectionDomainId, clusterId, ospClusterId, hostname, type, role, fcAvailable, replicationGatewayAvailable, ospZoneId, datacenterIds, usage, withS3Lb, q, sort, null, null);
        Type localVarReturnType = new TypeToken<HostsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List hosts by fileter
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param protectionDomainId protection domain id (optional)
     * @param clusterId cluster id (optional)
     * @param ospClusterId osp cluster id (optional)
     * @param hostname host name (optional)
     * @param type if it existed, value should be xdcactive (optional)
     * @param role filter by host role (optional)
     * @param fcAvailable available host with fc port (optional)
     * @param replicationGatewayAvailable available host for replication gateway (optional)
     * @param ospZoneId osp zone id (optional)
     * @param datacenterIds datacenter ids (optional)
     * @param usage host usage (optional)
     * @param withS3Lb host used by s3 load balancer (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listHostsAsync(Long limit, Long offset, Long protectionDomainId, String clusterId, String ospClusterId, String hostname, String type, String role, Boolean fcAvailable, Boolean replicationGatewayAvailable, Long ospZoneId, Long datacenterIds, String usage, Boolean withS3Lb, String q, String sort, final ApiCallback<HostsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listHostsValidateBeforeCall(limit, offset, protectionDomainId, clusterId, ospClusterId, hostname, type, role, fcAvailable, replicationGatewayAvailable, ospZoneId, datacenterIds, usage, withS3Lb, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for maintainHost
     * @param hostId host id (required)
     * @param force force maintain (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call maintainHostCall(Long hostId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/{host_id}:maintain"
            .replaceAll("\\{" + "host_id" + "\\}", apiClient.escapeString(hostId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call maintainHostValidateBeforeCall(Long hostId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hostId' is set
        if (hostId == null) {
            throw new ApiException("Missing the required parameter 'hostId' when calling maintainHost(Async)");
        }
        
        com.squareup.okhttp.Call call = maintainHostCall(hostId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Put host in maintanence mode
     * @param hostId host id (required)
     * @param force force maintain (optional)
     * @return HostResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostResp maintainHost(Long hostId, Boolean force) throws ApiException {
        ApiResponse<HostResp> resp = maintainHostWithHttpInfo(hostId, force);
        return resp.getData();
    }

    /**
     * 
     * Put host in maintanence mode
     * @param hostId host id (required)
     * @param force force maintain (optional)
     * @return ApiResponse&lt;HostResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostResp> maintainHostWithHttpInfo(Long hostId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = maintainHostValidateBeforeCall(hostId, force, null, null);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Put host in maintanence mode
     * @param hostId host id (required)
     * @param force force maintain (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call maintainHostAsync(Long hostId, Boolean force, final ApiCallback<HostResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = maintainHostValidateBeforeCall(hostId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeHostsFormOspZone
     * @param body hosts cluster osp zone info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeHostsFormOspZoneCall(OpHostsZoneReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/:remove-hosts-from-osp-zone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeHostsFormOspZoneValidateBeforeCall(OpHostsZoneReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeHostsFormOspZone(Async)");
        }
        
        com.squareup.okhttp.Call call = removeHostsFormOspZoneCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove hosts form osp zone
     * @param body hosts cluster osp zone info (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeHostsFormOspZone(OpHostsZoneReq body) throws ApiException {
        removeHostsFormOspZoneWithHttpInfo(body);
    }

    /**
     * 
     * remove hosts form osp zone
     * @param body hosts cluster osp zone info (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeHostsFormOspZoneWithHttpInfo(OpHostsZoneReq body) throws ApiException {
        com.squareup.okhttp.Call call = removeHostsFormOspZoneValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * remove hosts form osp zone
     * @param body hosts cluster osp zone info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeHostsFormOspZoneAsync(OpHostsZoneReq body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeHostsFormOspZoneValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setHostsToOspZone
     * @param body hosts cluster osp zone info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setHostsToOspZoneCall(OpHostsZoneReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/:add-hosts-to-osp-zone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setHostsToOspZoneValidateBeforeCall(OpHostsZoneReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setHostsToOspZone(Async)");
        }
        
        com.squareup.okhttp.Call call = setHostsToOspZoneCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set hosts to osp zone
     * @param body hosts cluster osp zone info (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setHostsToOspZone(OpHostsZoneReq body) throws ApiException {
        setHostsToOspZoneWithHttpInfo(body);
    }

    /**
     * 
     * Set hosts to osp zone
     * @param body hosts cluster osp zone info (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setHostsToOspZoneWithHttpInfo(OpHostsZoneReq body) throws ApiException {
        com.squareup.okhttp.Call call = setHostsToOspZoneValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Set hosts to osp zone
     * @param body hosts cluster osp zone info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setHostsToOspZoneAsync(OpHostsZoneReq body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setHostsToOspZoneValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for unmaintainHost
     * @param hostId host id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unmaintainHostCall(Long hostId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/{host_id}:unmaintain"
            .replaceAll("\\{" + "host_id" + "\\}", apiClient.escapeString(hostId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unmaintainHostValidateBeforeCall(Long hostId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hostId' is set
        if (hostId == null) {
            throw new ApiException("Missing the required parameter 'hostId' when calling unmaintainHost(Async)");
        }
        
        com.squareup.okhttp.Call call = unmaintainHostCall(hostId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Put host out of maintanence mode
     * @param hostId host id (required)
     * @return HostResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostResp unmaintainHost(Long hostId) throws ApiException {
        ApiResponse<HostResp> resp = unmaintainHostWithHttpInfo(hostId);
        return resp.getData();
    }

    /**
     * 
     * Put host out of maintanence mode
     * @param hostId host id (required)
     * @return ApiResponse&lt;HostResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostResp> unmaintainHostWithHttpInfo(Long hostId) throws ApiException {
        com.squareup.okhttp.Call call = unmaintainHostValidateBeforeCall(hostId, null, null);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Put host out of maintanence mode
     * @param hostId host id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unmaintainHostAsync(Long hostId, final ApiCallback<HostResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unmaintainHostValidateBeforeCall(hostId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateHost
     * @param body host info (required)
     * @param hostId host id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHostCall(HostUpdateReq body, Long hostId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/hosts/{host_id}"
            .replaceAll("\\{" + "host_id" + "\\}", apiClient.escapeString(hostId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHostValidateBeforeCall(HostUpdateReq body, Long hostId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateHost(Async)");
        }
        // verify the required parameter 'hostId' is set
        if (hostId == null) {
            throw new ApiException("Missing the required parameter 'hostId' when calling updateHost(Async)");
        }
        
        com.squareup.okhttp.Call call = updateHostCall(body, hostId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update host info
     * @param body host info (required)
     * @param hostId host id (required)
     * @return HostResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostResp updateHost(HostUpdateReq body, Long hostId) throws ApiException {
        ApiResponse<HostResp> resp = updateHostWithHttpInfo(body, hostId);
        return resp.getData();
    }

    /**
     * 
     * update host info
     * @param body host info (required)
     * @param hostId host id (required)
     * @return ApiResponse&lt;HostResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostResp> updateHostWithHttpInfo(HostUpdateReq body, Long hostId) throws ApiException {
        com.squareup.okhttp.Call call = updateHostValidateBeforeCall(body, hostId, null, null);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update host info
     * @param body host info (required)
     * @param hostId host id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHostAsync(HostUpdateReq body, Long hostId, final ApiCallback<HostResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHostValidateBeforeCall(body, hostId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
