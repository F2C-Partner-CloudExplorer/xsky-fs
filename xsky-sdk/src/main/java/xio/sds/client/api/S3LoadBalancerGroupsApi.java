/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.S3LoadBalancerGroupCreateReq;
import xio.sds.client.model.S3LoadBalancerGroupResp;
import xio.sds.client.model.S3LoadBalancerGroupUpdateReq;
import xio.sds.client.model.S3LoadBalancerGroupsResp;
import xio.sds.client.model.S3LoadBalancerRegisterServiceReq;
import xio.sds.client.model.S3LoadBalancerRemoveServiceReq;
import xio.sds.client.model.S3LoadBalancerServiceResp;
import xio.sds.client.model.S3LoadBalancersAddReq;
import xio.sds.client.model.S3LoadBalancersRemoveReq;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class S3LoadBalancerGroupsApi {
    private ApiClient apiClient;

    public S3LoadBalancerGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public S3LoadBalancerGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addS3LoadBalancersToGroup
     * @param body load balancer ids to add (required)
     * @param groupId group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addS3LoadBalancersToGroupCall(S3LoadBalancersAddReq body, Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/s3-load-balancer-groups/{group_id}/s3-load-balancers"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addS3LoadBalancersToGroupValidateBeforeCall(S3LoadBalancersAddReq body, Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addS3LoadBalancersToGroup(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addS3LoadBalancersToGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = addS3LoadBalancersToGroupCall(body, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add load balancers to group
     * @param body load balancer ids to add (required)
     * @param groupId group id (required)
     * @return S3LoadBalancerGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S3LoadBalancerGroupResp addS3LoadBalancersToGroup(S3LoadBalancersAddReq body, Long groupId) throws ApiException {
        ApiResponse<S3LoadBalancerGroupResp> resp = addS3LoadBalancersToGroupWithHttpInfo(body, groupId);
        return resp.getData();
    }

    /**
     * 
     * add load balancers to group
     * @param body load balancer ids to add (required)
     * @param groupId group id (required)
     * @return ApiResponse&lt;S3LoadBalancerGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S3LoadBalancerGroupResp> addS3LoadBalancersToGroupWithHttpInfo(S3LoadBalancersAddReq body, Long groupId) throws ApiException {
        com.squareup.okhttp.Call call = addS3LoadBalancersToGroupValidateBeforeCall(body, groupId, null, null);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add load balancers to group
     * @param body load balancer ids to add (required)
     * @param groupId group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addS3LoadBalancersToGroupAsync(S3LoadBalancersAddReq body, Long groupId, final ApiCallback<S3LoadBalancerGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addS3LoadBalancersToGroupValidateBeforeCall(body, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createS3LoadBalancerGroup
     * @param body s3 load balancer group info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createS3LoadBalancerGroupCall(S3LoadBalancerGroupCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/s3-load-balancer-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createS3LoadBalancerGroupValidateBeforeCall(S3LoadBalancerGroupCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createS3LoadBalancerGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createS3LoadBalancerGroupCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create a s3 load balancer group
     * @param body s3 load balancer group info (required)
     * @param clusterId cluster id (optional)
     * @return S3LoadBalancerGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S3LoadBalancerGroupResp createS3LoadBalancerGroup(S3LoadBalancerGroupCreateReq body, String clusterId) throws ApiException {
        ApiResponse<S3LoadBalancerGroupResp> resp = createS3LoadBalancerGroupWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create a s3 load balancer group
     * @param body s3 load balancer group info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;S3LoadBalancerGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S3LoadBalancerGroupResp> createS3LoadBalancerGroupWithHttpInfo(S3LoadBalancerGroupCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createS3LoadBalancerGroupValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a s3 load balancer group
     * @param body s3 load balancer group info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createS3LoadBalancerGroupAsync(S3LoadBalancerGroupCreateReq body, String clusterId, final ApiCallback<S3LoadBalancerGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createS3LoadBalancerGroupValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteS3LoadBalancerGroup
     * @param groupId s3 load balancer group id (required)
     * @param force forcedly delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteS3LoadBalancerGroupCall(Long groupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/s3-load-balancer-groups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteS3LoadBalancerGroupValidateBeforeCall(Long groupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteS3LoadBalancerGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteS3LoadBalancerGroupCall(groupId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete s3 load balancer group
     * @param groupId s3 load balancer group id (required)
     * @param force forcedly delete or not (optional)
     * @return S3LoadBalancerGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S3LoadBalancerGroupResp deleteS3LoadBalancerGroup(Long groupId, Boolean force) throws ApiException {
        ApiResponse<S3LoadBalancerGroupResp> resp = deleteS3LoadBalancerGroupWithHttpInfo(groupId, force);
        return resp.getData();
    }

    /**
     * 
     * Delete s3 load balancer group
     * @param groupId s3 load balancer group id (required)
     * @param force forcedly delete or not (optional)
     * @return ApiResponse&lt;S3LoadBalancerGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S3LoadBalancerGroupResp> deleteS3LoadBalancerGroupWithHttpInfo(Long groupId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteS3LoadBalancerGroupValidateBeforeCall(groupId, force, null, null);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete s3 load balancer group
     * @param groupId s3 load balancer group id (required)
     * @param force forcedly delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteS3LoadBalancerGroupAsync(Long groupId, Boolean force, final ApiCallback<S3LoadBalancerGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteS3LoadBalancerGroupValidateBeforeCall(groupId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getS3LoadBalancerGroup
     * @param groupId s3 load balancer group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getS3LoadBalancerGroupCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/s3-load-balancer-groups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getS3LoadBalancerGroupValidateBeforeCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getS3LoadBalancerGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getS3LoadBalancerGroupCall(groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get s3 load balancer group
     * @param groupId s3 load balancer group id (required)
     * @return S3LoadBalancerGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S3LoadBalancerGroupResp getS3LoadBalancerGroup(Long groupId) throws ApiException {
        ApiResponse<S3LoadBalancerGroupResp> resp = getS3LoadBalancerGroupWithHttpInfo(groupId);
        return resp.getData();
    }

    /**
     * 
     * Get s3 load balancer group
     * @param groupId s3 load balancer group id (required)
     * @return ApiResponse&lt;S3LoadBalancerGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S3LoadBalancerGroupResp> getS3LoadBalancerGroupWithHttpInfo(Long groupId) throws ApiException {
        com.squareup.okhttp.Call call = getS3LoadBalancerGroupValidateBeforeCall(groupId, null, null);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get s3 load balancer group
     * @param groupId s3 load balancer group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getS3LoadBalancerGroupAsync(Long groupId, final ApiCallback<S3LoadBalancerGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getS3LoadBalancerGroupValidateBeforeCall(groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listS3LoadBalancerGroups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param ospZoneId osp zone id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listS3LoadBalancerGroupsCall(Long limit, Long offset, String q, String sort, String clusterId, Long ospZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/s3-load-balancer-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (ospZoneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("osp_zone_id", ospZoneId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listS3LoadBalancerGroupsValidateBeforeCall(Long limit, Long offset, String q, String sort, String clusterId, Long ospZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listS3LoadBalancerGroupsCall(limit, offset, q, sort, clusterId, ospZoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List s3 load balancer groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param ospZoneId osp zone id (optional)
     * @return S3LoadBalancerGroupsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S3LoadBalancerGroupsResp listS3LoadBalancerGroups(Long limit, Long offset, String q, String sort, String clusterId, Long ospZoneId) throws ApiException {
        ApiResponse<S3LoadBalancerGroupsResp> resp = listS3LoadBalancerGroupsWithHttpInfo(limit, offset, q, sort, clusterId, ospZoneId);
        return resp.getData();
    }

    /**
     * 
     * List s3 load balancer groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param ospZoneId osp zone id (optional)
     * @return ApiResponse&lt;S3LoadBalancerGroupsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S3LoadBalancerGroupsResp> listS3LoadBalancerGroupsWithHttpInfo(Long limit, Long offset, String q, String sort, String clusterId, Long ospZoneId) throws ApiException {
        com.squareup.okhttp.Call call = listS3LoadBalancerGroupsValidateBeforeCall(limit, offset, q, sort, clusterId, ospZoneId, null, null);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List s3 load balancer groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param ospZoneId osp zone id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listS3LoadBalancerGroupsAsync(Long limit, Long offset, String q, String sort, String clusterId, Long ospZoneId, final ApiCallback<S3LoadBalancerGroupsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listS3LoadBalancerGroupsValidateBeforeCall(limit, offset, q, sort, clusterId, ospZoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for redeployS3LoadBalancerGroup
     * @param groupId s3 load balancer group id (required)
     * @param reloadKeepalived reload keepalived (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call redeployS3LoadBalancerGroupCall(Long groupId, Boolean reloadKeepalived, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/s3-load-balancer-groups/{group_id}:redeploy"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reloadKeepalived != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reload_keepalived", reloadKeepalived));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call redeployS3LoadBalancerGroupValidateBeforeCall(Long groupId, Boolean reloadKeepalived, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling redeployS3LoadBalancerGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = redeployS3LoadBalancerGroupCall(groupId, reloadKeepalived, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Redeploy a s3 load balancer group
     * @param groupId s3 load balancer group id (required)
     * @param reloadKeepalived reload keepalived (optional)
     * @return S3LoadBalancerGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S3LoadBalancerGroupResp redeployS3LoadBalancerGroup(Long groupId, Boolean reloadKeepalived) throws ApiException {
        ApiResponse<S3LoadBalancerGroupResp> resp = redeployS3LoadBalancerGroupWithHttpInfo(groupId, reloadKeepalived);
        return resp.getData();
    }

    /**
     * 
     * Redeploy a s3 load balancer group
     * @param groupId s3 load balancer group id (required)
     * @param reloadKeepalived reload keepalived (optional)
     * @return ApiResponse&lt;S3LoadBalancerGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S3LoadBalancerGroupResp> redeployS3LoadBalancerGroupWithHttpInfo(Long groupId, Boolean reloadKeepalived) throws ApiException {
        com.squareup.okhttp.Call call = redeployS3LoadBalancerGroupValidateBeforeCall(groupId, reloadKeepalived, null, null);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Redeploy a s3 load balancer group
     * @param groupId s3 load balancer group id (required)
     * @param reloadKeepalived reload keepalived (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call redeployS3LoadBalancerGroupAsync(Long groupId, Boolean reloadKeepalived, final ApiCallback<S3LoadBalancerGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = redeployS3LoadBalancerGroupValidateBeforeCall(groupId, reloadKeepalived, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerS3LoadBalancerService
     * @param body register s3 load balancer service info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerS3LoadBalancerServiceCall(S3LoadBalancerRegisterServiceReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/s3-load-balancer-groups/register-service";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerS3LoadBalancerServiceValidateBeforeCall(S3LoadBalancerRegisterServiceReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling registerS3LoadBalancerService(Async)");
        }
        
        com.squareup.okhttp.Call call = registerS3LoadBalancerServiceCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Register s3 load balancer service
     * @param body register s3 load balancer service info (required)
     * @return S3LoadBalancerServiceResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S3LoadBalancerServiceResp registerS3LoadBalancerService(S3LoadBalancerRegisterServiceReq body) throws ApiException {
        ApiResponse<S3LoadBalancerServiceResp> resp = registerS3LoadBalancerServiceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Register s3 load balancer service
     * @param body register s3 load balancer service info (required)
     * @return ApiResponse&lt;S3LoadBalancerServiceResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S3LoadBalancerServiceResp> registerS3LoadBalancerServiceWithHttpInfo(S3LoadBalancerRegisterServiceReq body) throws ApiException {
        com.squareup.okhttp.Call call = registerS3LoadBalancerServiceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<S3LoadBalancerServiceResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register s3 load balancer service
     * @param body register s3 load balancer service info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerS3LoadBalancerServiceAsync(S3LoadBalancerRegisterServiceReq body, final ApiCallback<S3LoadBalancerServiceResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerS3LoadBalancerServiceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S3LoadBalancerServiceResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeS3LoadBalancerService
     * @param body remove s3 load balancer service info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeS3LoadBalancerServiceCall(S3LoadBalancerRemoveServiceReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/s3-load-balancer-groups/remove-service";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeS3LoadBalancerServiceValidateBeforeCall(S3LoadBalancerRemoveServiceReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeS3LoadBalancerService(Async)");
        }
        
        com.squareup.okhttp.Call call = removeS3LoadBalancerServiceCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Remove s3 load balancer service
     * @param body remove s3 load balancer service info (required)
     * @return S3LoadBalancerServiceResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S3LoadBalancerServiceResp removeS3LoadBalancerService(S3LoadBalancerRemoveServiceReq body) throws ApiException {
        ApiResponse<S3LoadBalancerServiceResp> resp = removeS3LoadBalancerServiceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Remove s3 load balancer service
     * @param body remove s3 load balancer service info (required)
     * @return ApiResponse&lt;S3LoadBalancerServiceResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S3LoadBalancerServiceResp> removeS3LoadBalancerServiceWithHttpInfo(S3LoadBalancerRemoveServiceReq body) throws ApiException {
        com.squareup.okhttp.Call call = removeS3LoadBalancerServiceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<S3LoadBalancerServiceResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove s3 load balancer service
     * @param body remove s3 load balancer service info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeS3LoadBalancerServiceAsync(S3LoadBalancerRemoveServiceReq body, final ApiCallback<S3LoadBalancerServiceResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeS3LoadBalancerServiceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S3LoadBalancerServiceResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeS3LoadBalancersFromGroup
     * @param body load balancer ids to remove (required)
     * @param groupId group id (required)
     * @param force forcedly remove or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeS3LoadBalancersFromGroupCall(S3LoadBalancersRemoveReq body, Long groupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/s3-load-balancer-groups/{group_id}/s3-load-balancers"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeS3LoadBalancersFromGroupValidateBeforeCall(S3LoadBalancersRemoveReq body, Long groupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeS3LoadBalancersFromGroup(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeS3LoadBalancersFromGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = removeS3LoadBalancersFromGroupCall(body, groupId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove load balancers from group
     * @param body load balancer ids to remove (required)
     * @param groupId group id (required)
     * @param force forcedly remove or not (optional)
     * @return S3LoadBalancerGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S3LoadBalancerGroupResp removeS3LoadBalancersFromGroup(S3LoadBalancersRemoveReq body, Long groupId, Boolean force) throws ApiException {
        ApiResponse<S3LoadBalancerGroupResp> resp = removeS3LoadBalancersFromGroupWithHttpInfo(body, groupId, force);
        return resp.getData();
    }

    /**
     * 
     * remove load balancers from group
     * @param body load balancer ids to remove (required)
     * @param groupId group id (required)
     * @param force forcedly remove or not (optional)
     * @return ApiResponse&lt;S3LoadBalancerGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S3LoadBalancerGroupResp> removeS3LoadBalancersFromGroupWithHttpInfo(S3LoadBalancersRemoveReq body, Long groupId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = removeS3LoadBalancersFromGroupValidateBeforeCall(body, groupId, force, null, null);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove load balancers from group
     * @param body load balancer ids to remove (required)
     * @param groupId group id (required)
     * @param force forcedly remove or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeS3LoadBalancersFromGroupAsync(S3LoadBalancersRemoveReq body, Long groupId, Boolean force, final ApiCallback<S3LoadBalancerGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeS3LoadBalancersFromGroupValidateBeforeCall(body, groupId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateS3LoadBalancerGroup
     * @param body s3 load balancer group info (required)
     * @param groupId s3 load balancer group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateS3LoadBalancerGroupCall(S3LoadBalancerGroupUpdateReq body, Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/s3-load-balancer-groups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateS3LoadBalancerGroupValidateBeforeCall(S3LoadBalancerGroupUpdateReq body, Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateS3LoadBalancerGroup(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateS3LoadBalancerGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateS3LoadBalancerGroupCall(body, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update a s3 load balancer group
     * @param body s3 load balancer group info (required)
     * @param groupId s3 load balancer group id (required)
     * @return S3LoadBalancerGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S3LoadBalancerGroupResp updateS3LoadBalancerGroup(S3LoadBalancerGroupUpdateReq body, Long groupId) throws ApiException {
        ApiResponse<S3LoadBalancerGroupResp> resp = updateS3LoadBalancerGroupWithHttpInfo(body, groupId);
        return resp.getData();
    }

    /**
     * 
     * Update a s3 load balancer group
     * @param body s3 load balancer group info (required)
     * @param groupId s3 load balancer group id (required)
     * @return ApiResponse&lt;S3LoadBalancerGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S3LoadBalancerGroupResp> updateS3LoadBalancerGroupWithHttpInfo(S3LoadBalancerGroupUpdateReq body, Long groupId) throws ApiException {
        com.squareup.okhttp.Call call = updateS3LoadBalancerGroupValidateBeforeCall(body, groupId, null, null);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a s3 load balancer group
     * @param body s3 load balancer group info (required)
     * @param groupId s3 load balancer group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateS3LoadBalancerGroupAsync(S3LoadBalancerGroupUpdateReq body, Long groupId, final ApiCallback<S3LoadBalancerGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateS3LoadBalancerGroupValidateBeforeCall(body, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S3LoadBalancerGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
