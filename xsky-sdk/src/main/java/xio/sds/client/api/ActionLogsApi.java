/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.ActionLogCreateReq;
import xio.sds.client.model.ActionLogResp;
import xio.sds.client.model.ActionLogUpdateReq;
import xio.sds.client.model.ActionLogUserResp;
import xio.sds.client.model.ActionLogsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActionLogsApi {
    private ApiClient apiClient;

    public ActionLogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionLogsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createActionLog
     * @param body action log info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createActionLogCall(ActionLogCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/action-logs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createActionLogValidateBeforeCall(ActionLogCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createActionLog(Async)");
        }
        
        com.squareup.okhttp.Call call = createActionLogCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * create action log
     * @param body action log info (required)
     * @return ActionLogResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionLogResp createActionLog(ActionLogCreateReq body) throws ApiException {
        ApiResponse<ActionLogResp> resp = createActionLogWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * create action log
     * @param body action log info (required)
     * @return ApiResponse&lt;ActionLogResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionLogResp> createActionLogWithHttpInfo(ActionLogCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createActionLogValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ActionLogResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create action log
     * @param body action log info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createActionLogAsync(ActionLogCreateReq body, final ApiCallback<ActionLogResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createActionLogValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionLogResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActionLog
     * @param actionLogId action log id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActionLogCall(Long actionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/action-logs/{action_log_id}"
            .replaceAll("\\{" + "action_log_id" + "\\}", apiClient.escapeString(actionLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActionLogValidateBeforeCall(Long actionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'actionLogId' is set
        if (actionLogId == null) {
            throw new ApiException("Missing the required parameter 'actionLogId' when calling getActionLog(Async)");
        }
        
        com.squareup.okhttp.Call call = getActionLogCall(actionLogId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a action log
     * @param actionLogId action log id (required)
     * @return ActionLogResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionLogResp getActionLog(Long actionLogId) throws ApiException {
        ApiResponse<ActionLogResp> resp = getActionLogWithHttpInfo(actionLogId);
        return resp.getData();
    }

    /**
     * 
     * get a action log
     * @param actionLogId action log id (required)
     * @return ApiResponse&lt;ActionLogResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionLogResp> getActionLogWithHttpInfo(Long actionLogId) throws ApiException {
        com.squareup.okhttp.Call call = getActionLogValidateBeforeCall(actionLogId, null, null);
        Type localVarReturnType = new TypeToken<ActionLogResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a action log
     * @param actionLogId action log id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionLogAsync(Long actionLogId, final ApiCallback<ActionLogResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionLogValidateBeforeCall(actionLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionLogResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActionLogUser
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActionLogUserCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/action-logs/:user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActionLogUserValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getActionLogUserCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get action log user info
     * @return ActionLogUserResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionLogUserResp getActionLogUser() throws ApiException {
        ApiResponse<ActionLogUserResp> resp = getActionLogUserWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * get action log user info
     * @return ApiResponse&lt;ActionLogUserResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionLogUserResp> getActionLogUserWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getActionLogUserValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ActionLogUserResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get action log user info
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionLogUserAsync(final ApiCallback<ActionLogUserResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionLogUserValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionLogUserResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listActionLogs
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param action action of action logs (optional)
     * @param resourceType resource type of action logs (optional)
     * @param status status of action logs (optional)
     * @param userId user id of action logs (optional)
     * @param parentId parent action log id of action logs (optional)
     * @param createBegin create begin timestamp (optional)
     * @param createEnd create end timestamp (optional)
     * @param q query param of search (optional)
     * @param relatedResource related resource info of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listActionLogsCall(Long limit, Long offset, String action, String resourceType, String status, Long userId, Long parentId, String createBegin, String createEnd, String q, String relatedResource, String sort, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/action-logs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parent_id", parentId));
        if (createBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("create_begin", createBegin));
        if (createEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("create_end", createEnd));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (relatedResource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("related_resource", relatedResource));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listActionLogsValidateBeforeCall(Long limit, Long offset, String action, String resourceType, String status, Long userId, Long parentId, String createBegin, String createEnd, String q, String relatedResource, String sort, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listActionLogsCall(limit, offset, action, resourceType, status, userId, parentId, createBegin, createEnd, q, relatedResource, sort, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List action logs
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param action action of action logs (optional)
     * @param resourceType resource type of action logs (optional)
     * @param status status of action logs (optional)
     * @param userId user id of action logs (optional)
     * @param parentId parent action log id of action logs (optional)
     * @param createBegin create begin timestamp (optional)
     * @param createEnd create end timestamp (optional)
     * @param q query param of search (optional)
     * @param relatedResource related resource info of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @return ActionLogsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionLogsResp listActionLogs(Long limit, Long offset, String action, String resourceType, String status, Long userId, Long parentId, String createBegin, String createEnd, String q, String relatedResource, String sort, String clusterId) throws ApiException {
        ApiResponse<ActionLogsResp> resp = listActionLogsWithHttpInfo(limit, offset, action, resourceType, status, userId, parentId, createBegin, createEnd, q, relatedResource, sort, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List action logs
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param action action of action logs (optional)
     * @param resourceType resource type of action logs (optional)
     * @param status status of action logs (optional)
     * @param userId user id of action logs (optional)
     * @param parentId parent action log id of action logs (optional)
     * @param createBegin create begin timestamp (optional)
     * @param createEnd create end timestamp (optional)
     * @param q query param of search (optional)
     * @param relatedResource related resource info of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;ActionLogsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionLogsResp> listActionLogsWithHttpInfo(Long limit, Long offset, String action, String resourceType, String status, Long userId, Long parentId, String createBegin, String createEnd, String q, String relatedResource, String sort, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listActionLogsValidateBeforeCall(limit, offset, action, resourceType, status, userId, parentId, createBegin, createEnd, q, relatedResource, sort, clusterId, null, null);
        Type localVarReturnType = new TypeToken<ActionLogsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List action logs
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param action action of action logs (optional)
     * @param resourceType resource type of action logs (optional)
     * @param status status of action logs (optional)
     * @param userId user id of action logs (optional)
     * @param parentId parent action log id of action logs (optional)
     * @param createBegin create begin timestamp (optional)
     * @param createEnd create end timestamp (optional)
     * @param q query param of search (optional)
     * @param relatedResource related resource info of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listActionLogsAsync(Long limit, Long offset, String action, String resourceType, String status, Long userId, Long parentId, String createBegin, String createEnd, String q, String relatedResource, String sort, String clusterId, final ApiCallback<ActionLogsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listActionLogsValidateBeforeCall(limit, offset, action, resourceType, status, userId, parentId, createBegin, createEnd, q, relatedResource, sort, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionLogsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateActionLog
     * @param body action log info (required)
     * @param actionLogId action log id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateActionLogCall(ActionLogUpdateReq body, Long actionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/action-logs/{action_log_id}"
            .replaceAll("\\{" + "action_log_id" + "\\}", apiClient.escapeString(actionLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateActionLogValidateBeforeCall(ActionLogUpdateReq body, Long actionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateActionLog(Async)");
        }
        // verify the required parameter 'actionLogId' is set
        if (actionLogId == null) {
            throw new ApiException("Missing the required parameter 'actionLogId' when calling updateActionLog(Async)");
        }
        
        com.squareup.okhttp.Call call = updateActionLogCall(body, actionLogId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update action log
     * @param body action log info (required)
     * @param actionLogId action log id (required)
     * @return ActionLogResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionLogResp updateActionLog(ActionLogUpdateReq body, Long actionLogId) throws ApiException {
        ApiResponse<ActionLogResp> resp = updateActionLogWithHttpInfo(body, actionLogId);
        return resp.getData();
    }

    /**
     * 
     * update action log
     * @param body action log info (required)
     * @param actionLogId action log id (required)
     * @return ApiResponse&lt;ActionLogResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionLogResp> updateActionLogWithHttpInfo(ActionLogUpdateReq body, Long actionLogId) throws ApiException {
        com.squareup.okhttp.Call call = updateActionLogValidateBeforeCall(body, actionLogId, null, null);
        Type localVarReturnType = new TypeToken<ActionLogResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update action log
     * @param body action log info (required)
     * @param actionLogId action log id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateActionLogAsync(ActionLogUpdateReq body, Long actionLogId, final ApiCallback<ActionLogResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateActionLogValidateBeforeCall(body, actionLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionLogResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
