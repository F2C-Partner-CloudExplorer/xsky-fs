/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.FSKerberosCreateReq;
import xio.sds.client.model.FSKerberosResp;
import xio.sds.client.model.FSKerberosUpdateReq;
import xio.sds.client.model.FSKerberosesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FsKerberosesApi {
    private ApiClient apiClient;

    public FsKerberosesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FsKerberosesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createFSKerberos
     * @param body file storage kerberos info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFSKerberosCall(FSKerberosCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/fs-kerberoses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFSKerberosValidateBeforeCall(FSKerberosCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFSKerberos(Async)");
        }
        
        com.squareup.okhttp.Call call = createFSKerberosCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * create file storage kerberos
     * @param body file storage kerberos info (required)
     * @param clusterId cluster id (optional)
     * @return FSKerberosResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSKerberosResp createFSKerberos(FSKerberosCreateReq body, String clusterId) throws ApiException {
        ApiResponse<FSKerberosResp> resp = createFSKerberosWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * create file storage kerberos
     * @param body file storage kerberos info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;FSKerberosResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSKerberosResp> createFSKerberosWithHttpInfo(FSKerberosCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createFSKerberosValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<FSKerberosResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create file storage kerberos
     * @param body file storage kerberos info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFSKerberosAsync(FSKerberosCreateReq body, String clusterId, final ApiCallback<FSKerberosResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFSKerberosValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSKerberosResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFSKerberos
     * @param fsKerberosId file storage kerberos id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFSKerberosCall(Long fsKerberosId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fs-kerberoses/{fs_kerberos_id}"
            .replaceAll("\\{" + "fs_kerberos_id" + "\\}", apiClient.escapeString(fsKerberosId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFSKerberosValidateBeforeCall(Long fsKerberosId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fsKerberosId' is set
        if (fsKerberosId == null) {
            throw new ApiException("Missing the required parameter 'fsKerberosId' when calling deleteFSKerberos(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFSKerberosCall(fsKerberosId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete file storage kerberos
     * @param fsKerberosId file storage kerberos id (required)
     * @return FSKerberosResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSKerberosResp deleteFSKerberos(Long fsKerberosId) throws ApiException {
        ApiResponse<FSKerberosResp> resp = deleteFSKerberosWithHttpInfo(fsKerberosId);
        return resp.getData();
    }

    /**
     * 
     * Delete file storage kerberos
     * @param fsKerberosId file storage kerberos id (required)
     * @return ApiResponse&lt;FSKerberosResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSKerberosResp> deleteFSKerberosWithHttpInfo(Long fsKerberosId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFSKerberosValidateBeforeCall(fsKerberosId, null, null);
        Type localVarReturnType = new TypeToken<FSKerberosResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete file storage kerberos
     * @param fsKerberosId file storage kerberos id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFSKerberosAsync(Long fsKerberosId, final ApiCallback<FSKerberosResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFSKerberosValidateBeforeCall(fsKerberosId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSKerberosResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFSKerberos
     * @param fsKerberosId file storage kerberos id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFSKerberosCall(Long fsKerberosId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fs-kerberoses/{fs_kerberos_id}"
            .replaceAll("\\{" + "fs_kerberos_id" + "\\}", apiClient.escapeString(fsKerberosId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFSKerberosValidateBeforeCall(Long fsKerberosId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fsKerberosId' is set
        if (fsKerberosId == null) {
            throw new ApiException("Missing the required parameter 'fsKerberosId' when calling getFSKerberos(Async)");
        }
        
        com.squareup.okhttp.Call call = getFSKerberosCall(fsKerberosId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get a file storage kerberos
     * @param fsKerberosId file storage kerberos id (required)
     * @return FSKerberosResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSKerberosResp getFSKerberos(Long fsKerberosId) throws ApiException {
        ApiResponse<FSKerberosResp> resp = getFSKerberosWithHttpInfo(fsKerberosId);
        return resp.getData();
    }

    /**
     * 
     * Get a file storage kerberos
     * @param fsKerberosId file storage kerberos id (required)
     * @return ApiResponse&lt;FSKerberosResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSKerberosResp> getFSKerberosWithHttpInfo(Long fsKerberosId) throws ApiException {
        com.squareup.okhttp.Call call = getFSKerberosValidateBeforeCall(fsKerberosId, null, null);
        Type localVarReturnType = new TypeToken<FSKerberosResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a file storage kerberos
     * @param fsKerberosId file storage kerberos id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFSKerberosAsync(Long fsKerberosId, final ApiCallback<FSKerberosResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFSKerberosValidateBeforeCall(fsKerberosId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSKerberosResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFSKerberoses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param actionStatus kerberos action status: active, verifying, verifying_error (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listFSKerberosesCall(Long limit, Long offset, String clusterId, String q, String sort, String actionStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fs-kerberoses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (actionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action_status", actionStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFSKerberosesValidateBeforeCall(Long limit, Long offset, String clusterId, String q, String sort, String actionStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listFSKerberosesCall(limit, offset, clusterId, q, sort, actionStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List file storage kerberoses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param actionStatus kerberos action status: active, verifying, verifying_error (optional)
     * @return FSKerberosesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSKerberosesResp listFSKerberoses(Long limit, Long offset, String clusterId, String q, String sort, String actionStatus) throws ApiException {
        ApiResponse<FSKerberosesResp> resp = listFSKerberosesWithHttpInfo(limit, offset, clusterId, q, sort, actionStatus);
        return resp.getData();
    }

    /**
     * 
     * List file storage kerberoses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param actionStatus kerberos action status: active, verifying, verifying_error (optional)
     * @return ApiResponse&lt;FSKerberosesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSKerberosesResp> listFSKerberosesWithHttpInfo(Long limit, Long offset, String clusterId, String q, String sort, String actionStatus) throws ApiException {
        com.squareup.okhttp.Call call = listFSKerberosesValidateBeforeCall(limit, offset, clusterId, q, sort, actionStatus, null, null);
        Type localVarReturnType = new TypeToken<FSKerberosesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List file storage kerberoses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param actionStatus kerberos action status: active, verifying, verifying_error (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFSKerberosesAsync(Long limit, Long offset, String clusterId, String q, String sort, String actionStatus, final ApiCallback<FSKerberosesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFSKerberosesValidateBeforeCall(limit, offset, clusterId, q, sort, actionStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSKerberosesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFSKerberos
     * @param body file storage kerberos info (required)
     * @param fsKerberosId file storage kerberos id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFSKerberosCall(FSKerberosUpdateReq body, Long fsKerberosId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/fs-kerberoses/{fs_kerberos_id}"
            .replaceAll("\\{" + "fs_kerberos_id" + "\\}", apiClient.escapeString(fsKerberosId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFSKerberosValidateBeforeCall(FSKerberosUpdateReq body, Long fsKerberosId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFSKerberos(Async)");
        }
        // verify the required parameter 'fsKerberosId' is set
        if (fsKerberosId == null) {
            throw new ApiException("Missing the required parameter 'fsKerberosId' when calling updateFSKerberos(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFSKerberosCall(body, fsKerberosId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update a file storage kerberos
     * @param body file storage kerberos info (required)
     * @param fsKerberosId file storage kerberos id (required)
     * @return FSKerberosResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSKerberosResp updateFSKerberos(FSKerberosUpdateReq body, Long fsKerberosId) throws ApiException {
        ApiResponse<FSKerberosResp> resp = updateFSKerberosWithHttpInfo(body, fsKerberosId);
        return resp.getData();
    }

    /**
     * 
     * Update a file storage kerberos
     * @param body file storage kerberos info (required)
     * @param fsKerberosId file storage kerberos id (required)
     * @return ApiResponse&lt;FSKerberosResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSKerberosResp> updateFSKerberosWithHttpInfo(FSKerberosUpdateReq body, Long fsKerberosId) throws ApiException {
        com.squareup.okhttp.Call call = updateFSKerberosValidateBeforeCall(body, fsKerberosId, null, null);
        Type localVarReturnType = new TypeToken<FSKerberosResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a file storage kerberos
     * @param body file storage kerberos info (required)
     * @param fsKerberosId file storage kerberos id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFSKerberosAsync(FSKerberosUpdateReq body, Long fsKerberosId, final ApiCallback<FSKerberosResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFSKerberosValidateBeforeCall(body, fsKerberosId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSKerberosResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for verifyFSKerberos
     * @param fsKerberosId file storage kerberos id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verifyFSKerberosCall(Long fsKerberosId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fs-kerberoses/{fs_kerberos_id}:verify"
            .replaceAll("\\{" + "fs_kerberos_id" + "\\}", apiClient.escapeString(fsKerberosId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verifyFSKerberosValidateBeforeCall(Long fsKerberosId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fsKerberosId' is set
        if (fsKerberosId == null) {
            throw new ApiException("Missing the required parameter 'fsKerberosId' when calling verifyFSKerberos(Async)");
        }
        
        com.squareup.okhttp.Call call = verifyFSKerberosCall(fsKerberosId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Verify a fs kerberos info
     * @param fsKerberosId file storage kerberos id (required)
     * @return FSKerberosResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSKerberosResp verifyFSKerberos(Long fsKerberosId) throws ApiException {
        ApiResponse<FSKerberosResp> resp = verifyFSKerberosWithHttpInfo(fsKerberosId);
        return resp.getData();
    }

    /**
     * 
     * Verify a fs kerberos info
     * @param fsKerberosId file storage kerberos id (required)
     * @return ApiResponse&lt;FSKerberosResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSKerberosResp> verifyFSKerberosWithHttpInfo(Long fsKerberosId) throws ApiException {
        com.squareup.okhttp.Call call = verifyFSKerberosValidateBeforeCall(fsKerberosId, null, null);
        Type localVarReturnType = new TypeToken<FSKerberosResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify a fs kerberos info
     * @param fsKerberosId file storage kerberos id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyFSKerberosAsync(Long fsKerberosId, final ApiCallback<FSKerberosResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyFSKerberosValidateBeforeCall(fsKerberosId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSKerberosResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
