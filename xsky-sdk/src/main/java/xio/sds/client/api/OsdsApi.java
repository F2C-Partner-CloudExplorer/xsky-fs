/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.OsdCreateReq;
import xio.sds.client.model.OsdOverviewResp;
import xio.sds.client.model.OsdPredictionsResp;
import xio.sds.client.model.OsdRebuildReq;
import xio.sds.client.model.OsdResp;
import xio.sds.client.model.OsdSamplesResp;
import xio.sds.client.model.OsdUpdateNumaNodeReq;
import xio.sds.client.model.OsdsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OsdsApi {
    private ApiClient apiClient;

    public OsdsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OsdsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for activateOsd
     * @param osdId osd id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call activateOsdCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}:activate"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call activateOsdValidateBeforeCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling activateOsd(Async)");
        }
        
        com.squareup.okhttp.Call call = activateOsdCall(osdId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Try to activate osd
     * @param osdId osd id (required)
     * @return OsdResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdResp activateOsd(Long osdId) throws ApiException {
        ApiResponse<OsdResp> resp = activateOsdWithHttpInfo(osdId);
        return resp.getData();
    }

    /**
     * 
     * Try to activate osd
     * @param osdId osd id (required)
     * @return ApiResponse&lt;OsdResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdResp> activateOsdWithHttpInfo(Long osdId) throws ApiException {
        com.squareup.okhttp.Call call = activateOsdValidateBeforeCall(osdId, null, null);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Try to activate osd
     * @param osdId osd id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call activateOsdAsync(Long osdId, final ApiCallback<OsdResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = activateOsdValidateBeforeCall(osdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOsd
     * @param body osd info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOsdCall(OsdCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/osds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOsdValidateBeforeCall(OsdCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOsd(Async)");
        }
        
        com.squareup.okhttp.Call call = createOsdCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create osd service on specific disk
     * @param body osd info (required)
     * @return OsdResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdResp createOsd(OsdCreateReq body) throws ApiException {
        ApiResponse<OsdResp> resp = createOsdWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Create osd service on specific disk
     * @param body osd info (required)
     * @return ApiResponse&lt;OsdResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdResp> createOsdWithHttpInfo(OsdCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createOsdValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create osd service on specific disk
     * @param body osd info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOsdAsync(OsdCreateReq body, final ApiCallback<OsdResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOsdValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteOsd
     * @param osdId osd id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOsdCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOsdValidateBeforeCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling deleteOsd(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteOsdCall(osdId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove an osd from cluster
     * @param osdId osd id (required)
     * @return OsdResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdResp deleteOsd(Long osdId) throws ApiException {
        ApiResponse<OsdResp> resp = deleteOsdWithHttpInfo(osdId);
        return resp.getData();
    }

    /**
     * 
     * remove an osd from cluster
     * @param osdId osd id (required)
     * @return ApiResponse&lt;OsdResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdResp> deleteOsdWithHttpInfo(Long osdId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOsdValidateBeforeCall(osdId, null, null);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove an osd from cluster
     * @param osdId osd id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOsdAsync(Long osdId, final ApiCallback<OsdResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOsdValidateBeforeCall(osdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOsd
     * @param osdId osd id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOsdCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOsdValidateBeforeCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling getOsd(Async)");
        }
        
        com.squareup.okhttp.Call call = getOsdCall(osdId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get an osd
     * @param osdId osd id (required)
     * @return OsdResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdResp getOsd(Long osdId) throws ApiException {
        ApiResponse<OsdResp> resp = getOsdWithHttpInfo(osdId);
        return resp.getData();
    }

    /**
     * 
     * get an osd
     * @param osdId osd id (required)
     * @return ApiResponse&lt;OsdResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdResp> getOsdWithHttpInfo(Long osdId) throws ApiException {
        com.squareup.okhttp.Call call = getOsdValidateBeforeCall(osdId, null, null);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get an osd
     * @param osdId osd id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOsdAsync(Long osdId, final ApiCallback<OsdResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOsdValidateBeforeCall(osdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOsdPredictions
     * @param osdId osd id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOsdPredictionsCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}/predictions"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOsdPredictionsValidateBeforeCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling getOsdPredictions(Async)");
        }
        
        com.squareup.okhttp.Call call = getOsdPredictionsCall(osdId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a osd&#x27;s prediction
     * @param osdId osd id (required)
     * @return OsdPredictionsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdPredictionsResp getOsdPredictions(Long osdId) throws ApiException {
        ApiResponse<OsdPredictionsResp> resp = getOsdPredictionsWithHttpInfo(osdId);
        return resp.getData();
    }

    /**
     * 
     * get a osd&#x27;s prediction
     * @param osdId osd id (required)
     * @return ApiResponse&lt;OsdPredictionsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdPredictionsResp> getOsdPredictionsWithHttpInfo(Long osdId) throws ApiException {
        com.squareup.okhttp.Call call = getOsdPredictionsValidateBeforeCall(osdId, null, null);
        Type localVarReturnType = new TypeToken<OsdPredictionsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a osd&#x27;s prediction
     * @param osdId osd id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOsdPredictionsAsync(Long osdId, final ApiCallback<OsdPredictionsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOsdPredictionsValidateBeforeCall(osdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdPredictionsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOsdSamples
     * @param osdId osd id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOsdSamplesCall(Long osdId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}/samples"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOsdSamplesValidateBeforeCall(Long osdId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling getOsdSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getOsdSamplesCall(osdId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a osd&#x27;s samples
     * @param osdId osd id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return OsdSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdSamplesResp getOsdSamples(Long osdId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<OsdSamplesResp> resp = getOsdSamplesWithHttpInfo(osdId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get a osd&#x27;s samples
     * @param osdId osd id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;OsdSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdSamplesResp> getOsdSamplesWithHttpInfo(Long osdId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getOsdSamplesValidateBeforeCall(osdId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<OsdSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a osd&#x27;s samples
     * @param osdId osd id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOsdSamplesAsync(Long osdId, String durationBegin, String durationEnd, String period, final ApiCallback<OsdSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOsdSamplesValidateBeforeCall(osdId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOsdsOverview
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOsdsOverviewCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOsdsOverviewValidateBeforeCall(String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getOsdsOverviewCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get osd overview in the cluster
     * @param clusterId cluster id (optional)
     * @return OsdOverviewResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdOverviewResp getOsdsOverview(String clusterId) throws ApiException {
        ApiResponse<OsdOverviewResp> resp = getOsdsOverviewWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * 
     * Get osd overview in the cluster
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;OsdOverviewResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdOverviewResp> getOsdsOverviewWithHttpInfo(String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = getOsdsOverviewValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<OsdOverviewResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get osd overview in the cluster
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOsdsOverviewAsync(String clusterId, final ApiCallback<OsdOverviewResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOsdsOverviewValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdOverviewResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOsds
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param hostId host id (optional)
     * @param clusterId cluster id (optional)
     * @param diskIds disk ids (optional)
     * @param poolId pool id (optional)
     * @param bindPoolId bind pool id (optional)
     * @param osdGroupId osd group id (optional)
     * @param type osd type: HDD, SSD, Hybrid (optional)
     * @param role osd role: index or data (optional)
     * @param statusClass osd status class: active, warning, error, offline, doing (optional)
     * @param withCompound with compound osd (optional)
     * @param withHybrid with hybrid osd (optional)
     * @param cacheDiskId cache disk id (optional)
     * @param ids comma separate osd ids (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOsdsCall(Long limit, Long offset, Long hostId, String clusterId, Long diskIds, Long poolId, Long bindPoolId, Long osdGroupId, String type, String role, String statusClass, Boolean withCompound, Boolean withHybrid, Long cacheDiskId, String ids, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (hostId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("host_id", hostId));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (diskIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disk_ids", diskIds));
        if (poolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pool_id", poolId));
        if (bindPoolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bind_pool_id", bindPoolId));
        if (osdGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("osd_group_id", osdGroupId));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        if (statusClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status_class", statusClass));
        if (withCompound != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_compound", withCompound));
        if (withHybrid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hybrid", withHybrid));
        if (cacheDiskId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cache_disk_id", cacheDiskId));
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOsdsValidateBeforeCall(Long limit, Long offset, Long hostId, String clusterId, Long diskIds, Long poolId, Long bindPoolId, Long osdGroupId, String type, String role, String statusClass, Boolean withCompound, Boolean withHybrid, Long cacheDiskId, String ids, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listOsdsCall(limit, offset, hostId, clusterId, diskIds, poolId, bindPoolId, osdGroupId, type, role, statusClass, withCompound, withHybrid, cacheDiskId, ids, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List all osds in the cluster
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param hostId host id (optional)
     * @param clusterId cluster id (optional)
     * @param diskIds disk ids (optional)
     * @param poolId pool id (optional)
     * @param bindPoolId bind pool id (optional)
     * @param osdGroupId osd group id (optional)
     * @param type osd type: HDD, SSD, Hybrid (optional)
     * @param role osd role: index or data (optional)
     * @param statusClass osd status class: active, warning, error, offline, doing (optional)
     * @param withCompound with compound osd (optional)
     * @param withHybrid with hybrid osd (optional)
     * @param cacheDiskId cache disk id (optional)
     * @param ids comma separate osd ids (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return OsdsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdsResp listOsds(Long limit, Long offset, Long hostId, String clusterId, Long diskIds, Long poolId, Long bindPoolId, Long osdGroupId, String type, String role, String statusClass, Boolean withCompound, Boolean withHybrid, Long cacheDiskId, String ids, String q, String sort) throws ApiException {
        ApiResponse<OsdsResp> resp = listOsdsWithHttpInfo(limit, offset, hostId, clusterId, diskIds, poolId, bindPoolId, osdGroupId, type, role, statusClass, withCompound, withHybrid, cacheDiskId, ids, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List all osds in the cluster
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param hostId host id (optional)
     * @param clusterId cluster id (optional)
     * @param diskIds disk ids (optional)
     * @param poolId pool id (optional)
     * @param bindPoolId bind pool id (optional)
     * @param osdGroupId osd group id (optional)
     * @param type osd type: HDD, SSD, Hybrid (optional)
     * @param role osd role: index or data (optional)
     * @param statusClass osd status class: active, warning, error, offline, doing (optional)
     * @param withCompound with compound osd (optional)
     * @param withHybrid with hybrid osd (optional)
     * @param cacheDiskId cache disk id (optional)
     * @param ids comma separate osd ids (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;OsdsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdsResp> listOsdsWithHttpInfo(Long limit, Long offset, Long hostId, String clusterId, Long diskIds, Long poolId, Long bindPoolId, Long osdGroupId, String type, String role, String statusClass, Boolean withCompound, Boolean withHybrid, Long cacheDiskId, String ids, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listOsdsValidateBeforeCall(limit, offset, hostId, clusterId, diskIds, poolId, bindPoolId, osdGroupId, type, role, statusClass, withCompound, withHybrid, cacheDiskId, ids, q, sort, null, null);
        Type localVarReturnType = new TypeToken<OsdsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all osds in the cluster
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param hostId host id (optional)
     * @param clusterId cluster id (optional)
     * @param diskIds disk ids (optional)
     * @param poolId pool id (optional)
     * @param bindPoolId bind pool id (optional)
     * @param osdGroupId osd group id (optional)
     * @param type osd type: HDD, SSD, Hybrid (optional)
     * @param role osd role: index or data (optional)
     * @param statusClass osd status class: active, warning, error, offline, doing (optional)
     * @param withCompound with compound osd (optional)
     * @param withHybrid with hybrid osd (optional)
     * @param cacheDiskId cache disk id (optional)
     * @param ids comma separate osd ids (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOsdsAsync(Long limit, Long offset, Long hostId, String clusterId, Long diskIds, Long poolId, Long bindPoolId, Long osdGroupId, String type, String role, String statusClass, Boolean withCompound, Boolean withHybrid, Long cacheDiskId, String ids, String q, String sort, final ApiCallback<OsdsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOsdsValidateBeforeCall(limit, offset, hostId, clusterId, diskIds, poolId, bindPoolId, osdGroupId, type, role, statusClass, withCompound, withHybrid, cacheDiskId, ids, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for maintainOsd
     * @param osdId osd id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call maintainOsdCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}:maintain"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call maintainOsdValidateBeforeCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling maintainOsd(Async)");
        }
        
        com.squareup.okhttp.Call call = maintainOsdCall(osdId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Put osd in maintained status
     * @param osdId osd id (required)
     * @return OsdResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdResp maintainOsd(Long osdId) throws ApiException {
        ApiResponse<OsdResp> resp = maintainOsdWithHttpInfo(osdId);
        return resp.getData();
    }

    /**
     * 
     * Put osd in maintained status
     * @param osdId osd id (required)
     * @return ApiResponse&lt;OsdResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdResp> maintainOsdWithHttpInfo(Long osdId) throws ApiException {
        com.squareup.okhttp.Call call = maintainOsdValidateBeforeCall(osdId, null, null);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Put osd in maintained status
     * @param osdId osd id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call maintainOsdAsync(Long osdId, final ApiCallback<OsdResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = maintainOsdValidateBeforeCall(osdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rebuildOsd
     * @param body osd info (required)
     * @param osdId osd id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rebuildOsdCall(OsdRebuildReq body, Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}:rebuild"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rebuildOsdValidateBeforeCall(OsdRebuildReq body, Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rebuildOsd(Async)");
        }
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling rebuildOsd(Async)");
        }
        
        com.squareup.okhttp.Call call = rebuildOsdCall(body, osdId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * rebuild an osd from cluster pool
     * @param body osd info (required)
     * @param osdId osd id (required)
     * @return OsdResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdResp rebuildOsd(OsdRebuildReq body, Long osdId) throws ApiException {
        ApiResponse<OsdResp> resp = rebuildOsdWithHttpInfo(body, osdId);
        return resp.getData();
    }

    /**
     * 
     * rebuild an osd from cluster pool
     * @param body osd info (required)
     * @param osdId osd id (required)
     * @return ApiResponse&lt;OsdResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdResp> rebuildOsdWithHttpInfo(OsdRebuildReq body, Long osdId) throws ApiException {
        com.squareup.okhttp.Call call = rebuildOsdValidateBeforeCall(body, osdId, null, null);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * rebuild an osd from cluster pool
     * @param body osd info (required)
     * @param osdId osd id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rebuildOsdAsync(OsdRebuildReq body, Long osdId, final ApiCallback<OsdResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rebuildOsdValidateBeforeCall(body, osdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for switchOsdRole
     * @param osdId osd id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call switchOsdRoleCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}:switch-role"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call switchOsdRoleValidateBeforeCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling switchOsdRole(Async)");
        }
        
        com.squareup.okhttp.Call call = switchOsdRoleCall(osdId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Switch osd role to compound
     * @param osdId osd id (required)
     * @return OsdResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdResp switchOsdRole(Long osdId) throws ApiException {
        ApiResponse<OsdResp> resp = switchOsdRoleWithHttpInfo(osdId);
        return resp.getData();
    }

    /**
     * 
     * Switch osd role to compound
     * @param osdId osd id (required)
     * @return ApiResponse&lt;OsdResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdResp> switchOsdRoleWithHttpInfo(Long osdId) throws ApiException {
        com.squareup.okhttp.Call call = switchOsdRoleValidateBeforeCall(osdId, null, null);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Switch osd role to compound
     * @param osdId osd id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call switchOsdRoleAsync(Long osdId, final ApiCallback<OsdResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = switchOsdRoleValidateBeforeCall(osdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unmaintainOsd
     * @param osdId osd id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unmaintainOsdCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}:unmaintain"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unmaintainOsdValidateBeforeCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling unmaintainOsd(Async)");
        }
        
        com.squareup.okhttp.Call call = unmaintainOsdCall(osdId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Put osd out of maintained status
     * @param osdId osd id (required)
     * @return OsdResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdResp unmaintainOsd(Long osdId) throws ApiException {
        ApiResponse<OsdResp> resp = unmaintainOsdWithHttpInfo(osdId);
        return resp.getData();
    }

    /**
     * 
     * Put osd out of maintained status
     * @param osdId osd id (required)
     * @return ApiResponse&lt;OsdResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdResp> unmaintainOsdWithHttpInfo(Long osdId) throws ApiException {
        com.squareup.okhttp.Call call = unmaintainOsdValidateBeforeCall(osdId, null, null);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Put osd out of maintained status
     * @param osdId osd id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unmaintainOsdAsync(Long osdId, final ApiCallback<OsdResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unmaintainOsdValidateBeforeCall(osdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsetOsdIsolation
     * @param osdId osd id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsetOsdIsolationCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}:unset-isolation"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsetOsdIsolationValidateBeforeCall(Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling unsetOsdIsolation(Async)");
        }
        
        com.squareup.okhttp.Call call = unsetOsdIsolationCall(osdId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unset osd in isolation status
     * @param osdId osd id (required)
     * @return OsdResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdResp unsetOsdIsolation(Long osdId) throws ApiException {
        ApiResponse<OsdResp> resp = unsetOsdIsolationWithHttpInfo(osdId);
        return resp.getData();
    }

    /**
     * 
     * Unset osd in isolation status
     * @param osdId osd id (required)
     * @return ApiResponse&lt;OsdResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdResp> unsetOsdIsolationWithHttpInfo(Long osdId) throws ApiException {
        com.squareup.okhttp.Call call = unsetOsdIsolationValidateBeforeCall(osdId, null, null);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unset osd in isolation status
     * @param osdId osd id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsetOsdIsolationAsync(Long osdId, final ApiCallback<OsdResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsetOsdIsolationValidateBeforeCall(osdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOsdNumaNode
     * @param body osd numa node (required)
     * @param osdId osd id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOsdNumaNodeCall(OsdUpdateNumaNodeReq body, Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/osds/{osd_id}:update-numa-node"
            .replaceAll("\\{" + "osd_id" + "\\}", apiClient.escapeString(osdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOsdNumaNodeValidateBeforeCall(OsdUpdateNumaNodeReq body, Long osdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOsdNumaNode(Async)");
        }
        // verify the required parameter 'osdId' is set
        if (osdId == null) {
            throw new ApiException("Missing the required parameter 'osdId' when calling updateOsdNumaNode(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOsdNumaNodeCall(body, osdId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update osd numa node
     * @param body osd numa node (required)
     * @param osdId osd id (required)
     * @return OsdResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OsdResp updateOsdNumaNode(OsdUpdateNumaNodeReq body, Long osdId) throws ApiException {
        ApiResponse<OsdResp> resp = updateOsdNumaNodeWithHttpInfo(body, osdId);
        return resp.getData();
    }

    /**
     * 
     * Update osd numa node
     * @param body osd numa node (required)
     * @param osdId osd id (required)
     * @return ApiResponse&lt;OsdResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OsdResp> updateOsdNumaNodeWithHttpInfo(OsdUpdateNumaNodeReq body, Long osdId) throws ApiException {
        com.squareup.okhttp.Call call = updateOsdNumaNodeValidateBeforeCall(body, osdId, null, null);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update osd numa node
     * @param body osd numa node (required)
     * @param osdId osd id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOsdNumaNodeAsync(OsdUpdateNumaNodeReq body, Long osdId, final ApiCallback<OsdResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOsdNumaNodeValidateBeforeCall(body, osdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OsdResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
