/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.AlertContactsResp;
import xio.sds.client.model.AlertStrategyReq;
import xio.sds.client.model.AlertStrategyResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertStrategiesApi {
    private ApiClient apiClient;

    public AlertStrategiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertStrategiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAlertStrategy
     * @param body alert strategy (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAlertStrategyCall(AlertStrategyReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/alert-strategies/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAlertStrategyValidateBeforeCall(AlertStrategyReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAlertStrategy(Async)");
        }
        
        com.squareup.okhttp.Call call = createAlertStrategyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * create strategy of alert
     * @param body alert strategy (required)
     * @return AlertStrategyReq
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertStrategyReq createAlertStrategy(AlertStrategyReq body) throws ApiException {
        ApiResponse<AlertStrategyReq> resp = createAlertStrategyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * create strategy of alert
     * @param body alert strategy (required)
     * @return ApiResponse&lt;AlertStrategyReq&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertStrategyReq> createAlertStrategyWithHttpInfo(AlertStrategyReq body) throws ApiException {
        com.squareup.okhttp.Call call = createAlertStrategyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AlertStrategyReq>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create strategy of alert
     * @param body alert strategy (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAlertStrategyAsync(AlertStrategyReq body, final ApiCallback<AlertStrategyReq> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAlertStrategyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertStrategyReq>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAlertStrategy
     * @param alertStrategyId alert strategy id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAlertStrategyCall(Long alertStrategyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-strategies/{alert_strategy_id}"
            .replaceAll("\\{" + "alert_strategy_id" + "\\}", apiClient.escapeString(alertStrategyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAlertStrategyValidateBeforeCall(Long alertStrategyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertStrategyId' is set
        if (alertStrategyId == null) {
            throw new ApiException("Missing the required parameter 'alertStrategyId' when calling deleteAlertStrategy(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAlertStrategyCall(alertStrategyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete alert strategy
     * @param alertStrategyId alert strategy id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAlertStrategy(Long alertStrategyId) throws ApiException {
        deleteAlertStrategyWithHttpInfo(alertStrategyId);
    }

    /**
     * 
     * Delete alert strategy
     * @param alertStrategyId alert strategy id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAlertStrategyWithHttpInfo(Long alertStrategyId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAlertStrategyValidateBeforeCall(alertStrategyId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete alert strategy
     * @param alertStrategyId alert strategy id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAlertStrategyAsync(Long alertStrategyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAlertStrategyValidateBeforeCall(alertStrategyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAlertStrategy
     * @param alertStrategyId alert strategy id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlertStrategyCall(Long alertStrategyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-strategies/{alert_strategy_id}"
            .replaceAll("\\{" + "alert_strategy_id" + "\\}", apiClient.escapeString(alertStrategyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlertStrategyValidateBeforeCall(Long alertStrategyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertStrategyId' is set
        if (alertStrategyId == null) {
            throw new ApiException("Missing the required parameter 'alertStrategyId' when calling getAlertStrategy(Async)");
        }
        
        com.squareup.okhttp.Call call = getAlertStrategyCall(alertStrategyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a alert strategy
     * @param alertStrategyId alert strategy id (required)
     * @return AlertStrategyResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertStrategyResp getAlertStrategy(Long alertStrategyId) throws ApiException {
        ApiResponse<AlertStrategyResp> resp = getAlertStrategyWithHttpInfo(alertStrategyId);
        return resp.getData();
    }

    /**
     * 
     * get a alert strategy
     * @param alertStrategyId alert strategy id (required)
     * @return ApiResponse&lt;AlertStrategyResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertStrategyResp> getAlertStrategyWithHttpInfo(Long alertStrategyId) throws ApiException {
        com.squareup.okhttp.Call call = getAlertStrategyValidateBeforeCall(alertStrategyId, null, null);
        Type localVarReturnType = new TypeToken<AlertStrategyResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a alert strategy
     * @param alertStrategyId alert strategy id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlertStrategyAsync(Long alertStrategyId, final ApiCallback<AlertStrategyResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlertStrategyValidateBeforeCall(alertStrategyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertStrategyResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAlertStrategies
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of alert contact (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param durationLimit duration limit param (optional)
     * @param durationOffset duration offset param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAlertStrategiesCall(Long limit, Long offset, String name, String durationBegin, String durationEnd, Long durationLimit, Long durationOffset, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-strategies/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (durationLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_limit", durationLimit));
        if (durationOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_offset", durationOffset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAlertStrategiesValidateBeforeCall(Long limit, Long offset, String name, String durationBegin, String durationEnd, Long durationLimit, Long durationOffset, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listAlertStrategiesCall(limit, offset, name, durationBegin, durationEnd, durationLimit, durationOffset, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List all alert contacts
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of alert contact (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param durationLimit duration limit param (optional)
     * @param durationOffset duration offset param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return AlertContactsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertContactsResp listAlertStrategies(Long limit, Long offset, String name, String durationBegin, String durationEnd, Long durationLimit, Long durationOffset, String q, String sort) throws ApiException {
        ApiResponse<AlertContactsResp> resp = listAlertStrategiesWithHttpInfo(limit, offset, name, durationBegin, durationEnd, durationLimit, durationOffset, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List all alert contacts
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of alert contact (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param durationLimit duration limit param (optional)
     * @param durationOffset duration offset param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;AlertContactsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertContactsResp> listAlertStrategiesWithHttpInfo(Long limit, Long offset, String name, String durationBegin, String durationEnd, Long durationLimit, Long durationOffset, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listAlertStrategiesValidateBeforeCall(limit, offset, name, durationBegin, durationEnd, durationLimit, durationOffset, q, sort, null, null);
        Type localVarReturnType = new TypeToken<AlertContactsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alert contacts
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of alert contact (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param durationLimit duration limit param (optional)
     * @param durationOffset duration offset param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAlertStrategiesAsync(Long limit, Long offset, String name, String durationBegin, String durationEnd, Long durationLimit, Long durationOffset, String q, String sort, final ApiCallback<AlertContactsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAlertStrategiesValidateBeforeCall(limit, offset, name, durationBegin, durationEnd, durationLimit, durationOffset, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertContactsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUpdateAlertStrategyAlertContact
     * @param body strategy update request (required)
     * @param alertStrategyId alert strategy id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUpdateAlertStrategyAlertContactCall(AlertStrategyReq body, Long alertStrategyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/alert-strategies/{alert_strategy_id}"
            .replaceAll("\\{" + "alert_strategy_id" + "\\}", apiClient.escapeString(alertStrategyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUpdateAlertStrategyAlertContactValidateBeforeCall(AlertStrategyReq body, Long alertStrategyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUpdateAlertStrategyAlertContact(Async)");
        }
        // verify the required parameter 'alertStrategyId' is set
        if (alertStrategyId == null) {
            throw new ApiException("Missing the required parameter 'alertStrategyId' when calling updateUpdateAlertStrategyAlertContact(Async)");
        }
        
        com.squareup.okhttp.Call call = updateUpdateAlertStrategyAlertContactCall(body, alertStrategyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update alert strategy
     * @param body strategy update request (required)
     * @param alertStrategyId alert strategy id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUpdateAlertStrategyAlertContact(AlertStrategyReq body, Long alertStrategyId) throws ApiException {
        updateUpdateAlertStrategyAlertContactWithHttpInfo(body, alertStrategyId);
    }

    /**
     * 
     * update alert strategy
     * @param body strategy update request (required)
     * @param alertStrategyId alert strategy id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUpdateAlertStrategyAlertContactWithHttpInfo(AlertStrategyReq body, Long alertStrategyId) throws ApiException {
        com.squareup.okhttp.Call call = updateUpdateAlertStrategyAlertContactValidateBeforeCall(body, alertStrategyId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * update alert strategy
     * @param body strategy update request (required)
     * @param alertStrategyId alert strategy id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUpdateAlertStrategyAlertContactAsync(AlertStrategyReq body, Long alertStrategyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUpdateAlertStrategyAlertContactValidateBeforeCall(body, alertStrategyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
