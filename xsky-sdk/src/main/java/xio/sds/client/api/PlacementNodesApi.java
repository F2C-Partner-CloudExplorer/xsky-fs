/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.PlacementNodeCreateReq;
import xio.sds.client.model.PlacementNodeResp;
import xio.sds.client.model.PlacementNodeTopologyResp;
import xio.sds.client.model.PlacementNodeUpdateReq;
import xio.sds.client.model.PlacementNodesResp;
import xio.sds.client.model.TopologyFromOsdReq;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlacementNodesApi {
    private ApiClient apiClient;

    public PlacementNodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlacementNodesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPlacementNode
     * @param body placement node info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPlacementNodeCall(PlacementNodeCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/placement-nodes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPlacementNodeValidateBeforeCall(PlacementNodeCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPlacementNode(Async)");
        }
        
        com.squareup.okhttp.Call call = createPlacementNodeCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create placement node
     * @param body placement node info (required)
     * @return PlacementNodeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlacementNodeResp createPlacementNode(PlacementNodeCreateReq body) throws ApiException {
        ApiResponse<PlacementNodeResp> resp = createPlacementNodeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Create placement node
     * @param body placement node info (required)
     * @return ApiResponse&lt;PlacementNodeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlacementNodeResp> createPlacementNodeWithHttpInfo(PlacementNodeCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createPlacementNodeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PlacementNodeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create placement node
     * @param body placement node info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPlacementNodeAsync(PlacementNodeCreateReq body, final ApiCallback<PlacementNodeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPlacementNodeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacementNodeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePlacementNode
     * @param placementNodeId placement node id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePlacementNodeCall(Long placementNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/placement-nodes/{placement_node_id}"
            .replaceAll("\\{" + "placement_node_id" + "\\}", apiClient.escapeString(placementNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePlacementNodeValidateBeforeCall(Long placementNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'placementNodeId' is set
        if (placementNodeId == null) {
            throw new ApiException("Missing the required parameter 'placementNodeId' when calling deletePlacementNode(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePlacementNodeCall(placementNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete placement node
     * @param placementNodeId placement node id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePlacementNode(Long placementNodeId) throws ApiException {
        deletePlacementNodeWithHttpInfo(placementNodeId);
    }

    /**
     * 
     * delete placement node
     * @param placementNodeId placement node id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePlacementNodeWithHttpInfo(Long placementNodeId) throws ApiException {
        com.squareup.okhttp.Call call = deletePlacementNodeValidateBeforeCall(placementNodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * delete placement node
     * @param placementNodeId placement node id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePlacementNodeAsync(Long placementNodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePlacementNodeValidateBeforeCall(placementNodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPlacementNode
     * @param placementNodeId placement node id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlacementNodeCall(Long placementNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/placement-nodes/{placement_node_id}"
            .replaceAll("\\{" + "placement_node_id" + "\\}", apiClient.escapeString(placementNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlacementNodeValidateBeforeCall(Long placementNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'placementNodeId' is set
        if (placementNodeId == null) {
            throw new ApiException("Missing the required parameter 'placementNodeId' when calling getPlacementNode(Async)");
        }
        
        com.squareup.okhttp.Call call = getPlacementNodeCall(placementNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get placement node
     * @param placementNodeId placement node id (required)
     * @return PlacementNodeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlacementNodeResp getPlacementNode(Long placementNodeId) throws ApiException {
        ApiResponse<PlacementNodeResp> resp = getPlacementNodeWithHttpInfo(placementNodeId);
        return resp.getData();
    }

    /**
     * 
     * Get placement node
     * @param placementNodeId placement node id (required)
     * @return ApiResponse&lt;PlacementNodeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlacementNodeResp> getPlacementNodeWithHttpInfo(Long placementNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getPlacementNodeValidateBeforeCall(placementNodeId, null, null);
        Type localVarReturnType = new TypeToken<PlacementNodeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get placement node
     * @param placementNodeId placement node id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlacementNodeAsync(Long placementNodeId, final ApiCallback<PlacementNodeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlacementNodeValidateBeforeCall(placementNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacementNodeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPlacementNodeTopology
     * @param placementNodeId placement node id (required)
     * @param clusterId cluster id (optional)
     * @param osdType osd type (optional)
     * @param osdRole osd role (optional)
     * @param withCompound with compound osd (optional)
     * @param withHybrid with hybrid osd (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlacementNodeTopologyCall(Long placementNodeId, String clusterId, String osdType, String osdRole, Boolean withCompound, Boolean withHybrid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/placement-nodes/{placement_node_id}/topology"
            .replaceAll("\\{" + "placement_node_id" + "\\}", apiClient.escapeString(placementNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (osdType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("osd_type", osdType));
        if (osdRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("osd_role", osdRole));
        if (withCompound != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_compound", withCompound));
        if (withHybrid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hybrid", withHybrid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlacementNodeTopologyValidateBeforeCall(Long placementNodeId, String clusterId, String osdType, String osdRole, Boolean withCompound, Boolean withHybrid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'placementNodeId' is set
        if (placementNodeId == null) {
            throw new ApiException("Missing the required parameter 'placementNodeId' when calling getPlacementNodeTopology(Async)");
        }
        
        com.squareup.okhttp.Call call = getPlacementNodeTopologyCall(placementNodeId, clusterId, osdType, osdRole, withCompound, withHybrid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get subtree topology of placement node
     * @param placementNodeId placement node id (required)
     * @param clusterId cluster id (optional)
     * @param osdType osd type (optional)
     * @param osdRole osd role (optional)
     * @param withCompound with compound osd (optional)
     * @param withHybrid with hybrid osd (optional)
     * @return PlacementNodeTopologyResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlacementNodeTopologyResp getPlacementNodeTopology(Long placementNodeId, String clusterId, String osdType, String osdRole, Boolean withCompound, Boolean withHybrid) throws ApiException {
        ApiResponse<PlacementNodeTopologyResp> resp = getPlacementNodeTopologyWithHttpInfo(placementNodeId, clusterId, osdType, osdRole, withCompound, withHybrid);
        return resp.getData();
    }

    /**
     * 
     * Get subtree topology of placement node
     * @param placementNodeId placement node id (required)
     * @param clusterId cluster id (optional)
     * @param osdType osd type (optional)
     * @param osdRole osd role (optional)
     * @param withCompound with compound osd (optional)
     * @param withHybrid with hybrid osd (optional)
     * @return ApiResponse&lt;PlacementNodeTopologyResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlacementNodeTopologyResp> getPlacementNodeTopologyWithHttpInfo(Long placementNodeId, String clusterId, String osdType, String osdRole, Boolean withCompound, Boolean withHybrid) throws ApiException {
        com.squareup.okhttp.Call call = getPlacementNodeTopologyValidateBeforeCall(placementNodeId, clusterId, osdType, osdRole, withCompound, withHybrid, null, null);
        Type localVarReturnType = new TypeToken<PlacementNodeTopologyResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get subtree topology of placement node
     * @param placementNodeId placement node id (required)
     * @param clusterId cluster id (optional)
     * @param osdType osd type (optional)
     * @param osdRole osd role (optional)
     * @param withCompound with compound osd (optional)
     * @param withHybrid with hybrid osd (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlacementNodeTopologyAsync(Long placementNodeId, String clusterId, String osdType, String osdRole, Boolean withCompound, Boolean withHybrid, final ApiCallback<PlacementNodeTopologyResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlacementNodeTopologyValidateBeforeCall(placementNodeId, clusterId, osdType, osdRole, withCompound, withHybrid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacementNodeTopologyResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTopologyFromOsds
     * @param body osds (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTopologyFromOsdsCall(TopologyFromOsdReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/placement-nodes/:topology-from-osd";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopologyFromOsdsValidateBeforeCall(TopologyFromOsdReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getTopologyFromOsds(Async)");
        }
        
        com.squareup.okhttp.Call call = getTopologyFromOsdsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get topology from osds
     * @param body osds (required)
     * @return PlacementNodeTopologyResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlacementNodeTopologyResp getTopologyFromOsds(TopologyFromOsdReq body) throws ApiException {
        ApiResponse<PlacementNodeTopologyResp> resp = getTopologyFromOsdsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Get topology from osds
     * @param body osds (required)
     * @return ApiResponse&lt;PlacementNodeTopologyResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlacementNodeTopologyResp> getTopologyFromOsdsWithHttpInfo(TopologyFromOsdReq body) throws ApiException {
        com.squareup.okhttp.Call call = getTopologyFromOsdsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PlacementNodeTopologyResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get topology from osds
     * @param body osds (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopologyFromOsdsAsync(TopologyFromOsdReq body, final ApiCallback<PlacementNodeTopologyResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopologyFromOsdsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacementNodeTopologyResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPlacementNodes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param type filter placement nodes by type (optional)
     * @param parentId filter placement nodes by parent (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPlacementNodesCall(Long limit, Long offset, String type, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/placement-nodes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parent_id", parentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPlacementNodesValidateBeforeCall(Long limit, Long offset, String type, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listPlacementNodesCall(limit, offset, type, parentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List placement nodes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param type filter placement nodes by type (optional)
     * @param parentId filter placement nodes by parent (optional)
     * @return PlacementNodesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlacementNodesResp listPlacementNodes(Long limit, Long offset, String type, Long parentId) throws ApiException {
        ApiResponse<PlacementNodesResp> resp = listPlacementNodesWithHttpInfo(limit, offset, type, parentId);
        return resp.getData();
    }

    /**
     * 
     * List placement nodes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param type filter placement nodes by type (optional)
     * @param parentId filter placement nodes by parent (optional)
     * @return ApiResponse&lt;PlacementNodesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlacementNodesResp> listPlacementNodesWithHttpInfo(Long limit, Long offset, String type, Long parentId) throws ApiException {
        com.squareup.okhttp.Call call = listPlacementNodesValidateBeforeCall(limit, offset, type, parentId, null, null);
        Type localVarReturnType = new TypeToken<PlacementNodesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List placement nodes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param type filter placement nodes by type (optional)
     * @param parentId filter placement nodes by parent (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPlacementNodesAsync(Long limit, Long offset, String type, Long parentId, final ApiCallback<PlacementNodesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPlacementNodesValidateBeforeCall(limit, offset, type, parentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacementNodesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePlacementNode
     * @param body the placement node info (required)
     * @param placementNodeId the placement node id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePlacementNodeCall(PlacementNodeUpdateReq body, Long placementNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/placement-nodes/{placement_node_id}"
            .replaceAll("\\{" + "placement_node_id" + "\\}", apiClient.escapeString(placementNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePlacementNodeValidateBeforeCall(PlacementNodeUpdateReq body, Long placementNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePlacementNode(Async)");
        }
        // verify the required parameter 'placementNodeId' is set
        if (placementNodeId == null) {
            throw new ApiException("Missing the required parameter 'placementNodeId' when calling updatePlacementNode(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePlacementNodeCall(body, placementNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update placement node
     * @param body the placement node info (required)
     * @param placementNodeId the placement node id (required)
     * @return PlacementNodeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlacementNodeResp updatePlacementNode(PlacementNodeUpdateReq body, Long placementNodeId) throws ApiException {
        ApiResponse<PlacementNodeResp> resp = updatePlacementNodeWithHttpInfo(body, placementNodeId);
        return resp.getData();
    }

    /**
     * 
     * update placement node
     * @param body the placement node info (required)
     * @param placementNodeId the placement node id (required)
     * @return ApiResponse&lt;PlacementNodeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlacementNodeResp> updatePlacementNodeWithHttpInfo(PlacementNodeUpdateReq body, Long placementNodeId) throws ApiException {
        com.squareup.okhttp.Call call = updatePlacementNodeValidateBeforeCall(body, placementNodeId, null, null);
        Type localVarReturnType = new TypeToken<PlacementNodeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update placement node
     * @param body the placement node info (required)
     * @param placementNodeId the placement node id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePlacementNodeAsync(PlacementNodeUpdateReq body, Long placementNodeId, final ApiCallback<PlacementNodeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePlacementNodeValidateBeforeCall(body, placementNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacementNodeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
