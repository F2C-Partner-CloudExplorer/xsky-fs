/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.MappingGroupAddVolumesReq;
import xio.sds.client.model.MappingGroupCreateReq;
import xio.sds.client.model.MappingGroupRemoveVolumesReq;
import xio.sds.client.model.MappingGroupResp;
import xio.sds.client.model.MappingGroupUpdateClientGroupReq;
import xio.sds.client.model.MappingGroupUpdateReq;
import xio.sds.client.model.MappingGroupsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MappingGroupsApi {
    private ApiClient apiClient;

    public MappingGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MappingGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addVolumes
     * @param body block volume ids (required)
     * @param mappingGroupId mapping group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addVolumesCall(MappingGroupAddVolumesReq body, Long mappingGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/mapping-groups/{mapping_group_id}/block-volumes"
            .replaceAll("\\{" + "mapping_group_id" + "\\}", apiClient.escapeString(mappingGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addVolumesValidateBeforeCall(MappingGroupAddVolumesReq body, Long mappingGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addVolumes(Async)");
        }
        // verify the required parameter 'mappingGroupId' is set
        if (mappingGroupId == null) {
            throw new ApiException("Missing the required parameter 'mappingGroupId' when calling addVolumes(Async)");
        }
        
        com.squareup.okhttp.Call call = addVolumesCall(body, mappingGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add volumes to mapping group
     * @param body block volume ids (required)
     * @param mappingGroupId mapping group id (required)
     * @return MappingGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingGroupResp addVolumes(MappingGroupAddVolumesReq body, Long mappingGroupId) throws ApiException {
        ApiResponse<MappingGroupResp> resp = addVolumesWithHttpInfo(body, mappingGroupId);
        return resp.getData();
    }

    /**
     * 
     * add volumes to mapping group
     * @param body block volume ids (required)
     * @param mappingGroupId mapping group id (required)
     * @return ApiResponse&lt;MappingGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingGroupResp> addVolumesWithHttpInfo(MappingGroupAddVolumesReq body, Long mappingGroupId) throws ApiException {
        com.squareup.okhttp.Call call = addVolumesValidateBeforeCall(body, mappingGroupId, null, null);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add volumes to mapping group
     * @param body block volume ids (required)
     * @param mappingGroupId mapping group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addVolumesAsync(MappingGroupAddVolumesReq body, Long mappingGroupId, final ApiCallback<MappingGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addVolumesValidateBeforeCall(body, mappingGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMappingGroup
     * @param body mapping info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMappingGroupCall(MappingGroupCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/mapping-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMappingGroupValidateBeforeCall(MappingGroupCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createMappingGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createMappingGroupCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * create a mapping group in access path
     * @param body mapping info (required)
     * @return MappingGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingGroupResp createMappingGroup(MappingGroupCreateReq body) throws ApiException {
        ApiResponse<MappingGroupResp> resp = createMappingGroupWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * create a mapping group in access path
     * @param body mapping info (required)
     * @return ApiResponse&lt;MappingGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingGroupResp> createMappingGroupWithHttpInfo(MappingGroupCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createMappingGroupValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create a mapping group in access path
     * @param body mapping info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMappingGroupAsync(MappingGroupCreateReq body, final ApiCallback<MappingGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMappingGroupValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMappingGroup
     * @param mappingGroupId mapping group id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMappingGroupCall(Long mappingGroupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/mapping-groups/{mapping_group_id}"
            .replaceAll("\\{" + "mapping_group_id" + "\\}", apiClient.escapeString(mappingGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMappingGroupValidateBeforeCall(Long mappingGroupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mappingGroupId' is set
        if (mappingGroupId == null) {
            throw new ApiException("Missing the required parameter 'mappingGroupId' when calling deleteMappingGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteMappingGroupCall(mappingGroupId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete mapping group
     * @param mappingGroupId mapping group id (required)
     * @param force force delete or not (optional)
     * @return MappingGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingGroupResp deleteMappingGroup(Long mappingGroupId, Boolean force) throws ApiException {
        ApiResponse<MappingGroupResp> resp = deleteMappingGroupWithHttpInfo(mappingGroupId, force);
        return resp.getData();
    }

    /**
     * 
     * Delete mapping group
     * @param mappingGroupId mapping group id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;MappingGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingGroupResp> deleteMappingGroupWithHttpInfo(Long mappingGroupId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteMappingGroupValidateBeforeCall(mappingGroupId, force, null, null);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete mapping group
     * @param mappingGroupId mapping group id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMappingGroupAsync(Long mappingGroupId, Boolean force, final ApiCallback<MappingGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMappingGroupValidateBeforeCall(mappingGroupId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMappingGroup
     * @param mappingGroupId mapping group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMappingGroupCall(Long mappingGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/mapping-groups/{mapping_group_id}"
            .replaceAll("\\{" + "mapping_group_id" + "\\}", apiClient.escapeString(mappingGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMappingGroupValidateBeforeCall(Long mappingGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mappingGroupId' is set
        if (mappingGroupId == null) {
            throw new ApiException("Missing the required parameter 'mappingGroupId' when calling getMappingGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getMappingGroupCall(mappingGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get mapping group by id
     * @param mappingGroupId mapping group id (required)
     * @return MappingGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingGroupResp getMappingGroup(Long mappingGroupId) throws ApiException {
        ApiResponse<MappingGroupResp> resp = getMappingGroupWithHttpInfo(mappingGroupId);
        return resp.getData();
    }

    /**
     * 
     * Get mapping group by id
     * @param mappingGroupId mapping group id (required)
     * @return ApiResponse&lt;MappingGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingGroupResp> getMappingGroupWithHttpInfo(Long mappingGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getMappingGroupValidateBeforeCall(mappingGroupId, null, null);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get mapping group by id
     * @param mappingGroupId mapping group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMappingGroupAsync(Long mappingGroupId, final ApiCallback<MappingGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMappingGroupValidateBeforeCall(mappingGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listMappingGroups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param accessPathId access path id (optional)
     * @param clientGroupId client group id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listMappingGroupsCall(Long limit, Long offset, Long accessPathId, Long clientGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/mapping-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (accessPathId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_path_id", accessPathId));
        if (clientGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_group_id", clientGroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listMappingGroupsValidateBeforeCall(Long limit, Long offset, Long accessPathId, Long clientGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listMappingGroupsCall(limit, offset, accessPathId, clientGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List mapping groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param accessPathId access path id (optional)
     * @param clientGroupId client group id (optional)
     * @return MappingGroupsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingGroupsResp listMappingGroups(Long limit, Long offset, Long accessPathId, Long clientGroupId) throws ApiException {
        ApiResponse<MappingGroupsResp> resp = listMappingGroupsWithHttpInfo(limit, offset, accessPathId, clientGroupId);
        return resp.getData();
    }

    /**
     * 
     * List mapping groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param accessPathId access path id (optional)
     * @param clientGroupId client group id (optional)
     * @return ApiResponse&lt;MappingGroupsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingGroupsResp> listMappingGroupsWithHttpInfo(Long limit, Long offset, Long accessPathId, Long clientGroupId) throws ApiException {
        com.squareup.okhttp.Call call = listMappingGroupsValidateBeforeCall(limit, offset, accessPathId, clientGroupId, null, null);
        Type localVarReturnType = new TypeToken<MappingGroupsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List mapping groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param accessPathId access path id (optional)
     * @param clientGroupId client group id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listMappingGroupsAsync(Long limit, Long offset, Long accessPathId, Long clientGroupId, final ApiCallback<MappingGroupsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listMappingGroupsValidateBeforeCall(limit, offset, accessPathId, clientGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingGroupsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeVolumes
     * @param body block volume ids (required)
     * @param mappingGroupId mapping group id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeVolumesCall(MappingGroupRemoveVolumesReq body, Long mappingGroupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/mapping-groups/{mapping_group_id}/block-volumes"
            .replaceAll("\\{" + "mapping_group_id" + "\\}", apiClient.escapeString(mappingGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeVolumesValidateBeforeCall(MappingGroupRemoveVolumesReq body, Long mappingGroupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeVolumes(Async)");
        }
        // verify the required parameter 'mappingGroupId' is set
        if (mappingGroupId == null) {
            throw new ApiException("Missing the required parameter 'mappingGroupId' when calling removeVolumes(Async)");
        }
        
        com.squareup.okhttp.Call call = removeVolumesCall(body, mappingGroupId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove volumes from mapping group
     * @param body block volume ids (required)
     * @param mappingGroupId mapping group id (required)
     * @param force force delete or not (optional)
     * @return MappingGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingGroupResp removeVolumes(MappingGroupRemoveVolumesReq body, Long mappingGroupId, Boolean force) throws ApiException {
        ApiResponse<MappingGroupResp> resp = removeVolumesWithHttpInfo(body, mappingGroupId, force);
        return resp.getData();
    }

    /**
     * 
     * remove volumes from mapping group
     * @param body block volume ids (required)
     * @param mappingGroupId mapping group id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;MappingGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingGroupResp> removeVolumesWithHttpInfo(MappingGroupRemoveVolumesReq body, Long mappingGroupId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = removeVolumesValidateBeforeCall(body, mappingGroupId, force, null, null);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove volumes from mapping group
     * @param body block volume ids (required)
     * @param mappingGroupId mapping group id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeVolumesAsync(MappingGroupRemoveVolumesReq body, Long mappingGroupId, Boolean force, final ApiCallback<MappingGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeVolumesValidateBeforeCall(body, mappingGroupId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMappingGroup
     * @param body mapping info (required)
     * @param mappingGroupId mapping group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMappingGroupCall(MappingGroupUpdateReq body, Long mappingGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/mapping-groups/{mapping_group_id}"
            .replaceAll("\\{" + "mapping_group_id" + "\\}", apiClient.escapeString(mappingGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMappingGroupValidateBeforeCall(MappingGroupUpdateReq body, Long mappingGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMappingGroup(Async)");
        }
        // verify the required parameter 'mappingGroupId' is set
        if (mappingGroupId == null) {
            throw new ApiException("Missing the required parameter 'mappingGroupId' when calling updateMappingGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMappingGroupCall(body, mappingGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update mapping group
     * @param body mapping info (required)
     * @param mappingGroupId mapping group id (required)
     * @return MappingGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingGroupResp updateMappingGroup(MappingGroupUpdateReq body, Long mappingGroupId) throws ApiException {
        ApiResponse<MappingGroupResp> resp = updateMappingGroupWithHttpInfo(body, mappingGroupId);
        return resp.getData();
    }

    /**
     * 
     * update mapping group
     * @param body mapping info (required)
     * @param mappingGroupId mapping group id (required)
     * @return ApiResponse&lt;MappingGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingGroupResp> updateMappingGroupWithHttpInfo(MappingGroupUpdateReq body, Long mappingGroupId) throws ApiException {
        com.squareup.okhttp.Call call = updateMappingGroupValidateBeforeCall(body, mappingGroupId, null, null);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update mapping group
     * @param body mapping info (required)
     * @param mappingGroupId mapping group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMappingGroupAsync(MappingGroupUpdateReq body, Long mappingGroupId, final ApiCallback<MappingGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMappingGroupValidateBeforeCall(body, mappingGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMappingGroupClientGroup
     * @param body client group id (required)
     * @param mappingGroupId mapping group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMappingGroupClientGroupCall(MappingGroupUpdateClientGroupReq body, Long mappingGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/mapping-groups/{mapping_group_id}/client-group"
            .replaceAll("\\{" + "mapping_group_id" + "\\}", apiClient.escapeString(mappingGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMappingGroupClientGroupValidateBeforeCall(MappingGroupUpdateClientGroupReq body, Long mappingGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMappingGroupClientGroup(Async)");
        }
        // verify the required parameter 'mappingGroupId' is set
        if (mappingGroupId == null) {
            throw new ApiException("Missing the required parameter 'mappingGroupId' when calling updateMappingGroupClientGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMappingGroupClientGroupCall(body, mappingGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update client group in mapping group
     * @param body client group id (required)
     * @param mappingGroupId mapping group id (required)
     * @return MappingGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingGroupResp updateMappingGroupClientGroup(MappingGroupUpdateClientGroupReq body, Long mappingGroupId) throws ApiException {
        ApiResponse<MappingGroupResp> resp = updateMappingGroupClientGroupWithHttpInfo(body, mappingGroupId);
        return resp.getData();
    }

    /**
     * 
     * update client group in mapping group
     * @param body client group id (required)
     * @param mappingGroupId mapping group id (required)
     * @return ApiResponse&lt;MappingGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingGroupResp> updateMappingGroupClientGroupWithHttpInfo(MappingGroupUpdateClientGroupReq body, Long mappingGroupId) throws ApiException {
        com.squareup.okhttp.Call call = updateMappingGroupClientGroupValidateBeforeCall(body, mappingGroupId, null, null);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update client group in mapping group
     * @param body client group id (required)
     * @param mappingGroupId mapping group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMappingGroupClientGroupAsync(MappingGroupUpdateClientGroupReq body, Long mappingGroupId, final ApiCallback<MappingGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMappingGroupClientGroupValidateBeforeCall(body, mappingGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
