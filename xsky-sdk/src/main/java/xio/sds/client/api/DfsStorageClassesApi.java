/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsStorageClassAddPoolReq;
import xio.sds.client.model.DfsStorageClassCreateReq;
import xio.sds.client.model.DfsStorageClassPredictionsResp;
import xio.sds.client.model.DfsStorageClassRemovePoolReq;
import xio.sds.client.model.DfsStorageClassResp;
import xio.sds.client.model.DfsStorageClassSamplesResp;
import xio.sds.client.model.DfsStorageClassUpdateReq;
import xio.sds.client.model.DfsStorageClassesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsStorageClassesApi {
    private ApiClient apiClient;

    public DfsStorageClassesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsStorageClassesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDfsStorageClassPools
     * @param body pools info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDfsStorageClassPoolsCall(DfsStorageClassAddPoolReq body, Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-storage-classes/{dfs_storage_class_id}:add-pools"
            .replaceAll("\\{" + "dfs_storage_class_id" + "\\}", apiClient.escapeString(dfsStorageClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDfsStorageClassPoolsValidateBeforeCall(DfsStorageClassAddPoolReq body, Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addDfsStorageClassPools(Async)");
        }
        // verify the required parameter 'dfsStorageClassId' is set
        if (dfsStorageClassId == null) {
            throw new ApiException("Missing the required parameter 'dfsStorageClassId' when calling addDfsStorageClassPools(Async)");
        }
        
        com.squareup.okhttp.Call call = addDfsStorageClassPoolsCall(body, dfsStorageClassId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add dfs storage class pools
     * @param body pools info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @return DfsStorageClassResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsStorageClassResp addDfsStorageClassPools(DfsStorageClassAddPoolReq body, Long dfsStorageClassId) throws ApiException {
        ApiResponse<DfsStorageClassResp> resp = addDfsStorageClassPoolsWithHttpInfo(body, dfsStorageClassId);
        return resp.getData();
    }

    /**
     * 
     * add dfs storage class pools
     * @param body pools info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @return ApiResponse&lt;DfsStorageClassResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsStorageClassResp> addDfsStorageClassPoolsWithHttpInfo(DfsStorageClassAddPoolReq body, Long dfsStorageClassId) throws ApiException {
        com.squareup.okhttp.Call call = addDfsStorageClassPoolsValidateBeforeCall(body, dfsStorageClassId, null, null);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add dfs storage class pools
     * @param body pools info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDfsStorageClassPoolsAsync(DfsStorageClassAddPoolReq body, Long dfsStorageClassId, final ApiCallback<DfsStorageClassResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDfsStorageClassPoolsValidateBeforeCall(body, dfsStorageClassId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDfsStorageClass
     * @param body class info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsStorageClassCall(DfsStorageClassCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-storage-classes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsStorageClassValidateBeforeCall(DfsStorageClassCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsStorageClass(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsStorageClassCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * create dfs storage class
     * @param body class info (required)
     * @return DfsStorageClassResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsStorageClassResp createDfsStorageClass(DfsStorageClassCreateReq body) throws ApiException {
        ApiResponse<DfsStorageClassResp> resp = createDfsStorageClassWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * create dfs storage class
     * @param body class info (required)
     * @return ApiResponse&lt;DfsStorageClassResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsStorageClassResp> createDfsStorageClassWithHttpInfo(DfsStorageClassCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createDfsStorageClassValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create dfs storage class
     * @param body class info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsStorageClassAsync(DfsStorageClassCreateReq body, final ApiCallback<DfsStorageClassResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsStorageClassValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsStorageClass
     * @param dfsStorageClassId dfs storage class id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsStorageClassCall(Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-storage-classes/{dfs_storage_class_id}"
            .replaceAll("\\{" + "dfs_storage_class_id" + "\\}", apiClient.escapeString(dfsStorageClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsStorageClassValidateBeforeCall(Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsStorageClassId' is set
        if (dfsStorageClassId == null) {
            throw new ApiException("Missing the required parameter 'dfsStorageClassId' when calling deleteDfsStorageClass(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsStorageClassCall(dfsStorageClassId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs storage class
     * @param dfsStorageClassId dfs storage class id (required)
     * @return DfsStorageClassResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsStorageClassResp deleteDfsStorageClass(Long dfsStorageClassId) throws ApiException {
        ApiResponse<DfsStorageClassResp> resp = deleteDfsStorageClassWithHttpInfo(dfsStorageClassId);
        return resp.getData();
    }

    /**
     * 
     * delete dfs storage class
     * @param dfsStorageClassId dfs storage class id (required)
     * @return ApiResponse&lt;DfsStorageClassResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsStorageClassResp> deleteDfsStorageClassWithHttpInfo(Long dfsStorageClassId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsStorageClassValidateBeforeCall(dfsStorageClassId, null, null);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs storage class
     * @param dfsStorageClassId dfs storage class id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsStorageClassAsync(Long dfsStorageClassId, final ApiCallback<DfsStorageClassResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsStorageClassValidateBeforeCall(dfsStorageClassId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsStorageClass
     * @param dfsStorageClassId dfs storage class id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsStorageClassCall(Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-storage-classes/{dfs_storage_class_id}"
            .replaceAll("\\{" + "dfs_storage_class_id" + "\\}", apiClient.escapeString(dfsStorageClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsStorageClassValidateBeforeCall(Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsStorageClassId' is set
        if (dfsStorageClassId == null) {
            throw new ApiException("Missing the required parameter 'dfsStorageClassId' when calling getDfsStorageClass(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsStorageClassCall(dfsStorageClassId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs storage class
     * @param dfsStorageClassId dfs storage class id (required)
     * @return DfsStorageClassResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsStorageClassResp getDfsStorageClass(Long dfsStorageClassId) throws ApiException {
        ApiResponse<DfsStorageClassResp> resp = getDfsStorageClassWithHttpInfo(dfsStorageClassId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs storage class
     * @param dfsStorageClassId dfs storage class id (required)
     * @return ApiResponse&lt;DfsStorageClassResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsStorageClassResp> getDfsStorageClassWithHttpInfo(Long dfsStorageClassId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsStorageClassValidateBeforeCall(dfsStorageClassId, null, null);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs storage class
     * @param dfsStorageClassId dfs storage class id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsStorageClassAsync(Long dfsStorageClassId, final ApiCallback<DfsStorageClassResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsStorageClassValidateBeforeCall(dfsStorageClassId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsStorageClassPredictions
     * @param dfsStorageClassId dfs storage class id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsStorageClassPredictionsCall(Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-storage-classes/{dfs_storage_class_id}/predictions"
            .replaceAll("\\{" + "dfs_storage_class_id" + "\\}", apiClient.escapeString(dfsStorageClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsStorageClassPredictionsValidateBeforeCall(Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsStorageClassId' is set
        if (dfsStorageClassId == null) {
            throw new ApiException("Missing the required parameter 'dfsStorageClassId' when calling getDfsStorageClassPredictions(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsStorageClassPredictionsCall(dfsStorageClassId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a dfs storage class&#x27;s prediction
     * @param dfsStorageClassId dfs storage class id (required)
     * @return DfsStorageClassPredictionsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsStorageClassPredictionsResp getDfsStorageClassPredictions(Long dfsStorageClassId) throws ApiException {
        ApiResponse<DfsStorageClassPredictionsResp> resp = getDfsStorageClassPredictionsWithHttpInfo(dfsStorageClassId);
        return resp.getData();
    }

    /**
     * 
     * get a dfs storage class&#x27;s prediction
     * @param dfsStorageClassId dfs storage class id (required)
     * @return ApiResponse&lt;DfsStorageClassPredictionsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsStorageClassPredictionsResp> getDfsStorageClassPredictionsWithHttpInfo(Long dfsStorageClassId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsStorageClassPredictionsValidateBeforeCall(dfsStorageClassId, null, null);
        Type localVarReturnType = new TypeToken<DfsStorageClassPredictionsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a dfs storage class&#x27;s prediction
     * @param dfsStorageClassId dfs storage class id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsStorageClassPredictionsAsync(Long dfsStorageClassId, final ApiCallback<DfsStorageClassPredictionsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsStorageClassPredictionsValidateBeforeCall(dfsStorageClassId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsStorageClassPredictionsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsStorageClassSamples
     * @param dfsStorageClassId dfs storage class id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsStorageClassSamplesCall(Long dfsStorageClassId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-storage-classes/{dfs_storage_class_id}/samples"
            .replaceAll("\\{" + "dfs_storage_class_id" + "\\}", apiClient.escapeString(dfsStorageClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsStorageClassSamplesValidateBeforeCall(Long dfsStorageClassId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsStorageClassId' is set
        if (dfsStorageClassId == null) {
            throw new ApiException("Missing the required parameter 'dfsStorageClassId' when calling getDfsStorageClassSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsStorageClassSamplesCall(dfsStorageClassId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a dfs storage class&#x27;s samples
     * @param dfsStorageClassId dfs storage class id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return DfsStorageClassSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsStorageClassSamplesResp getDfsStorageClassSamples(Long dfsStorageClassId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<DfsStorageClassSamplesResp> resp = getDfsStorageClassSamplesWithHttpInfo(dfsStorageClassId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get a dfs storage class&#x27;s samples
     * @param dfsStorageClassId dfs storage class id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;DfsStorageClassSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsStorageClassSamplesResp> getDfsStorageClassSamplesWithHttpInfo(Long dfsStorageClassId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getDfsStorageClassSamplesValidateBeforeCall(dfsStorageClassId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<DfsStorageClassSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a dfs storage class&#x27;s samples
     * @param dfsStorageClassId dfs storage class id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsStorageClassSamplesAsync(Long dfsStorageClassId, String durationBegin, String durationEnd, String period, final ApiCallback<DfsStorageClassSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsStorageClassSamplesValidateBeforeCall(dfsStorageClassId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsStorageClassSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsStorageClasses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param writePolicy write policy (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsStorageClassesCall(Long limit, Long offset, String clusterId, String writePolicy, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-storage-classes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (writePolicy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("write_policy", writePolicy));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsStorageClassesValidateBeforeCall(Long limit, Long offset, String clusterId, String writePolicy, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsStorageClassesCall(limit, offset, clusterId, writePolicy, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs storage classes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param writePolicy write policy (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return DfsStorageClassesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsStorageClassesResp listDfsStorageClasses(Long limit, Long offset, String clusterId, String writePolicy, String q, String sort) throws ApiException {
        ApiResponse<DfsStorageClassesResp> resp = listDfsStorageClassesWithHttpInfo(limit, offset, clusterId, writePolicy, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List dfs storage classes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param writePolicy write policy (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;DfsStorageClassesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsStorageClassesResp> listDfsStorageClassesWithHttpInfo(Long limit, Long offset, String clusterId, String writePolicy, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listDfsStorageClassesValidateBeforeCall(limit, offset, clusterId, writePolicy, q, sort, null, null);
        Type localVarReturnType = new TypeToken<DfsStorageClassesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs storage classes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param writePolicy write policy (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsStorageClassesAsync(Long limit, Long offset, String clusterId, String writePolicy, String q, String sort, final ApiCallback<DfsStorageClassesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsStorageClassesValidateBeforeCall(limit, offset, clusterId, writePolicy, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsStorageClassesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeDfsStorageClassPools
     * @param body pools info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeDfsStorageClassPoolsCall(DfsStorageClassRemovePoolReq body, Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-storage-classes/{dfs_storage_class_id}:remove-pools"
            .replaceAll("\\{" + "dfs_storage_class_id" + "\\}", apiClient.escapeString(dfsStorageClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeDfsStorageClassPoolsValidateBeforeCall(DfsStorageClassRemovePoolReq body, Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeDfsStorageClassPools(Async)");
        }
        // verify the required parameter 'dfsStorageClassId' is set
        if (dfsStorageClassId == null) {
            throw new ApiException("Missing the required parameter 'dfsStorageClassId' when calling removeDfsStorageClassPools(Async)");
        }
        
        com.squareup.okhttp.Call call = removeDfsStorageClassPoolsCall(body, dfsStorageClassId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove dfs storage class pools
     * @param body pools info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @return DfsStorageClassResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsStorageClassResp removeDfsStorageClassPools(DfsStorageClassRemovePoolReq body, Long dfsStorageClassId) throws ApiException {
        ApiResponse<DfsStorageClassResp> resp = removeDfsStorageClassPoolsWithHttpInfo(body, dfsStorageClassId);
        return resp.getData();
    }

    /**
     * 
     * remove dfs storage class pools
     * @param body pools info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @return ApiResponse&lt;DfsStorageClassResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsStorageClassResp> removeDfsStorageClassPoolsWithHttpInfo(DfsStorageClassRemovePoolReq body, Long dfsStorageClassId) throws ApiException {
        com.squareup.okhttp.Call call = removeDfsStorageClassPoolsValidateBeforeCall(body, dfsStorageClassId, null, null);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove dfs storage class pools
     * @param body pools info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDfsStorageClassPoolsAsync(DfsStorageClassRemovePoolReq body, Long dfsStorageClassId, final ApiCallback<DfsStorageClassResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDfsStorageClassPoolsValidateBeforeCall(body, dfsStorageClassId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsStorageClass
     * @param body class info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsStorageClassCall(DfsStorageClassUpdateReq body, Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-storage-classes/{dfs_storage_class_id}"
            .replaceAll("\\{" + "dfs_storage_class_id" + "\\}", apiClient.escapeString(dfsStorageClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsStorageClassValidateBeforeCall(DfsStorageClassUpdateReq body, Long dfsStorageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsStorageClass(Async)");
        }
        // verify the required parameter 'dfsStorageClassId' is set
        if (dfsStorageClassId == null) {
            throw new ApiException("Missing the required parameter 'dfsStorageClassId' when calling updateDfsStorageClass(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsStorageClassCall(body, dfsStorageClassId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update dfs storage class
     * @param body class info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @return DfsStorageClassResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsStorageClassResp updateDfsStorageClass(DfsStorageClassUpdateReq body, Long dfsStorageClassId) throws ApiException {
        ApiResponse<DfsStorageClassResp> resp = updateDfsStorageClassWithHttpInfo(body, dfsStorageClassId);
        return resp.getData();
    }

    /**
     * 
     * update dfs storage class
     * @param body class info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @return ApiResponse&lt;DfsStorageClassResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsStorageClassResp> updateDfsStorageClassWithHttpInfo(DfsStorageClassUpdateReq body, Long dfsStorageClassId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsStorageClassValidateBeforeCall(body, dfsStorageClassId, null, null);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update dfs storage class
     * @param body class info (required)
     * @param dfsStorageClassId dfs storage class id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsStorageClassAsync(DfsStorageClassUpdateReq body, Long dfsStorageClassId, final ApiCallback<DfsStorageClassResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsStorageClassValidateBeforeCall(body, dfsStorageClassId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsStorageClassResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
