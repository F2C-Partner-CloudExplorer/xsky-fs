/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsSMBShareAddACLsReq;
import xio.sds.client.model.DfsSMBShareCreateReq;
import xio.sds.client.model.DfsSMBShareRemoveACLsReq;
import xio.sds.client.model.DfsSMBShareResp;
import xio.sds.client.model.DfsSMBShareUpdateACLsReq;
import xio.sds.client.model.DfsSMBShareUpdateReq;
import xio.sds.client.model.DfsSMBSharesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsSmbSharesApi {
    private ApiClient apiClient;

    public DfsSmbSharesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsSmbSharesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDfsSMBShareACLs
     * @param body share acls info (required)
     * @param dfsSmbShareId dfs smb share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDfsSMBShareACLsCall(DfsSMBShareAddACLsReq body, Long dfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-smb-shares/{dfs_smb_share_id}:add-acls"
            .replaceAll("\\{" + "dfs_smb_share_id" + "\\}", apiClient.escapeString(dfsSmbShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDfsSMBShareACLsValidateBeforeCall(DfsSMBShareAddACLsReq body, Long dfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addDfsSMBShareACLs(Async)");
        }
        // verify the required parameter 'dfsSmbShareId' is set
        if (dfsSmbShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsSmbShareId' when calling addDfsSMBShareACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = addDfsSMBShareACLsCall(body, dfsSmbShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Add dfs smb share acls
     * @param body share acls info (required)
     * @param dfsSmbShareId dfs smb share id (required)
     * @return DfsSMBShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSMBShareResp addDfsSMBShareACLs(DfsSMBShareAddACLsReq body, Long dfsSmbShareId) throws ApiException {
        ApiResponse<DfsSMBShareResp> resp = addDfsSMBShareACLsWithHttpInfo(body, dfsSmbShareId);
        return resp.getData();
    }

    /**
     * 
     * Add dfs smb share acls
     * @param body share acls info (required)
     * @param dfsSmbShareId dfs smb share id (required)
     * @return ApiResponse&lt;DfsSMBShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSMBShareResp> addDfsSMBShareACLsWithHttpInfo(DfsSMBShareAddACLsReq body, Long dfsSmbShareId) throws ApiException {
        com.squareup.okhttp.Call call = addDfsSMBShareACLsValidateBeforeCall(body, dfsSmbShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add dfs smb share acls
     * @param body share acls info (required)
     * @param dfsSmbShareId dfs smb share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDfsSMBShareACLsAsync(DfsSMBShareAddACLsReq body, Long dfsSmbShareId, final ApiCallback<DfsSMBShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDfsSMBShareACLsValidateBeforeCall(body, dfsSmbShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDfsSMBShare
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsSMBShareCall(DfsSMBShareCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-smb-shares/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsSMBShareValidateBeforeCall(DfsSMBShareCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsSMBShare(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsSMBShareCall(body, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dfs smb share
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return DfsSMBShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSMBShareResp createDfsSMBShare(DfsSMBShareCreateReq body, Boolean allowPathCreate) throws ApiException {
        ApiResponse<DfsSMBShareResp> resp = createDfsSMBShareWithHttpInfo(body, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * Create dfs smb share
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return ApiResponse&lt;DfsSMBShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSMBShareResp> createDfsSMBShareWithHttpInfo(DfsSMBShareCreateReq body, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = createDfsSMBShareValidateBeforeCall(body, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dfs smb share
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsSMBShareAsync(DfsSMBShareCreateReq body, Boolean allowPathCreate, final ApiCallback<DfsSMBShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsSMBShareValidateBeforeCall(body, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsSMBShare
     * @param dfsSmbShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsSMBShareCall(Long dfsSmbShareId, Boolean force, Boolean withDirectory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-smb-shares/{dfs_smb_share_id}"
            .replaceAll("\\{" + "dfs_smb_share_id" + "\\}", apiClient.escapeString(dfsSmbShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (withDirectory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_directory", withDirectory));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsSMBShareValidateBeforeCall(Long dfsSmbShareId, Boolean force, Boolean withDirectory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsSmbShareId' is set
        if (dfsSmbShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsSmbShareId' when calling deleteDfsSMBShare(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsSMBShareCall(dfsSmbShareId, force, withDirectory, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs smb share
     * @param dfsSmbShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @return DfsSMBShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSMBShareResp deleteDfsSMBShare(Long dfsSmbShareId, Boolean force, Boolean withDirectory) throws ApiException {
        ApiResponse<DfsSMBShareResp> resp = deleteDfsSMBShareWithHttpInfo(dfsSmbShareId, force, withDirectory);
        return resp.getData();
    }

    /**
     * 
     * delete dfs smb share
     * @param dfsSmbShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @return ApiResponse&lt;DfsSMBShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSMBShareResp> deleteDfsSMBShareWithHttpInfo(Long dfsSmbShareId, Boolean force, Boolean withDirectory) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsSMBShareValidateBeforeCall(dfsSmbShareId, force, withDirectory, null, null);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs smb share
     * @param dfsSmbShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsSMBShareAsync(Long dfsSmbShareId, Boolean force, Boolean withDirectory, final ApiCallback<DfsSMBShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsSMBShareValidateBeforeCall(dfsSmbShareId, force, withDirectory, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsSMBShare
     * @param dfsSmbShareId share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsSMBShareCall(Long dfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-smb-shares/{dfs_smb_share_id}"
            .replaceAll("\\{" + "dfs_smb_share_id" + "\\}", apiClient.escapeString(dfsSmbShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsSMBShareValidateBeforeCall(Long dfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsSmbShareId' is set
        if (dfsSmbShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsSmbShareId' when calling getDfsSMBShare(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsSMBShareCall(dfsSmbShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs smb share
     * @param dfsSmbShareId share id (required)
     * @return DfsSMBShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSMBShareResp getDfsSMBShare(Long dfsSmbShareId) throws ApiException {
        ApiResponse<DfsSMBShareResp> resp = getDfsSMBShareWithHttpInfo(dfsSmbShareId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs smb share
     * @param dfsSmbShareId share id (required)
     * @return ApiResponse&lt;DfsSMBShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSMBShareResp> getDfsSMBShareWithHttpInfo(Long dfsSmbShareId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsSMBShareValidateBeforeCall(dfsSmbShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs smb share
     * @param dfsSmbShareId share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsSMBShareAsync(Long dfsSmbShareId, final ApiCallback<DfsSMBShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsSMBShareValidateBeforeCall(dfsSmbShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsSMBShares
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param q query param of search (optional)
     * @param path related dfs path (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsSMBSharesCall(Long limit, Long offset, String clusterId, Long dfsRootfsId, Long dfsGatewayGroupId, String q, String path, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-smb-shares/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (dfsRootfsId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_rootfs_id", dfsRootfsId));
        if (dfsGatewayGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_gateway_group_id", dfsGatewayGroupId));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsSMBSharesValidateBeforeCall(Long limit, Long offset, String clusterId, Long dfsRootfsId, Long dfsGatewayGroupId, String q, String path, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsSMBSharesCall(limit, offset, clusterId, dfsRootfsId, dfsGatewayGroupId, q, path, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs smb shares
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param q query param of search (optional)
     * @param path related dfs path (optional)
     * @param sort sort param of search (optional)
     * @return DfsSMBSharesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSMBSharesResp listDfsSMBShares(Long limit, Long offset, String clusterId, Long dfsRootfsId, Long dfsGatewayGroupId, String q, String path, String sort) throws ApiException {
        ApiResponse<DfsSMBSharesResp> resp = listDfsSMBSharesWithHttpInfo(limit, offset, clusterId, dfsRootfsId, dfsGatewayGroupId, q, path, sort);
        return resp.getData();
    }

    /**
     * 
     * List dfs smb shares
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param q query param of search (optional)
     * @param path related dfs path (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;DfsSMBSharesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSMBSharesResp> listDfsSMBSharesWithHttpInfo(Long limit, Long offset, String clusterId, Long dfsRootfsId, Long dfsGatewayGroupId, String q, String path, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listDfsSMBSharesValidateBeforeCall(limit, offset, clusterId, dfsRootfsId, dfsGatewayGroupId, q, path, sort, null, null);
        Type localVarReturnType = new TypeToken<DfsSMBSharesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs smb shares
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param q query param of search (optional)
     * @param path related dfs path (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsSMBSharesAsync(Long limit, Long offset, String clusterId, Long dfsRootfsId, Long dfsGatewayGroupId, String q, String path, String sort, final ApiCallback<DfsSMBSharesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsSMBSharesValidateBeforeCall(limit, offset, clusterId, dfsRootfsId, dfsGatewayGroupId, q, path, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSMBSharesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeDfsSMBShareACLs
     * @param body share acls info (required)
     * @param dfsSmbShareId dfs smb share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeDfsSMBShareACLsCall(DfsSMBShareRemoveACLsReq body, Long dfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-smb-shares/{dfs_smb_share_id}:remove-acls"
            .replaceAll("\\{" + "dfs_smb_share_id" + "\\}", apiClient.escapeString(dfsSmbShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeDfsSMBShareACLsValidateBeforeCall(DfsSMBShareRemoveACLsReq body, Long dfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeDfsSMBShareACLs(Async)");
        }
        // verify the required parameter 'dfsSmbShareId' is set
        if (dfsSmbShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsSmbShareId' when calling removeDfsSMBShareACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = removeDfsSMBShareACLsCall(body, dfsSmbShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove dfs smb share acls
     * @param body share acls info (required)
     * @param dfsSmbShareId dfs smb share id (required)
     * @return DfsSMBShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSMBShareResp removeDfsSMBShareACLs(DfsSMBShareRemoveACLsReq body, Long dfsSmbShareId) throws ApiException {
        ApiResponse<DfsSMBShareResp> resp = removeDfsSMBShareACLsWithHttpInfo(body, dfsSmbShareId);
        return resp.getData();
    }

    /**
     * 
     * remove dfs smb share acls
     * @param body share acls info (required)
     * @param dfsSmbShareId dfs smb share id (required)
     * @return ApiResponse&lt;DfsSMBShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSMBShareResp> removeDfsSMBShareACLsWithHttpInfo(DfsSMBShareRemoveACLsReq body, Long dfsSmbShareId) throws ApiException {
        com.squareup.okhttp.Call call = removeDfsSMBShareACLsValidateBeforeCall(body, dfsSmbShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove dfs smb share acls
     * @param body share acls info (required)
     * @param dfsSmbShareId dfs smb share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDfsSMBShareACLsAsync(DfsSMBShareRemoveACLsReq body, Long dfsSmbShareId, final ApiCallback<DfsSMBShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDfsSMBShareACLsValidateBeforeCall(body, dfsSmbShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsSMBShare
     * @param body share info (required)
     * @param dfsSmbShareId share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsSMBShareCall(DfsSMBShareUpdateReq body, Long dfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-smb-shares/{dfs_smb_share_id}"
            .replaceAll("\\{" + "dfs_smb_share_id" + "\\}", apiClient.escapeString(dfsSmbShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsSMBShareValidateBeforeCall(DfsSMBShareUpdateReq body, Long dfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsSMBShare(Async)");
        }
        // verify the required parameter 'dfsSmbShareId' is set
        if (dfsSmbShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsSmbShareId' when calling updateDfsSMBShare(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsSMBShareCall(body, dfsSmbShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs smb share
     * @param body share info (required)
     * @param dfsSmbShareId share id (required)
     * @return DfsSMBShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSMBShareResp updateDfsSMBShare(DfsSMBShareUpdateReq body, Long dfsSmbShareId) throws ApiException {
        ApiResponse<DfsSMBShareResp> resp = updateDfsSMBShareWithHttpInfo(body, dfsSmbShareId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs smb share
     * @param body share info (required)
     * @param dfsSmbShareId share id (required)
     * @return ApiResponse&lt;DfsSMBShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSMBShareResp> updateDfsSMBShareWithHttpInfo(DfsSMBShareUpdateReq body, Long dfsSmbShareId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsSMBShareValidateBeforeCall(body, dfsSmbShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs smb share
     * @param body share info (required)
     * @param dfsSmbShareId share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsSMBShareAsync(DfsSMBShareUpdateReq body, Long dfsSmbShareId, final ApiCallback<DfsSMBShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsSMBShareValidateBeforeCall(body, dfsSmbShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsSMBShareACLs
     * @param body share acls info (required)
     * @param dfsSmbShareId share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsSMBShareACLsCall(DfsSMBShareUpdateACLsReq body, Long dfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-smb-shares/{dfs_smb_share_id}:update-acls"
            .replaceAll("\\{" + "dfs_smb_share_id" + "\\}", apiClient.escapeString(dfsSmbShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsSMBShareACLsValidateBeforeCall(DfsSMBShareUpdateACLsReq body, Long dfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsSMBShareACLs(Async)");
        }
        // verify the required parameter 'dfsSmbShareId' is set
        if (dfsSmbShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsSmbShareId' when calling updateDfsSMBShareACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsSMBShareACLsCall(body, dfsSmbShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs smb share ACL
     * @param body share acls info (required)
     * @param dfsSmbShareId share id (required)
     * @return DfsSMBShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSMBShareResp updateDfsSMBShareACLs(DfsSMBShareUpdateACLsReq body, Long dfsSmbShareId) throws ApiException {
        ApiResponse<DfsSMBShareResp> resp = updateDfsSMBShareACLsWithHttpInfo(body, dfsSmbShareId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs smb share ACL
     * @param body share acls info (required)
     * @param dfsSmbShareId share id (required)
     * @return ApiResponse&lt;DfsSMBShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSMBShareResp> updateDfsSMBShareACLsWithHttpInfo(DfsSMBShareUpdateACLsReq body, Long dfsSmbShareId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsSMBShareACLsValidateBeforeCall(body, dfsSmbShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs smb share ACL
     * @param body share acls info (required)
     * @param dfsSmbShareId share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsSMBShareACLsAsync(DfsSMBShareUpdateACLsReq body, Long dfsSmbShareId, final ApiCallback<DfsSMBShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsSMBShareACLsValidateBeforeCall(body, dfsSmbShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSMBShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
