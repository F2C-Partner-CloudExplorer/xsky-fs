/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.OSReplicationZoneCreateReq;
import xio.sds.client.model.OSReplicationZoneRecordResp;
import xio.sds.client.model.OSReplicationZoneRecordsResp;
import xio.sds.client.model.OSReplicationZoneResp;
import xio.sds.client.model.OSReplicationZoneSamplesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OsReplicationZonesApi {
    private ApiClient apiClient;

    public OsReplicationZonesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OsReplicationZonesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createOSReplicationZone
     * @param body os replication zone info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOSReplicationZoneCall(OSReplicationZoneCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-replication-zones/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOSReplicationZoneValidateBeforeCall(OSReplicationZoneCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOSReplicationZone(Async)");
        }
        
        com.squareup.okhttp.Call call = createOSReplicationZoneCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create a os replication zone
     * @param body os replication zone info (required)
     * @param clusterId cluster id (optional)
     * @return OSReplicationZoneResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSReplicationZoneResp createOSReplicationZone(OSReplicationZoneCreateReq body, String clusterId) throws ApiException {
        ApiResponse<OSReplicationZoneResp> resp = createOSReplicationZoneWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create a os replication zone
     * @param body os replication zone info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;OSReplicationZoneResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSReplicationZoneResp> createOSReplicationZoneWithHttpInfo(OSReplicationZoneCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createOSReplicationZoneValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<OSReplicationZoneResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a os replication zone
     * @param body os replication zone info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOSReplicationZoneAsync(OSReplicationZoneCreateReq body, String clusterId, final ApiCallback<OSReplicationZoneResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOSReplicationZoneValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSReplicationZoneResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteOSReplicationZone
     * @param zoneUuid os replication zone uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOSReplicationZoneCall(String zoneUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-replication-zones/{zone_uuid}"
            .replaceAll("\\{" + "zone_uuid" + "\\}", apiClient.escapeString(zoneUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOSReplicationZoneValidateBeforeCall(String zoneUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneUuid' is set
        if (zoneUuid == null) {
            throw new ApiException("Missing the required parameter 'zoneUuid' when calling deleteOSReplicationZone(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteOSReplicationZoneCall(zoneUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete a os replication zone
     * @param zoneUuid os replication zone uuid (required)
     * @return OSReplicationZoneResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSReplicationZoneResp deleteOSReplicationZone(String zoneUuid) throws ApiException {
        ApiResponse<OSReplicationZoneResp> resp = deleteOSReplicationZoneWithHttpInfo(zoneUuid);
        return resp.getData();
    }

    /**
     * 
     * Delete a os replication zone
     * @param zoneUuid os replication zone uuid (required)
     * @return ApiResponse&lt;OSReplicationZoneResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSReplicationZoneResp> deleteOSReplicationZoneWithHttpInfo(String zoneUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteOSReplicationZoneValidateBeforeCall(zoneUuid, null, null);
        Type localVarReturnType = new TypeToken<OSReplicationZoneResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a os replication zone
     * @param zoneUuid os replication zone uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOSReplicationZoneAsync(String zoneUuid, final ApiCallback<OSReplicationZoneResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOSReplicationZoneValidateBeforeCall(zoneUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSReplicationZoneResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOSReplicationZone
     * @param zoneUuid os replication zone uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOSReplicationZoneCall(String zoneUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-replication-zones/{zone_uuid}"
            .replaceAll("\\{" + "zone_uuid" + "\\}", apiClient.escapeString(zoneUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOSReplicationZoneValidateBeforeCall(String zoneUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneUuid' is set
        if (zoneUuid == null) {
            throw new ApiException("Missing the required parameter 'zoneUuid' when calling getOSReplicationZone(Async)");
        }
        
        com.squareup.okhttp.Call call = getOSReplicationZoneCall(zoneUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get a os replication zone
     * @param zoneUuid os replication zone uuid (required)
     * @return OSReplicationZoneRecordResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSReplicationZoneRecordResp getOSReplicationZone(String zoneUuid) throws ApiException {
        ApiResponse<OSReplicationZoneRecordResp> resp = getOSReplicationZoneWithHttpInfo(zoneUuid);
        return resp.getData();
    }

    /**
     * 
     * Get a os replication zone
     * @param zoneUuid os replication zone uuid (required)
     * @return ApiResponse&lt;OSReplicationZoneRecordResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSReplicationZoneRecordResp> getOSReplicationZoneWithHttpInfo(String zoneUuid) throws ApiException {
        com.squareup.okhttp.Call call = getOSReplicationZoneValidateBeforeCall(zoneUuid, null, null);
        Type localVarReturnType = new TypeToken<OSReplicationZoneRecordResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a os replication zone
     * @param zoneUuid os replication zone uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOSReplicationZoneAsync(String zoneUuid, final ApiCallback<OSReplicationZoneRecordResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOSReplicationZoneValidateBeforeCall(zoneUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSReplicationZoneRecordResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOSReplicationZoneSamples
     * @param zoneUuid os replication zone uuid (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOSReplicationZoneSamplesCall(String zoneUuid, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-replication-zones/{zone_uuid}/samples"
            .replaceAll("\\{" + "zone_uuid" + "\\}", apiClient.escapeString(zoneUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOSReplicationZoneSamplesValidateBeforeCall(String zoneUuid, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneUuid' is set
        if (zoneUuid == null) {
            throw new ApiException("Missing the required parameter 'zoneUuid' when calling getOSReplicationZoneSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getOSReplicationZoneSamplesCall(zoneUuid, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get an os replication zone&#x27;s samples
     * @param zoneUuid os replication zone uuid (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return OSReplicationZoneSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSReplicationZoneSamplesResp getOSReplicationZoneSamples(String zoneUuid, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<OSReplicationZoneSamplesResp> resp = getOSReplicationZoneSamplesWithHttpInfo(zoneUuid, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get an os replication zone&#x27;s samples
     * @param zoneUuid os replication zone uuid (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;OSReplicationZoneSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSReplicationZoneSamplesResp> getOSReplicationZoneSamplesWithHttpInfo(String zoneUuid, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getOSReplicationZoneSamplesValidateBeforeCall(zoneUuid, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<OSReplicationZoneSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get an os replication zone&#x27;s samples
     * @param zoneUuid os replication zone uuid (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOSReplicationZoneSamplesAsync(String zoneUuid, String durationBegin, String durationEnd, String period, final ApiCallback<OSReplicationZoneSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOSReplicationZoneSamplesValidateBeforeCall(zoneUuid, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSReplicationZoneSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOSReplicationZones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param marker paging param (optional)
     * @param replicationUuid os replication uuid (optional)
     * @param osZoneUuid os zone uuid (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOSReplicationZonesCall(Long limit, Long offset, String marker, String replicationUuid, String osZoneUuid, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-replication-zones/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (marker != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marker", marker));
        if (replicationUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replication_uuid", replicationUuid));
        if (osZoneUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("os_zone_uuid", osZoneUuid));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOSReplicationZonesValidateBeforeCall(Long limit, Long offset, String marker, String replicationUuid, String osZoneUuid, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listOSReplicationZonesCall(limit, offset, marker, replicationUuid, osZoneUuid, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List os replication zones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param marker paging param (optional)
     * @param replicationUuid os replication uuid (optional)
     * @param osZoneUuid os zone uuid (optional)
     * @param clusterId cluster id (optional)
     * @return OSReplicationZoneRecordsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSReplicationZoneRecordsResp listOSReplicationZones(Long limit, Long offset, String marker, String replicationUuid, String osZoneUuid, String clusterId) throws ApiException {
        ApiResponse<OSReplicationZoneRecordsResp> resp = listOSReplicationZonesWithHttpInfo(limit, offset, marker, replicationUuid, osZoneUuid, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List os replication zones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param marker paging param (optional)
     * @param replicationUuid os replication uuid (optional)
     * @param osZoneUuid os zone uuid (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;OSReplicationZoneRecordsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSReplicationZoneRecordsResp> listOSReplicationZonesWithHttpInfo(Long limit, Long offset, String marker, String replicationUuid, String osZoneUuid, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listOSReplicationZonesValidateBeforeCall(limit, offset, marker, replicationUuid, osZoneUuid, clusterId, null, null);
        Type localVarReturnType = new TypeToken<OSReplicationZoneRecordsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List os replication zones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param marker paging param (optional)
     * @param replicationUuid os replication uuid (optional)
     * @param osZoneUuid os zone uuid (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOSReplicationZonesAsync(Long limit, Long offset, String marker, String replicationUuid, String osZoneUuid, String clusterId, final ApiCallback<OSReplicationZoneRecordsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOSReplicationZonesValidateBeforeCall(limit, offset, marker, replicationUuid, osZoneUuid, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSReplicationZoneRecordsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOSReplicationZone
     * @param zoneUuid os replication zone uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOSReplicationZoneCall(String zoneUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-replication-zones/{zone_uuid}"
            .replaceAll("\\{" + "zone_uuid" + "\\}", apiClient.escapeString(zoneUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOSReplicationZoneValidateBeforeCall(String zoneUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneUuid' is set
        if (zoneUuid == null) {
            throw new ApiException("Missing the required parameter 'zoneUuid' when calling updateOSReplicationZone(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOSReplicationZoneCall(zoneUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update an os replication zone
     * @param zoneUuid os replication zone uuid (required)
     * @return OSReplicationZoneResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSReplicationZoneResp updateOSReplicationZone(String zoneUuid) throws ApiException {
        ApiResponse<OSReplicationZoneResp> resp = updateOSReplicationZoneWithHttpInfo(zoneUuid);
        return resp.getData();
    }

    /**
     * 
     * Update an os replication zone
     * @param zoneUuid os replication zone uuid (required)
     * @return ApiResponse&lt;OSReplicationZoneResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSReplicationZoneResp> updateOSReplicationZoneWithHttpInfo(String zoneUuid) throws ApiException {
        com.squareup.okhttp.Call call = updateOSReplicationZoneValidateBeforeCall(zoneUuid, null, null);
        Type localVarReturnType = new TypeToken<OSReplicationZoneResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an os replication zone
     * @param zoneUuid os replication zone uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOSReplicationZoneAsync(String zoneUuid, final ApiCallback<OSReplicationZoneResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOSReplicationZoneValidateBeforeCall(zoneUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSReplicationZoneResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
