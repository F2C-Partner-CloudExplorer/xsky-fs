/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.OSZonePairsUpdateReq;
import xio.sds.client.model.ObjectStorageZoneCreateReq;
import xio.sds.client.model.ObjectStorageZoneRecordResp;
import xio.sds.client.model.ObjectStorageZoneResp;
import xio.sds.client.model.ObjectStorageZoneSamplesResp;
import xio.sds.client.model.ObjectStorageZonesRecordResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OsZonesApi {
    private ApiClient apiClient;

    public OsZonesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OsZonesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createObjectStorageZone
     * @param body zone info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createObjectStorageZoneCall(ObjectStorageZoneCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-zones/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createObjectStorageZoneValidateBeforeCall(ObjectStorageZoneCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createObjectStorageZone(Async)");
        }
        
        com.squareup.okhttp.Call call = createObjectStorageZoneCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create a object storage zone
     * @param body zone info (required)
     * @param clusterId cluster id (optional)
     * @return ObjectStorageZoneResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageZoneResp createObjectStorageZone(ObjectStorageZoneCreateReq body, String clusterId) throws ApiException {
        ApiResponse<ObjectStorageZoneResp> resp = createObjectStorageZoneWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create a object storage zone
     * @param body zone info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;ObjectStorageZoneResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageZoneResp> createObjectStorageZoneWithHttpInfo(ObjectStorageZoneCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createObjectStorageZoneValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageZoneResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a object storage zone
     * @param body zone info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createObjectStorageZoneAsync(ObjectStorageZoneCreateReq body, String clusterId, final ApiCallback<ObjectStorageZoneResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createObjectStorageZoneValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageZoneResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteObjectStorageZone
     * @param zoneUuid os zone uuid (required)
     * @param force delete os zone forcefully or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteObjectStorageZoneCall(String zoneUuid, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-zones/{zone_uuid}"
            .replaceAll("\\{" + "zone_uuid" + "\\}", apiClient.escapeString(zoneUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteObjectStorageZoneValidateBeforeCall(String zoneUuid, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneUuid' is set
        if (zoneUuid == null) {
            throw new ApiException("Missing the required parameter 'zoneUuid' when calling deleteObjectStorageZone(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteObjectStorageZoneCall(zoneUuid, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete a object storage zone
     * @param zoneUuid os zone uuid (required)
     * @param force delete os zone forcefully or not (optional)
     * @return ObjectStorageZoneResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageZoneResp deleteObjectStorageZone(String zoneUuid, Boolean force) throws ApiException {
        ApiResponse<ObjectStorageZoneResp> resp = deleteObjectStorageZoneWithHttpInfo(zoneUuid, force);
        return resp.getData();
    }

    /**
     * 
     * Delete a object storage zone
     * @param zoneUuid os zone uuid (required)
     * @param force delete os zone forcefully or not (optional)
     * @return ApiResponse&lt;ObjectStorageZoneResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageZoneResp> deleteObjectStorageZoneWithHttpInfo(String zoneUuid, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteObjectStorageZoneValidateBeforeCall(zoneUuid, force, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageZoneResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a object storage zone
     * @param zoneUuid os zone uuid (required)
     * @param force delete os zone forcefully or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteObjectStorageZoneAsync(String zoneUuid, Boolean force, final ApiCallback<ObjectStorageZoneResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteObjectStorageZoneValidateBeforeCall(zoneUuid, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageZoneResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getObjectStorageZone
     * @param zoneUuid object storage zone uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getObjectStorageZoneCall(String zoneUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-zones/{zone_uuid}"
            .replaceAll("\\{" + "zone_uuid" + "\\}", apiClient.escapeString(zoneUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getObjectStorageZoneValidateBeforeCall(String zoneUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneUuid' is set
        if (zoneUuid == null) {
            throw new ApiException("Missing the required parameter 'zoneUuid' when calling getObjectStorageZone(Async)");
        }
        
        com.squareup.okhttp.Call call = getObjectStorageZoneCall(zoneUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get object storage zone
     * @param zoneUuid object storage zone uuid (required)
     * @return ObjectStorageZoneRecordResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageZoneRecordResp getObjectStorageZone(String zoneUuid) throws ApiException {
        ApiResponse<ObjectStorageZoneRecordResp> resp = getObjectStorageZoneWithHttpInfo(zoneUuid);
        return resp.getData();
    }

    /**
     * 
     * Get object storage zone
     * @param zoneUuid object storage zone uuid (required)
     * @return ApiResponse&lt;ObjectStorageZoneRecordResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageZoneRecordResp> getObjectStorageZoneWithHttpInfo(String zoneUuid) throws ApiException {
        com.squareup.okhttp.Call call = getObjectStorageZoneValidateBeforeCall(zoneUuid, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageZoneRecordResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get object storage zone
     * @param zoneUuid object storage zone uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getObjectStorageZoneAsync(String zoneUuid, final ApiCallback<ObjectStorageZoneRecordResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getObjectStorageZoneValidateBeforeCall(zoneUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageZoneRecordResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getObjectStorageZoneSamples
     * @param zoneUuid object storage zone uuid (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getObjectStorageZoneSamplesCall(String zoneUuid, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-zones/{zone_uuid}/samples"
            .replaceAll("\\{" + "zone_uuid" + "\\}", apiClient.escapeString(zoneUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getObjectStorageZoneSamplesValidateBeforeCall(String zoneUuid, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneUuid' is set
        if (zoneUuid == null) {
            throw new ApiException("Missing the required parameter 'zoneUuid' when calling getObjectStorageZoneSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getObjectStorageZoneSamplesCall(zoneUuid, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get an object storage zone&#x27;s Samples
     * @param zoneUuid object storage zone uuid (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ObjectStorageZoneSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageZoneSamplesResp getObjectStorageZoneSamples(String zoneUuid, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<ObjectStorageZoneSamplesResp> resp = getObjectStorageZoneSamplesWithHttpInfo(zoneUuid, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get an object storage zone&#x27;s Samples
     * @param zoneUuid object storage zone uuid (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;ObjectStorageZoneSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageZoneSamplesResp> getObjectStorageZoneSamplesWithHttpInfo(String zoneUuid, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getObjectStorageZoneSamplesValidateBeforeCall(zoneUuid, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageZoneSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get an object storage zone&#x27;s Samples
     * @param zoneUuid object storage zone uuid (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getObjectStorageZoneSamplesAsync(String zoneUuid, String durationBegin, String durationEnd, String period, final ApiCallback<ObjectStorageZoneSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getObjectStorageZoneSamplesValidateBeforeCall(zoneUuid, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageZoneSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listObjectStorageZones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param local local or non-local zones (optional)
     * @param master master or non-master zones (optional)
     * @param name name of zone (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listObjectStorageZonesCall(Long limit, Long offset, String q, String sort, Boolean local, Boolean master, String name, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-zones/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (local != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("local", local));
        if (master != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("master", master));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listObjectStorageZonesValidateBeforeCall(Long limit, Long offset, String q, String sort, Boolean local, Boolean master, String name, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listObjectStorageZonesCall(limit, offset, q, sort, local, master, name, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List object storage zones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param local local or non-local zones (optional)
     * @param master master or non-master zones (optional)
     * @param name name of zone (optional)
     * @param clusterId cluster id (optional)
     * @return ObjectStorageZonesRecordResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageZonesRecordResp listObjectStorageZones(Long limit, Long offset, String q, String sort, Boolean local, Boolean master, String name, String clusterId) throws ApiException {
        ApiResponse<ObjectStorageZonesRecordResp> resp = listObjectStorageZonesWithHttpInfo(limit, offset, q, sort, local, master, name, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List object storage zones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param local local or non-local zones (optional)
     * @param master master or non-master zones (optional)
     * @param name name of zone (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;ObjectStorageZonesRecordResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageZonesRecordResp> listObjectStorageZonesWithHttpInfo(Long limit, Long offset, String q, String sort, Boolean local, Boolean master, String name, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listObjectStorageZonesValidateBeforeCall(limit, offset, q, sort, local, master, name, clusterId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageZonesRecordResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List object storage zones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param local local or non-local zones (optional)
     * @param master master or non-master zones (optional)
     * @param name name of zone (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listObjectStorageZonesAsync(Long limit, Long offset, String q, String sort, Boolean local, Boolean master, String name, String clusterId, final ApiCallback<ObjectStorageZonesRecordResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listObjectStorageZonesValidateBeforeCall(limit, offset, q, sort, local, master, name, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageZonesRecordResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOSZonesClockDiff
     * @param body zone pairs info (required)
     * @param zoneUuid os zone uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOSZonesClockDiffCall(OSZonePairsUpdateReq body, String zoneUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-zones/{zone_uuid}"
            .replaceAll("\\{" + "zone_uuid" + "\\}", apiClient.escapeString(zoneUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOSZonesClockDiffValidateBeforeCall(OSZonePairsUpdateReq body, String zoneUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOSZonesClockDiff(Async)");
        }
        // verify the required parameter 'zoneUuid' is set
        if (zoneUuid == null) {
            throw new ApiException("Missing the required parameter 'zoneUuid' when calling updateOSZonesClockDiff(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOSZonesClockDiffCall(body, zoneUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update os zone pairs
     * @param body zone pairs info (required)
     * @param zoneUuid os zone uuid (required)
     * @return ObjectStorageZoneResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageZoneResp updateOSZonesClockDiff(OSZonePairsUpdateReq body, String zoneUuid) throws ApiException {
        ApiResponse<ObjectStorageZoneResp> resp = updateOSZonesClockDiffWithHttpInfo(body, zoneUuid);
        return resp.getData();
    }

    /**
     * 
     * update os zone pairs
     * @param body zone pairs info (required)
     * @param zoneUuid os zone uuid (required)
     * @return ApiResponse&lt;ObjectStorageZoneResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageZoneResp> updateOSZonesClockDiffWithHttpInfo(OSZonePairsUpdateReq body, String zoneUuid) throws ApiException {
        com.squareup.okhttp.Call call = updateOSZonesClockDiffValidateBeforeCall(body, zoneUuid, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageZoneResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update os zone pairs
     * @param body zone pairs info (required)
     * @param zoneUuid os zone uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOSZonesClockDiffAsync(OSZonePairsUpdateReq body, String zoneUuid, final ApiCallback<ObjectStorageZoneResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOSZonesClockDiffValidateBeforeCall(body, zoneUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageZoneResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
