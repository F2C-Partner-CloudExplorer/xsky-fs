/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.VolumeGroupSnapshotCreateReq;
import xio.sds.client.model.VolumeGroupSnapshotResp;
import xio.sds.client.model.VolumeGroupSnapshotUpdateReq;
import xio.sds.client.model.VolumeGroupSnapshotsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlockVolumeGroupSnapshotsApi {
    private ApiClient apiClient;

    public BlockVolumeGroupSnapshotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlockVolumeGroupSnapshotsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBlockVolumeGroupSnapshot
     * @param body volume group snapshot info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBlockVolumeGroupSnapshotCall(VolumeGroupSnapshotCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-group-snapshots/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBlockVolumeGroupSnapshotValidateBeforeCall(VolumeGroupSnapshotCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBlockVolumeGroupSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = createBlockVolumeGroupSnapshotCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create block volume group snapshot
     * @param body volume group snapshot info (required)
     * @param clusterId cluster id (optional)
     * @return VolumeGroupSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupSnapshotResp createBlockVolumeGroupSnapshot(VolumeGroupSnapshotCreateReq body, String clusterId) throws ApiException {
        ApiResponse<VolumeGroupSnapshotResp> resp = createBlockVolumeGroupSnapshotWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create block volume group snapshot
     * @param body volume group snapshot info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;VolumeGroupSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupSnapshotResp> createBlockVolumeGroupSnapshotWithHttpInfo(VolumeGroupSnapshotCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createBlockVolumeGroupSnapshotValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create block volume group snapshot
     * @param body volume group snapshot info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBlockVolumeGroupSnapshotAsync(VolumeGroupSnapshotCreateReq body, String clusterId, final ApiCallback<VolumeGroupSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBlockVolumeGroupSnapshotValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBlockVolumeGroupSnapshot
     * @param blockVolumeGroupSnapshotId block volume group snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBlockVolumeGroupSnapshotCall(Long blockVolumeGroupSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-group-snapshots/{block_volume_group_snapshot_id}"
            .replaceAll("\\{" + "block_volume_group_snapshot_id" + "\\}", apiClient.escapeString(blockVolumeGroupSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBlockVolumeGroupSnapshotValidateBeforeCall(Long blockVolumeGroupSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeGroupSnapshotId' is set
        if (blockVolumeGroupSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeGroupSnapshotId' when calling deleteBlockVolumeGroupSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBlockVolumeGroupSnapshotCall(blockVolumeGroupSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete a block volume group snapshot
     * @param blockVolumeGroupSnapshotId block volume group snapshot id (required)
     * @return VolumeGroupSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupSnapshotResp deleteBlockVolumeGroupSnapshot(Long blockVolumeGroupSnapshotId) throws ApiException {
        ApiResponse<VolumeGroupSnapshotResp> resp = deleteBlockVolumeGroupSnapshotWithHttpInfo(blockVolumeGroupSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * Delete a block volume group snapshot
     * @param blockVolumeGroupSnapshotId block volume group snapshot id (required)
     * @return ApiResponse&lt;VolumeGroupSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupSnapshotResp> deleteBlockVolumeGroupSnapshotWithHttpInfo(Long blockVolumeGroupSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBlockVolumeGroupSnapshotValidateBeforeCall(blockVolumeGroupSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a block volume group snapshot
     * @param blockVolumeGroupSnapshotId block volume group snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBlockVolumeGroupSnapshotAsync(Long blockVolumeGroupSnapshotId, final ApiCallback<VolumeGroupSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBlockVolumeGroupSnapshotValidateBeforeCall(blockVolumeGroupSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBlockVolumeGroupSnapshot
     * @param blockVolumeGroupSnapshotId the block volume group snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlockVolumeGroupSnapshotCall(Long blockVolumeGroupSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-group-snapshots/{block_volume_group_snapshot_id}"
            .replaceAll("\\{" + "block_volume_group_snapshot_id" + "\\}", apiClient.escapeString(blockVolumeGroupSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlockVolumeGroupSnapshotValidateBeforeCall(Long blockVolumeGroupSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeGroupSnapshotId' is set
        if (blockVolumeGroupSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeGroupSnapshotId' when calling getBlockVolumeGroupSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = getBlockVolumeGroupSnapshotCall(blockVolumeGroupSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get block volume group snapshot
     * @param blockVolumeGroupSnapshotId the block volume group snapshot id (required)
     * @return VolumeGroupSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupSnapshotResp getBlockVolumeGroupSnapshot(Long blockVolumeGroupSnapshotId) throws ApiException {
        ApiResponse<VolumeGroupSnapshotResp> resp = getBlockVolumeGroupSnapshotWithHttpInfo(blockVolumeGroupSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * get block volume group snapshot
     * @param blockVolumeGroupSnapshotId the block volume group snapshot id (required)
     * @return ApiResponse&lt;VolumeGroupSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupSnapshotResp> getBlockVolumeGroupSnapshotWithHttpInfo(Long blockVolumeGroupSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = getBlockVolumeGroupSnapshotValidateBeforeCall(blockVolumeGroupSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get block volume group snapshot
     * @param blockVolumeGroupSnapshotId the block volume group snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlockVolumeGroupSnapshotAsync(Long blockVolumeGroupSnapshotId, final ApiCallback<VolumeGroupSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlockVolumeGroupSnapshotValidateBeforeCall(blockVolumeGroupSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBlockVolumeGroupSnapshots
     * @param clusterId cluster id (optional)
     * @param blockVolumeGroupId related volume group id (optional)
     * @param name name of volume group snapshot (optional)
     * @param passive passive or not (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBlockVolumeGroupSnapshotsCall(String clusterId, Long blockVolumeGroupId, String name, Boolean passive, Long limit, Long offset, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-group-snapshots/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (blockVolumeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("block_volume_group_id", blockVolumeGroupId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (passive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passive", passive));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBlockVolumeGroupSnapshotsValidateBeforeCall(String clusterId, Long blockVolumeGroupId, String name, Boolean passive, Long limit, Long offset, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listBlockVolumeGroupSnapshotsCall(clusterId, blockVolumeGroupId, name, passive, limit, offset, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List block volume group snapshots
     * @param clusterId cluster id (optional)
     * @param blockVolumeGroupId related volume group id (optional)
     * @param name name of volume group snapshot (optional)
     * @param passive passive or not (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return VolumeGroupSnapshotsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupSnapshotsResp listBlockVolumeGroupSnapshots(String clusterId, Long blockVolumeGroupId, String name, Boolean passive, Long limit, Long offset, String q, String sort) throws ApiException {
        ApiResponse<VolumeGroupSnapshotsResp> resp = listBlockVolumeGroupSnapshotsWithHttpInfo(clusterId, blockVolumeGroupId, name, passive, limit, offset, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List block volume group snapshots
     * @param clusterId cluster id (optional)
     * @param blockVolumeGroupId related volume group id (optional)
     * @param name name of volume group snapshot (optional)
     * @param passive passive or not (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;VolumeGroupSnapshotsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupSnapshotsResp> listBlockVolumeGroupSnapshotsWithHttpInfo(String clusterId, Long blockVolumeGroupId, String name, Boolean passive, Long limit, Long offset, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listBlockVolumeGroupSnapshotsValidateBeforeCall(clusterId, blockVolumeGroupId, name, passive, limit, offset, q, sort, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupSnapshotsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List block volume group snapshots
     * @param clusterId cluster id (optional)
     * @param blockVolumeGroupId related volume group id (optional)
     * @param name name of volume group snapshot (optional)
     * @param passive passive or not (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBlockVolumeGroupSnapshotsAsync(String clusterId, Long blockVolumeGroupId, String name, Boolean passive, Long limit, Long offset, String q, String sort, final ApiCallback<VolumeGroupSnapshotsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBlockVolumeGroupSnapshotsValidateBeforeCall(clusterId, blockVolumeGroupId, name, passive, limit, offset, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupSnapshotsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBlockVolumeGroupSnapshot
     * @param body volume group snapshot info (required)
     * @param blockVolumeGroupSnapshotId the block volume group snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBlockVolumeGroupSnapshotCall(VolumeGroupSnapshotUpdateReq body, Long blockVolumeGroupSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-group-snapshots/{block_volume_group_snapshot_id}"
            .replaceAll("\\{" + "block_volume_group_snapshot_id" + "\\}", apiClient.escapeString(blockVolumeGroupSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBlockVolumeGroupSnapshotValidateBeforeCall(VolumeGroupSnapshotUpdateReq body, Long blockVolumeGroupSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBlockVolumeGroupSnapshot(Async)");
        }
        // verify the required parameter 'blockVolumeGroupSnapshotId' is set
        if (blockVolumeGroupSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeGroupSnapshotId' when calling updateBlockVolumeGroupSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBlockVolumeGroupSnapshotCall(body, blockVolumeGroupSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update block volume group snapshot
     * @param body volume group snapshot info (required)
     * @param blockVolumeGroupSnapshotId the block volume group snapshot id (required)
     * @return VolumeGroupSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupSnapshotResp updateBlockVolumeGroupSnapshot(VolumeGroupSnapshotUpdateReq body, Long blockVolumeGroupSnapshotId) throws ApiException {
        ApiResponse<VolumeGroupSnapshotResp> resp = updateBlockVolumeGroupSnapshotWithHttpInfo(body, blockVolumeGroupSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * Update block volume group snapshot
     * @param body volume group snapshot info (required)
     * @param blockVolumeGroupSnapshotId the block volume group snapshot id (required)
     * @return ApiResponse&lt;VolumeGroupSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupSnapshotResp> updateBlockVolumeGroupSnapshotWithHttpInfo(VolumeGroupSnapshotUpdateReq body, Long blockVolumeGroupSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = updateBlockVolumeGroupSnapshotValidateBeforeCall(body, blockVolumeGroupSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update block volume group snapshot
     * @param body volume group snapshot info (required)
     * @param blockVolumeGroupSnapshotId the block volume group snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBlockVolumeGroupSnapshotAsync(VolumeGroupSnapshotUpdateReq body, Long blockVolumeGroupSnapshotId, final ApiCallback<VolumeGroupSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBlockVolumeGroupSnapshotValidateBeforeCall(body, blockVolumeGroupSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
