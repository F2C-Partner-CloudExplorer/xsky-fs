/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DpDfsSnapshotPoliciesResp;
import xio.sds.client.model.DpDfsSnapshotPolicyCreateReq;
import xio.sds.client.model.DpDfsSnapshotPolicyResp;
import xio.sds.client.model.DpDfsSnapshotPolicyUpdateReq;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DpDfsSnapshotPoliciesApi {
    private ApiClient apiClient;

    public DpDfsSnapshotPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DpDfsSnapshotPoliciesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDpDfsSnapshotPolicy
     * @param body dp dfs snapshot policy info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDpDfsSnapshotPolicyCall(DpDfsSnapshotPolicyCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dp-dfs-snapshot-policies/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDpDfsSnapshotPolicyValidateBeforeCall(DpDfsSnapshotPolicyCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDpDfsSnapshotPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = createDpDfsSnapshotPolicyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dp dfs snapshot policy
     * @param body dp dfs snapshot policy info (required)
     * @return DpDfsSnapshotPolicyResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpDfsSnapshotPolicyResp createDpDfsSnapshotPolicy(DpDfsSnapshotPolicyCreateReq body) throws ApiException {
        ApiResponse<DpDfsSnapshotPolicyResp> resp = createDpDfsSnapshotPolicyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Create dp dfs snapshot policy
     * @param body dp dfs snapshot policy info (required)
     * @return ApiResponse&lt;DpDfsSnapshotPolicyResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpDfsSnapshotPolicyResp> createDpDfsSnapshotPolicyWithHttpInfo(DpDfsSnapshotPolicyCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createDpDfsSnapshotPolicyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotPolicyResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dp dfs snapshot policy
     * @param body dp dfs snapshot policy info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDpDfsSnapshotPolicyAsync(DpDfsSnapshotPolicyCreateReq body, final ApiCallback<DpDfsSnapshotPolicyResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDpDfsSnapshotPolicyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotPolicyResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDPDfsSnapshotPolicy
     * @param policyId dp dfs snapshot policy id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDPDfsSnapshotPolicyCall(Long policyId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-dfs-snapshot-policies/{policy_id}"
            .replaceAll("\\{" + "policy_id" + "\\}", apiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDPDfsSnapshotPolicyValidateBeforeCall(Long policyId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling deleteDPDfsSnapshotPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDPDfsSnapshotPolicyCall(policyId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete a dp dfs snapshot policy
     * @param policyId dp dfs snapshot policy id (required)
     * @param force force delete or not (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDPDfsSnapshotPolicy(Long policyId, Boolean force) throws ApiException {
        deleteDPDfsSnapshotPolicyWithHttpInfo(policyId, force);
    }

    /**
     * 
     * Delete a dp dfs snapshot policy
     * @param policyId dp dfs snapshot policy id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDPDfsSnapshotPolicyWithHttpInfo(Long policyId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteDPDfsSnapshotPolicyValidateBeforeCall(policyId, force, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a dp dfs snapshot policy
     * @param policyId dp dfs snapshot policy id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDPDfsSnapshotPolicyAsync(Long policyId, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDPDfsSnapshotPolicyValidateBeforeCall(policyId, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDpDfsSnapshotPolicy
     * @param policyId the dp dfs snapshot policy id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDpDfsSnapshotPolicyCall(Long policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-dfs-snapshot-policies/{policy_id}"
            .replaceAll("\\{" + "policy_id" + "\\}", apiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDpDfsSnapshotPolicyValidateBeforeCall(Long policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling getDpDfsSnapshotPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = getDpDfsSnapshotPolicyCall(policyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get dp dfs snapshot policy
     * @param policyId the dp dfs snapshot policy id (required)
     * @return DpDfsSnapshotPolicyResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpDfsSnapshotPolicyResp getDpDfsSnapshotPolicy(Long policyId) throws ApiException {
        ApiResponse<DpDfsSnapshotPolicyResp> resp = getDpDfsSnapshotPolicyWithHttpInfo(policyId);
        return resp.getData();
    }

    /**
     * 
     * get dp dfs snapshot policy
     * @param policyId the dp dfs snapshot policy id (required)
     * @return ApiResponse&lt;DpDfsSnapshotPolicyResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpDfsSnapshotPolicyResp> getDpDfsSnapshotPolicyWithHttpInfo(Long policyId) throws ApiException {
        com.squareup.okhttp.Call call = getDpDfsSnapshotPolicyValidateBeforeCall(policyId, null, null);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotPolicyResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get dp dfs snapshot policy
     * @param policyId the dp dfs snapshot policy id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDpDfsSnapshotPolicyAsync(Long policyId, final ApiCallback<DpDfsSnapshotPolicyResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDpDfsSnapshotPolicyValidateBeforeCall(policyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotPolicyResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDpDfsSnapshotPolicies
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param dfsPathName show dp dfs snapshot policies of specific dfs path (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDpDfsSnapshotPoliciesCall(Long limit, Long offset, String q, String sort, String dfsPathName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-dfs-snapshot-policies/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (dfsPathName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_path_name", dfsPathName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDpDfsSnapshotPoliciesValidateBeforeCall(Long limit, Long offset, String q, String sort, String dfsPathName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDpDfsSnapshotPoliciesCall(limit, offset, q, sort, dfsPathName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dp dfs snapshot policies
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param dfsPathName show dp dfs snapshot policies of specific dfs path (optional)
     * @return DpDfsSnapshotPoliciesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpDfsSnapshotPoliciesResp listDpDfsSnapshotPolicies(Long limit, Long offset, String q, String sort, String dfsPathName) throws ApiException {
        ApiResponse<DpDfsSnapshotPoliciesResp> resp = listDpDfsSnapshotPoliciesWithHttpInfo(limit, offset, q, sort, dfsPathName);
        return resp.getData();
    }

    /**
     * 
     * List dp dfs snapshot policies
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param dfsPathName show dp dfs snapshot policies of specific dfs path (optional)
     * @return ApiResponse&lt;DpDfsSnapshotPoliciesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpDfsSnapshotPoliciesResp> listDpDfsSnapshotPoliciesWithHttpInfo(Long limit, Long offset, String q, String sort, String dfsPathName) throws ApiException {
        com.squareup.okhttp.Call call = listDpDfsSnapshotPoliciesValidateBeforeCall(limit, offset, q, sort, dfsPathName, null, null);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotPoliciesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dp dfs snapshot policies
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param dfsPathName show dp dfs snapshot policies of specific dfs path (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDpDfsSnapshotPoliciesAsync(Long limit, Long offset, String q, String sort, String dfsPathName, final ApiCallback<DpDfsSnapshotPoliciesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDpDfsSnapshotPoliciesValidateBeforeCall(limit, offset, q, sort, dfsPathName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotPoliciesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDpDfsSnapshotPolicy
     * @param body dp dfs snapshot policy update info (required)
     * @param policyId dp dfs snapshot policy id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDpDfsSnapshotPolicyCall(DpDfsSnapshotPolicyUpdateReq body, Long policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dp-dfs-snapshot-policies/{policy_id}"
            .replaceAll("\\{" + "policy_id" + "\\}", apiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDpDfsSnapshotPolicyValidateBeforeCall(DpDfsSnapshotPolicyUpdateReq body, Long policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDpDfsSnapshotPolicy(Async)");
        }
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling updateDpDfsSnapshotPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDpDfsSnapshotPolicyCall(body, policyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dp dfs snapshot policy
     * @param body dp dfs snapshot policy update info (required)
     * @param policyId dp dfs snapshot policy id (required)
     * @return DpDfsSnapshotPolicyResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpDfsSnapshotPolicyResp updateDpDfsSnapshotPolicy(DpDfsSnapshotPolicyUpdateReq body, Long policyId) throws ApiException {
        ApiResponse<DpDfsSnapshotPolicyResp> resp = updateDpDfsSnapshotPolicyWithHttpInfo(body, policyId);
        return resp.getData();
    }

    /**
     * 
     * Update dp dfs snapshot policy
     * @param body dp dfs snapshot policy update info (required)
     * @param policyId dp dfs snapshot policy id (required)
     * @return ApiResponse&lt;DpDfsSnapshotPolicyResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpDfsSnapshotPolicyResp> updateDpDfsSnapshotPolicyWithHttpInfo(DpDfsSnapshotPolicyUpdateReq body, Long policyId) throws ApiException {
        com.squareup.okhttp.Call call = updateDpDfsSnapshotPolicyValidateBeforeCall(body, policyId, null, null);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotPolicyResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dp dfs snapshot policy
     * @param body dp dfs snapshot policy update info (required)
     * @param policyId dp dfs snapshot policy id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDpDfsSnapshotPolicyAsync(DpDfsSnapshotPolicyUpdateReq body, Long policyId, final ApiCallback<DpDfsSnapshotPolicyResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDpDfsSnapshotPolicyValidateBeforeCall(body, policyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotPolicyResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
