/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.OSStorageClassCreateReq;
import xio.sds.client.model.OSStorageClassResp;
import xio.sds.client.model.OSStorageClassUpdateReq;
import xio.sds.client.model.OSStorageClassesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OsStorageClassesApi {
    private ApiClient apiClient;

    public OsStorageClassesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OsStorageClassesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createOSStorageClass
     * @param body storage class info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOSStorageClassCall(OSStorageClassCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-storage-classes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOSStorageClassValidateBeforeCall(OSStorageClassCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOSStorageClass(Async)");
        }
        
        com.squareup.okhttp.Call call = createOSStorageClassCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create os storage class
     * @param body storage class info (required)
     * @param clusterId cluster id (optional)
     * @return OSStorageClassResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSStorageClassResp createOSStorageClass(OSStorageClassCreateReq body, String clusterId) throws ApiException {
        ApiResponse<OSStorageClassResp> resp = createOSStorageClassWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create os storage class
     * @param body storage class info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;OSStorageClassResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSStorageClassResp> createOSStorageClassWithHttpInfo(OSStorageClassCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createOSStorageClassValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<OSStorageClassResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create os storage class
     * @param body storage class info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOSStorageClassAsync(OSStorageClassCreateReq body, String clusterId, final ApiCallback<OSStorageClassResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOSStorageClassValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSStorageClassResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteOSStorageClass
     * @param storageClassId storage class id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOSStorageClassCall(Long storageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-storage-classes/{storage_class_id}"
            .replaceAll("\\{" + "storage_class_id" + "\\}", apiClient.escapeString(storageClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOSStorageClassValidateBeforeCall(Long storageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'storageClassId' is set
        if (storageClassId == null) {
            throw new ApiException("Missing the required parameter 'storageClassId' when calling deleteOSStorageClass(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteOSStorageClassCall(storageClassId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete an os storage class
     * @param storageClassId storage class id (required)
     * @return OSStorageClassResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSStorageClassResp deleteOSStorageClass(Long storageClassId) throws ApiException {
        ApiResponse<OSStorageClassResp> resp = deleteOSStorageClassWithHttpInfo(storageClassId);
        return resp.getData();
    }

    /**
     * 
     * Delete an os storage class
     * @param storageClassId storage class id (required)
     * @return ApiResponse&lt;OSStorageClassResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSStorageClassResp> deleteOSStorageClassWithHttpInfo(Long storageClassId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOSStorageClassValidateBeforeCall(storageClassId, null, null);
        Type localVarReturnType = new TypeToken<OSStorageClassResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete an os storage class
     * @param storageClassId storage class id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOSStorageClassAsync(Long storageClassId, final ApiCallback<OSStorageClassResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOSStorageClassValidateBeforeCall(storageClassId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSStorageClassResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOSStorageClass
     * @param storageClassId storage class id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOSStorageClassCall(String storageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-storage-classes/{storage_class_id}"
            .replaceAll("\\{" + "storage_class_id" + "\\}", apiClient.escapeString(storageClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOSStorageClassValidateBeforeCall(String storageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'storageClassId' is set
        if (storageClassId == null) {
            throw new ApiException("Missing the required parameter 'storageClassId' when calling getOSStorageClass(Async)");
        }
        
        com.squareup.okhttp.Call call = getOSStorageClassCall(storageClassId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get an os storage class
     * @param storageClassId storage class id (required)
     * @return OSStorageClassResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSStorageClassResp getOSStorageClass(String storageClassId) throws ApiException {
        ApiResponse<OSStorageClassResp> resp = getOSStorageClassWithHttpInfo(storageClassId);
        return resp.getData();
    }

    /**
     * 
     * Get an os storage class
     * @param storageClassId storage class id (required)
     * @return ApiResponse&lt;OSStorageClassResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSStorageClassResp> getOSStorageClassWithHttpInfo(String storageClassId) throws ApiException {
        com.squareup.okhttp.Call call = getOSStorageClassValidateBeforeCall(storageClassId, null, null);
        Type localVarReturnType = new TypeToken<OSStorageClassResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an os storage class
     * @param storageClassId storage class id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOSStorageClassAsync(String storageClassId, final ApiCallback<OSStorageClassResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOSStorageClassValidateBeforeCall(storageClassId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSStorageClassResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOSStorageClasses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param osPolicyId os policy id (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOSStorageClassesCall(Long limit, Long offset, Long osPolicyId, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-storage-classes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (osPolicyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("os_policy_id", osPolicyId));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOSStorageClassesValidateBeforeCall(Long limit, Long offset, Long osPolicyId, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listOSStorageClassesCall(limit, offset, osPolicyId, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List os storage classes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param osPolicyId os policy id (optional)
     * @param clusterId cluster id (optional)
     * @return OSStorageClassesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSStorageClassesResp listOSStorageClasses(Long limit, Long offset, Long osPolicyId, String clusterId) throws ApiException {
        ApiResponse<OSStorageClassesResp> resp = listOSStorageClassesWithHttpInfo(limit, offset, osPolicyId, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List os storage classes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param osPolicyId os policy id (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;OSStorageClassesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSStorageClassesResp> listOSStorageClassesWithHttpInfo(Long limit, Long offset, Long osPolicyId, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listOSStorageClassesValidateBeforeCall(limit, offset, osPolicyId, clusterId, null, null);
        Type localVarReturnType = new TypeToken<OSStorageClassesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List os storage classes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param osPolicyId os policy id (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOSStorageClassesAsync(Long limit, Long offset, Long osPolicyId, String clusterId, final ApiCallback<OSStorageClassesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOSStorageClassesValidateBeforeCall(limit, offset, osPolicyId, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSStorageClassesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOSStorageClass
     * @param body storage class info (required)
     * @param storageClassId storage class id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOSStorageClassCall(OSStorageClassUpdateReq body, Long storageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-storage-classes/{storage_class_id}"
            .replaceAll("\\{" + "storage_class_id" + "\\}", apiClient.escapeString(storageClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOSStorageClassValidateBeforeCall(OSStorageClassUpdateReq body, Long storageClassId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOSStorageClass(Async)");
        }
        // verify the required parameter 'storageClassId' is set
        if (storageClassId == null) {
            throw new ApiException("Missing the required parameter 'storageClassId' when calling updateOSStorageClass(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOSStorageClassCall(body, storageClassId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update storage class
     * @param body storage class info (required)
     * @param storageClassId storage class id (required)
     * @return OSStorageClassResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSStorageClassResp updateOSStorageClass(OSStorageClassUpdateReq body, Long storageClassId) throws ApiException {
        ApiResponse<OSStorageClassResp> resp = updateOSStorageClassWithHttpInfo(body, storageClassId);
        return resp.getData();
    }

    /**
     * 
     * update storage class
     * @param body storage class info (required)
     * @param storageClassId storage class id (required)
     * @return ApiResponse&lt;OSStorageClassResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSStorageClassResp> updateOSStorageClassWithHttpInfo(OSStorageClassUpdateReq body, Long storageClassId) throws ApiException {
        com.squareup.okhttp.Call call = updateOSStorageClassValidateBeforeCall(body, storageClassId, null, null);
        Type localVarReturnType = new TypeToken<OSStorageClassResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update storage class
     * @param body storage class info (required)
     * @param storageClassId storage class id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOSStorageClassAsync(OSStorageClassUpdateReq body, Long storageClassId, final ApiCallback<OSStorageClassResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOSStorageClassValidateBeforeCall(body, storageClassId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSStorageClassResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
