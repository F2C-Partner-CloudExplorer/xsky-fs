/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DpBackupBlockSnapshotsResp;
import xio.sds.client.model.DpBackupBlockVolumesResp;
import xio.sds.client.model.DpBackupClustersResp;
import xio.sds.client.model.DpSiteCreateReq;
import xio.sds.client.model.DpSiteResp;
import xio.sds.client.model.DpSiteUpdateReq;
import xio.sds.client.model.DpSitesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DpSitesApi {
    private ApiClient apiClient;

    public DpSitesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DpSitesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDpSite
     * @param body dp site info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDpSiteCall(DpSiteCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dp-sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDpSiteValidateBeforeCall(DpSiteCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDpSite(Async)");
        }
        
        com.squareup.okhttp.Call call = createDpSiteCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create a data protection site
     * @param body dp site info (required)
     * @return DpSiteResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpSiteResp createDpSite(DpSiteCreateReq body) throws ApiException {
        ApiResponse<DpSiteResp> resp = createDpSiteWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Create a data protection site
     * @param body dp site info (required)
     * @return ApiResponse&lt;DpSiteResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpSiteResp> createDpSiteWithHttpInfo(DpSiteCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createDpSiteValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DpSiteResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a data protection site
     * @param body dp site info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDpSiteAsync(DpSiteCreateReq body, final ApiCallback<DpSiteResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDpSiteValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpSiteResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDpSite
     * @param siteId dp site id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDpSiteCall(Long siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-sites/{site_id}"
            .replaceAll("\\{" + "site_id" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDpSiteValidateBeforeCall(Long siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling deleteDpSite(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDpSiteCall(siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete data protection site
     * @param siteId dp site id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDpSite(Long siteId) throws ApiException {
        deleteDpSiteWithHttpInfo(siteId);
    }

    /**
     * 
     * Delete data protection site
     * @param siteId dp site id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDpSiteWithHttpInfo(Long siteId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDpSiteValidateBeforeCall(siteId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete data protection site
     * @param siteId dp site id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDpSiteAsync(Long siteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDpSiteValidateBeforeCall(siteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBackupBlockSnapshots
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @param clusterFsId cluster fs id (required)
     * @param blockVolumeName block volume name (required)
     * @param after continuation token (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBackupBlockSnapshotsCall(Long siteId, Long dpGatewayId, String clusterFsId, String blockVolumeName, String after, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-sites/{site_id}/backup-block-snapshots"
            .replaceAll("\\{" + "site_id" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dpGatewayId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dp_gateway_id", dpGatewayId));
        if (clusterFsId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_fs_id", clusterFsId));
        if (blockVolumeName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("block_volume_name", blockVolumeName));
        if (after != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after", after));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBackupBlockSnapshotsValidateBeforeCall(Long siteId, Long dpGatewayId, String clusterFsId, String blockVolumeName, String after, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getBackupBlockSnapshots(Async)");
        }
        // verify the required parameter 'dpGatewayId' is set
        if (dpGatewayId == null) {
            throw new ApiException("Missing the required parameter 'dpGatewayId' when calling getBackupBlockSnapshots(Async)");
        }
        // verify the required parameter 'clusterFsId' is set
        if (clusterFsId == null) {
            throw new ApiException("Missing the required parameter 'clusterFsId' when calling getBackupBlockSnapshots(Async)");
        }
        // verify the required parameter 'blockVolumeName' is set
        if (blockVolumeName == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeName' when calling getBackupBlockSnapshots(Async)");
        }
        
        com.squareup.okhttp.Call call = getBackupBlockSnapshotsCall(siteId, dpGatewayId, clusterFsId, blockVolumeName, after, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List snapshots of a volume stored on a dp site
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @param clusterFsId cluster fs id (required)
     * @param blockVolumeName block volume name (required)
     * @param after continuation token (optional)
     * @return DpBackupBlockSnapshotsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBackupBlockSnapshotsResp getBackupBlockSnapshots(Long siteId, Long dpGatewayId, String clusterFsId, String blockVolumeName, String after) throws ApiException {
        ApiResponse<DpBackupBlockSnapshotsResp> resp = getBackupBlockSnapshotsWithHttpInfo(siteId, dpGatewayId, clusterFsId, blockVolumeName, after);
        return resp.getData();
    }

    /**
     * 
     * List snapshots of a volume stored on a dp site
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @param clusterFsId cluster fs id (required)
     * @param blockVolumeName block volume name (required)
     * @param after continuation token (optional)
     * @return ApiResponse&lt;DpBackupBlockSnapshotsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBackupBlockSnapshotsResp> getBackupBlockSnapshotsWithHttpInfo(Long siteId, Long dpGatewayId, String clusterFsId, String blockVolumeName, String after) throws ApiException {
        com.squareup.okhttp.Call call = getBackupBlockSnapshotsValidateBeforeCall(siteId, dpGatewayId, clusterFsId, blockVolumeName, after, null, null);
        Type localVarReturnType = new TypeToken<DpBackupBlockSnapshotsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List snapshots of a volume stored on a dp site
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @param clusterFsId cluster fs id (required)
     * @param blockVolumeName block volume name (required)
     * @param after continuation token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBackupBlockSnapshotsAsync(Long siteId, Long dpGatewayId, String clusterFsId, String blockVolumeName, String after, final ApiCallback<DpBackupBlockSnapshotsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBackupBlockSnapshotsValidateBeforeCall(siteId, dpGatewayId, clusterFsId, blockVolumeName, after, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBackupBlockSnapshotsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBackupBlockVolumes
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @param clusterFsId cluster fs id (required)
     * @param after continuation token (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBackupBlockVolumesCall(Long siteId, Long dpGatewayId, String clusterFsId, String after, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-sites/{site_id}/backup-block-volumes"
            .replaceAll("\\{" + "site_id" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dpGatewayId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dp_gateway_id", dpGatewayId));
        if (clusterFsId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_fs_id", clusterFsId));
        if (after != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after", after));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBackupBlockVolumesValidateBeforeCall(Long siteId, Long dpGatewayId, String clusterFsId, String after, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getBackupBlockVolumes(Async)");
        }
        // verify the required parameter 'dpGatewayId' is set
        if (dpGatewayId == null) {
            throw new ApiException("Missing the required parameter 'dpGatewayId' when calling getBackupBlockVolumes(Async)");
        }
        // verify the required parameter 'clusterFsId' is set
        if (clusterFsId == null) {
            throw new ApiException("Missing the required parameter 'clusterFsId' when calling getBackupBlockVolumes(Async)");
        }
        
        com.squareup.okhttp.Call call = getBackupBlockVolumesCall(siteId, dpGatewayId, clusterFsId, after, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List volumes of a cluster stored on a dp site
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @param clusterFsId cluster fs id (required)
     * @param after continuation token (optional)
     * @return DpBackupBlockVolumesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBackupBlockVolumesResp getBackupBlockVolumes(Long siteId, Long dpGatewayId, String clusterFsId, String after) throws ApiException {
        ApiResponse<DpBackupBlockVolumesResp> resp = getBackupBlockVolumesWithHttpInfo(siteId, dpGatewayId, clusterFsId, after);
        return resp.getData();
    }

    /**
     * 
     * List volumes of a cluster stored on a dp site
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @param clusterFsId cluster fs id (required)
     * @param after continuation token (optional)
     * @return ApiResponse&lt;DpBackupBlockVolumesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBackupBlockVolumesResp> getBackupBlockVolumesWithHttpInfo(Long siteId, Long dpGatewayId, String clusterFsId, String after) throws ApiException {
        com.squareup.okhttp.Call call = getBackupBlockVolumesValidateBeforeCall(siteId, dpGatewayId, clusterFsId, after, null, null);
        Type localVarReturnType = new TypeToken<DpBackupBlockVolumesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List volumes of a cluster stored on a dp site
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @param clusterFsId cluster fs id (required)
     * @param after continuation token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBackupBlockVolumesAsync(Long siteId, Long dpGatewayId, String clusterFsId, String after, final ApiCallback<DpBackupBlockVolumesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBackupBlockVolumesValidateBeforeCall(siteId, dpGatewayId, clusterFsId, after, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBackupBlockVolumesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBackupClusters
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBackupClustersCall(Long siteId, Long dpGatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-sites/{site_id}/backup-clusters"
            .replaceAll("\\{" + "site_id" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dpGatewayId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dp_gateway_id", dpGatewayId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBackupClustersValidateBeforeCall(Long siteId, Long dpGatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getBackupClusters(Async)");
        }
        // verify the required parameter 'dpGatewayId' is set
        if (dpGatewayId == null) {
            throw new ApiException("Missing the required parameter 'dpGatewayId' when calling getBackupClusters(Async)");
        }
        
        com.squareup.okhttp.Call call = getBackupClustersCall(siteId, dpGatewayId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List clusters stored on a dp site
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @return DpBackupClustersResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBackupClustersResp getBackupClusters(Long siteId, Long dpGatewayId) throws ApiException {
        ApiResponse<DpBackupClustersResp> resp = getBackupClustersWithHttpInfo(siteId, dpGatewayId);
        return resp.getData();
    }

    /**
     * 
     * List clusters stored on a dp site
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @return ApiResponse&lt;DpBackupClustersResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBackupClustersResp> getBackupClustersWithHttpInfo(Long siteId, Long dpGatewayId) throws ApiException {
        com.squareup.okhttp.Call call = getBackupClustersValidateBeforeCall(siteId, dpGatewayId, null, null);
        Type localVarReturnType = new TypeToken<DpBackupClustersResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List clusters stored on a dp site
     * @param siteId dp site id (required)
     * @param dpGatewayId the dp gateway to execute the query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBackupClustersAsync(Long siteId, Long dpGatewayId, final ApiCallback<DpBackupClustersResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBackupClustersValidateBeforeCall(siteId, dpGatewayId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBackupClustersResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDpSite
     * @param siteId protection site id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDpSiteCall(Long siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-sites/{site_id}"
            .replaceAll("\\{" + "site_id" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDpSiteValidateBeforeCall(Long siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getDpSite(Async)");
        }
        
        com.squareup.okhttp.Call call = getDpSiteCall(siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get data protection site
     * @param siteId protection site id (required)
     * @return DpSiteResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpSiteResp getDpSite(Long siteId) throws ApiException {
        ApiResponse<DpSiteResp> resp = getDpSiteWithHttpInfo(siteId);
        return resp.getData();
    }

    /**
     * 
     * Get data protection site
     * @param siteId protection site id (required)
     * @return ApiResponse&lt;DpSiteResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpSiteResp> getDpSiteWithHttpInfo(Long siteId) throws ApiException {
        com.squareup.okhttp.Call call = getDpSiteValidateBeforeCall(siteId, null, null);
        Type localVarReturnType = new TypeToken<DpSiteResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get data protection site
     * @param siteId protection site id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDpSiteAsync(Long siteId, final ApiCallback<DpSiteResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDpSiteValidateBeforeCall(siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpSiteResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDpSites
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param protectionType protection type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDpSitesCall(Long limit, Long offset, String q, String sort, String protectionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (protectionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("protection_type", protectionType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDpSitesValidateBeforeCall(Long limit, Long offset, String q, String sort, String protectionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDpSitesCall(limit, offset, q, sort, protectionType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List data protection sites
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param protectionType protection type (optional)
     * @return DpSitesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpSitesResp listDpSites(Long limit, Long offset, String q, String sort, String protectionType) throws ApiException {
        ApiResponse<DpSitesResp> resp = listDpSitesWithHttpInfo(limit, offset, q, sort, protectionType);
        return resp.getData();
    }

    /**
     * 
     * List data protection sites
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param protectionType protection type (optional)
     * @return ApiResponse&lt;DpSitesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpSitesResp> listDpSitesWithHttpInfo(Long limit, Long offset, String q, String sort, String protectionType) throws ApiException {
        com.squareup.okhttp.Call call = listDpSitesValidateBeforeCall(limit, offset, q, sort, protectionType, null, null);
        Type localVarReturnType = new TypeToken<DpSitesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List data protection sites
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param protectionType protection type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDpSitesAsync(Long limit, Long offset, String q, String sort, String protectionType, final ApiCallback<DpSitesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDpSitesValidateBeforeCall(limit, offset, q, sort, protectionType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpSitesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDpSite
     * @param body dp site info (required)
     * @param siteId dp site id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDpSiteCall(DpSiteUpdateReq body, Long siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dp-sites/{site_id}"
            .replaceAll("\\{" + "site_id" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDpSiteValidateBeforeCall(DpSiteUpdateReq body, Long siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDpSite(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling updateDpSite(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDpSiteCall(body, siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update a data protection site
     * @param body dp site info (required)
     * @param siteId dp site id (required)
     * @return DpSiteResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpSiteResp updateDpSite(DpSiteUpdateReq body, Long siteId) throws ApiException {
        ApiResponse<DpSiteResp> resp = updateDpSiteWithHttpInfo(body, siteId);
        return resp.getData();
    }

    /**
     * 
     * Update a data protection site
     * @param body dp site info (required)
     * @param siteId dp site id (required)
     * @return ApiResponse&lt;DpSiteResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpSiteResp> updateDpSiteWithHttpInfo(DpSiteUpdateReq body, Long siteId) throws ApiException {
        com.squareup.okhttp.Call call = updateDpSiteValidateBeforeCall(body, siteId, null, null);
        Type localVarReturnType = new TypeToken<DpSiteResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a data protection site
     * @param body dp site info (required)
     * @param siteId dp site id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDpSiteAsync(DpSiteUpdateReq body, Long siteId, final ApiCallback<DpSiteResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDpSiteValidateBeforeCall(body, siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpSiteResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
