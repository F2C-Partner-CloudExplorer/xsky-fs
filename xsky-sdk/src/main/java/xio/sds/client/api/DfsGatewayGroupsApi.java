/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsGatewayGroupAddGatewaysReq;
import xio.sds.client.model.DfsGatewayGroupCreateReq;
import xio.sds.client.model.DfsGatewayGroupRebuildGatewaysReq;
import xio.sds.client.model.DfsGatewayGroupRemoveGatewaysReq;
import xio.sds.client.model.DfsGatewayGroupResp;
import xio.sds.client.model.DfsGatewayGroupUpdateReq;
import xio.sds.client.model.DfsGatewayGroupUpdateTypesReq;
import xio.sds.client.model.DfsGatewayGroupUpdateVIPsReq;
import xio.sds.client.model.DfsGatewayGroupsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsGatewayGroupsApi {
    private ApiClient apiClient;

    public DfsGatewayGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsGatewayGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDfsGateways
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDfsGatewaysCall(DfsGatewayGroupAddGatewaysReq body, Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-groups/{dfs_gateway_group_id}:add-gateways"
            .replaceAll("\\{" + "dfs_gateway_group_id" + "\\}", apiClient.escapeString(dfsGatewayGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDfsGatewaysValidateBeforeCall(DfsGatewayGroupAddGatewaysReq body, Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addDfsGateways(Async)");
        }
        // verify the required parameter 'dfsGatewayGroupId' is set
        if (dfsGatewayGroupId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayGroupId' when calling addDfsGateways(Async)");
        }
        
        com.squareup.okhttp.Call call = addDfsGatewaysCall(body, dfsGatewayGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add dfs gateways
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @return DfsGatewayGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayGroupResp addDfsGateways(DfsGatewayGroupAddGatewaysReq body, Long dfsGatewayGroupId) throws ApiException {
        ApiResponse<DfsGatewayGroupResp> resp = addDfsGatewaysWithHttpInfo(body, dfsGatewayGroupId);
        return resp.getData();
    }

    /**
     * 
     * add dfs gateways
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @return ApiResponse&lt;DfsGatewayGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayGroupResp> addDfsGatewaysWithHttpInfo(DfsGatewayGroupAddGatewaysReq body, Long dfsGatewayGroupId) throws ApiException {
        com.squareup.okhttp.Call call = addDfsGatewaysValidateBeforeCall(body, dfsGatewayGroupId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add dfs gateways
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDfsGatewaysAsync(DfsGatewayGroupAddGatewaysReq body, Long dfsGatewayGroupId, final ApiCallback<DfsGatewayGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDfsGatewaysValidateBeforeCall(body, dfsGatewayGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDfsGatewayGroup
     * @param body gateway group info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsGatewayGroupCall(DfsGatewayGroupCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsGatewayGroupValidateBeforeCall(DfsGatewayGroupCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsGatewayGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsGatewayGroupCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dfs gateway group
     * @param body gateway group info (required)
     * @param clusterId cluster id (optional)
     * @return DfsGatewayGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayGroupResp createDfsGatewayGroup(DfsGatewayGroupCreateReq body, String clusterId) throws ApiException {
        ApiResponse<DfsGatewayGroupResp> resp = createDfsGatewayGroupWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create dfs gateway group
     * @param body gateway group info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;DfsGatewayGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayGroupResp> createDfsGatewayGroupWithHttpInfo(DfsGatewayGroupCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createDfsGatewayGroupValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dfs gateway group
     * @param body gateway group info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsGatewayGroupAsync(DfsGatewayGroupCreateReq body, String clusterId, final ApiCallback<DfsGatewayGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsGatewayGroupValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsGatewayGroup
     * @param dfsGatewayGroupId gateway group id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsGatewayGroupCall(Long dfsGatewayGroupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-groups/{dfs_gateway_group_id}"
            .replaceAll("\\{" + "dfs_gateway_group_id" + "\\}", apiClient.escapeString(dfsGatewayGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsGatewayGroupValidateBeforeCall(Long dfsGatewayGroupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsGatewayGroupId' is set
        if (dfsGatewayGroupId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayGroupId' when calling deleteDfsGatewayGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsGatewayGroupCall(dfsGatewayGroupId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs gateway group
     * @param dfsGatewayGroupId gateway group id (required)
     * @param force force delete or not (optional)
     * @return DfsGatewayGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayGroupResp deleteDfsGatewayGroup(Long dfsGatewayGroupId, Boolean force) throws ApiException {
        ApiResponse<DfsGatewayGroupResp> resp = deleteDfsGatewayGroupWithHttpInfo(dfsGatewayGroupId, force);
        return resp.getData();
    }

    /**
     * 
     * delete dfs gateway group
     * @param dfsGatewayGroupId gateway group id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;DfsGatewayGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayGroupResp> deleteDfsGatewayGroupWithHttpInfo(Long dfsGatewayGroupId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsGatewayGroupValidateBeforeCall(dfsGatewayGroupId, force, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs gateway group
     * @param dfsGatewayGroupId gateway group id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsGatewayGroupAsync(Long dfsGatewayGroupId, Boolean force, final ApiCallback<DfsGatewayGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsGatewayGroupValidateBeforeCall(dfsGatewayGroupId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsGatewayGroup
     * @param dfsGatewayGroupId gateway group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsGatewayGroupCall(Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-groups/{dfs_gateway_group_id}"
            .replaceAll("\\{" + "dfs_gateway_group_id" + "\\}", apiClient.escapeString(dfsGatewayGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsGatewayGroupValidateBeforeCall(Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsGatewayGroupId' is set
        if (dfsGatewayGroupId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayGroupId' when calling getDfsGatewayGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsGatewayGroupCall(dfsGatewayGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs gateway group
     * @param dfsGatewayGroupId gateway group id (required)
     * @return DfsGatewayGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayGroupResp getDfsGatewayGroup(Long dfsGatewayGroupId) throws ApiException {
        ApiResponse<DfsGatewayGroupResp> resp = getDfsGatewayGroupWithHttpInfo(dfsGatewayGroupId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs gateway group
     * @param dfsGatewayGroupId gateway group id (required)
     * @return ApiResponse&lt;DfsGatewayGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayGroupResp> getDfsGatewayGroupWithHttpInfo(Long dfsGatewayGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsGatewayGroupValidateBeforeCall(dfsGatewayGroupId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs gateway group
     * @param dfsGatewayGroupId gateway group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsGatewayGroupAsync(Long dfsGatewayGroupId, final ApiCallback<DfsGatewayGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsGatewayGroupValidateBeforeCall(dfsGatewayGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsGatewayGroups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param type type of dfs gateway group (optional)
     * @param security security of dfs gateway group (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsGatewayGroupsCall(Long limit, Long offset, String clusterId, String type, String security, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (security != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("security", security));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsGatewayGroupsValidateBeforeCall(Long limit, Long offset, String clusterId, String type, String security, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsGatewayGroupsCall(limit, offset, clusterId, type, security, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs gateway groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param type type of dfs gateway group (optional)
     * @param security security of dfs gateway group (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return DfsGatewayGroupsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayGroupsResp listDfsGatewayGroups(Long limit, Long offset, String clusterId, String type, String security, String q, String sort) throws ApiException {
        ApiResponse<DfsGatewayGroupsResp> resp = listDfsGatewayGroupsWithHttpInfo(limit, offset, clusterId, type, security, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List dfs gateway groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param type type of dfs gateway group (optional)
     * @param security security of dfs gateway group (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;DfsGatewayGroupsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayGroupsResp> listDfsGatewayGroupsWithHttpInfo(Long limit, Long offset, String clusterId, String type, String security, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listDfsGatewayGroupsValidateBeforeCall(limit, offset, clusterId, type, security, q, sort, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs gateway groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param type type of dfs gateway group (optional)
     * @param security security of dfs gateway group (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsGatewayGroupsAsync(Long limit, Long offset, String clusterId, String type, String security, String q, String sort, final ApiCallback<DfsGatewayGroupsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsGatewayGroupsValidateBeforeCall(limit, offset, clusterId, type, security, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rebuildDfsGateways
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rebuildDfsGatewaysCall(DfsGatewayGroupRebuildGatewaysReq body, Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-groups/{dfs_gateway_group_id}:rebuild-gateways"
            .replaceAll("\\{" + "dfs_gateway_group_id" + "\\}", apiClient.escapeString(dfsGatewayGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rebuildDfsGatewaysValidateBeforeCall(DfsGatewayGroupRebuildGatewaysReq body, Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rebuildDfsGateways(Async)");
        }
        // verify the required parameter 'dfsGatewayGroupId' is set
        if (dfsGatewayGroupId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayGroupId' when calling rebuildDfsGateways(Async)");
        }
        
        com.squareup.okhttp.Call call = rebuildDfsGatewaysCall(body, dfsGatewayGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * rebuild gateways in gateway group
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @return DfsGatewayGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayGroupResp rebuildDfsGateways(DfsGatewayGroupRebuildGatewaysReq body, Long dfsGatewayGroupId) throws ApiException {
        ApiResponse<DfsGatewayGroupResp> resp = rebuildDfsGatewaysWithHttpInfo(body, dfsGatewayGroupId);
        return resp.getData();
    }

    /**
     * 
     * rebuild gateways in gateway group
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @return ApiResponse&lt;DfsGatewayGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayGroupResp> rebuildDfsGatewaysWithHttpInfo(DfsGatewayGroupRebuildGatewaysReq body, Long dfsGatewayGroupId) throws ApiException {
        com.squareup.okhttp.Call call = rebuildDfsGatewaysValidateBeforeCall(body, dfsGatewayGroupId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * rebuild gateways in gateway group
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rebuildDfsGatewaysAsync(DfsGatewayGroupRebuildGatewaysReq body, Long dfsGatewayGroupId, final ApiCallback<DfsGatewayGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rebuildDfsGatewaysValidateBeforeCall(body, dfsGatewayGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeDfsGateways
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeDfsGatewaysCall(DfsGatewayGroupRemoveGatewaysReq body, Long dfsGatewayGroupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-groups/{dfs_gateway_group_id}:remove-gateways"
            .replaceAll("\\{" + "dfs_gateway_group_id" + "\\}", apiClient.escapeString(dfsGatewayGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeDfsGatewaysValidateBeforeCall(DfsGatewayGroupRemoveGatewaysReq body, Long dfsGatewayGroupId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeDfsGateways(Async)");
        }
        // verify the required parameter 'dfsGatewayGroupId' is set
        if (dfsGatewayGroupId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayGroupId' when calling removeDfsGateways(Async)");
        }
        
        com.squareup.okhttp.Call call = removeDfsGatewaysCall(body, dfsGatewayGroupId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove gateways from gateway group
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param force force delete or not (optional)
     * @return DfsGatewayGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayGroupResp removeDfsGateways(DfsGatewayGroupRemoveGatewaysReq body, Long dfsGatewayGroupId, Boolean force) throws ApiException {
        ApiResponse<DfsGatewayGroupResp> resp = removeDfsGatewaysWithHttpInfo(body, dfsGatewayGroupId, force);
        return resp.getData();
    }

    /**
     * 
     * remove gateways from gateway group
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;DfsGatewayGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayGroupResp> removeDfsGatewaysWithHttpInfo(DfsGatewayGroupRemoveGatewaysReq body, Long dfsGatewayGroupId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = removeDfsGatewaysValidateBeforeCall(body, dfsGatewayGroupId, force, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove gateways from gateway group
     * @param body gateways info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDfsGatewaysAsync(DfsGatewayGroupRemoveGatewaysReq body, Long dfsGatewayGroupId, Boolean force, final ApiCallback<DfsGatewayGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDfsGatewaysValidateBeforeCall(body, dfsGatewayGroupId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsGatewayGroup
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsGatewayGroupCall(DfsGatewayGroupUpdateReq body, Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-groups/{dfs_gateway_group_id}"
            .replaceAll("\\{" + "dfs_gateway_group_id" + "\\}", apiClient.escapeString(dfsGatewayGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsGatewayGroupValidateBeforeCall(DfsGatewayGroupUpdateReq body, Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsGatewayGroup(Async)");
        }
        // verify the required parameter 'dfsGatewayGroupId' is set
        if (dfsGatewayGroupId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayGroupId' when calling updateDfsGatewayGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsGatewayGroupCall(body, dfsGatewayGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs gateway group
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @return DfsGatewayGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayGroupResp updateDfsGatewayGroup(DfsGatewayGroupUpdateReq body, Long dfsGatewayGroupId) throws ApiException {
        ApiResponse<DfsGatewayGroupResp> resp = updateDfsGatewayGroupWithHttpInfo(body, dfsGatewayGroupId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs gateway group
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @return ApiResponse&lt;DfsGatewayGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayGroupResp> updateDfsGatewayGroupWithHttpInfo(DfsGatewayGroupUpdateReq body, Long dfsGatewayGroupId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsGatewayGroupValidateBeforeCall(body, dfsGatewayGroupId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs gateway group
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsGatewayGroupAsync(DfsGatewayGroupUpdateReq body, Long dfsGatewayGroupId, final ApiCallback<DfsGatewayGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsGatewayGroupValidateBeforeCall(body, dfsGatewayGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsGatewayGroupTypes
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsGatewayGroupTypesCall(DfsGatewayGroupUpdateTypesReq body, Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-groups/{dfs_gateway_group_id}:update-types"
            .replaceAll("\\{" + "dfs_gateway_group_id" + "\\}", apiClient.escapeString(dfsGatewayGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsGatewayGroupTypesValidateBeforeCall(DfsGatewayGroupUpdateTypesReq body, Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsGatewayGroupTypes(Async)");
        }
        // verify the required parameter 'dfsGatewayGroupId' is set
        if (dfsGatewayGroupId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayGroupId' when calling updateDfsGatewayGroupTypes(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsGatewayGroupTypesCall(body, dfsGatewayGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update protocal types of dfs gateway group
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @return DfsGatewayGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayGroupResp updateDfsGatewayGroupTypes(DfsGatewayGroupUpdateTypesReq body, Long dfsGatewayGroupId) throws ApiException {
        ApiResponse<DfsGatewayGroupResp> resp = updateDfsGatewayGroupTypesWithHttpInfo(body, dfsGatewayGroupId);
        return resp.getData();
    }

    /**
     * 
     * Update protocal types of dfs gateway group
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @return ApiResponse&lt;DfsGatewayGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayGroupResp> updateDfsGatewayGroupTypesWithHttpInfo(DfsGatewayGroupUpdateTypesReq body, Long dfsGatewayGroupId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsGatewayGroupTypesValidateBeforeCall(body, dfsGatewayGroupId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update protocal types of dfs gateway group
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsGatewayGroupTypesAsync(DfsGatewayGroupUpdateTypesReq body, Long dfsGatewayGroupId, final ApiCallback<DfsGatewayGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsGatewayGroupTypesValidateBeforeCall(body, dfsGatewayGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsGatewayGroupVIPs
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsGatewayGroupVIPsCall(DfsGatewayGroupUpdateVIPsReq body, Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-groups/{dfs_gateway_group_id}:update-vips"
            .replaceAll("\\{" + "dfs_gateway_group_id" + "\\}", apiClient.escapeString(dfsGatewayGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsGatewayGroupVIPsValidateBeforeCall(DfsGatewayGroupUpdateVIPsReq body, Long dfsGatewayGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsGatewayGroupVIPs(Async)");
        }
        // verify the required parameter 'dfsGatewayGroupId' is set
        if (dfsGatewayGroupId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayGroupId' when calling updateDfsGatewayGroupVIPs(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsGatewayGroupVIPsCall(body, dfsGatewayGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update VIPs of dfs gateway group
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @return DfsGatewayGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayGroupResp updateDfsGatewayGroupVIPs(DfsGatewayGroupUpdateVIPsReq body, Long dfsGatewayGroupId) throws ApiException {
        ApiResponse<DfsGatewayGroupResp> resp = updateDfsGatewayGroupVIPsWithHttpInfo(body, dfsGatewayGroupId);
        return resp.getData();
    }

    /**
     * 
     * Update VIPs of dfs gateway group
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @return ApiResponse&lt;DfsGatewayGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayGroupResp> updateDfsGatewayGroupVIPsWithHttpInfo(DfsGatewayGroupUpdateVIPsReq body, Long dfsGatewayGroupId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsGatewayGroupVIPsValidateBeforeCall(body, dfsGatewayGroupId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update VIPs of dfs gateway group
     * @param body gateway group info (required)
     * @param dfsGatewayGroupId gateway group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsGatewayGroupVIPsAsync(DfsGatewayGroupUpdateVIPsReq body, Long dfsGatewayGroupId, final ApiCallback<DfsGatewayGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsGatewayGroupVIPsValidateBeforeCall(body, dfsGatewayGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
