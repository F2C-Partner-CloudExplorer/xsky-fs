/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DpVolumeGroupSnapshotReplicationPairCreateReq;
import xio.sds.client.model.DpVolumeGroupSnapshotReplicationPairResp;
import xio.sds.client.model.DpVolumeGroupSnapshotReplicationPairUpdateReq;
import xio.sds.client.model.DpVolumeGroupSnapshotReplicationPairsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DpVolumeGroupSnapshotReplicationPairsApi {
    private ApiClient apiClient;

    public DpVolumeGroupSnapshotReplicationPairsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DpVolumeGroupSnapshotReplicationPairsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for asyncFailoverDpVolumeGroupSnapshotReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call asyncFailoverDpVolumeGroupSnapshotReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-volume-group-snapshot-replication-pairs/{pair_id}:async-failover"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call asyncFailoverDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling asyncFailoverDpVolumeGroupSnapshotReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = asyncFailoverDpVolumeGroupSnapshotReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * switch the roles of the pair
     * @param pairId resource id (required)
     * @return DpVolumeGroupSnapshotReplicationPairsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpVolumeGroupSnapshotReplicationPairsResp asyncFailoverDpVolumeGroupSnapshotReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpVolumeGroupSnapshotReplicationPairsResp> resp = asyncFailoverDpVolumeGroupSnapshotReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * switch the roles of the pair
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpVolumeGroupSnapshotReplicationPairsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpVolumeGroupSnapshotReplicationPairsResp> asyncFailoverDpVolumeGroupSnapshotReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = asyncFailoverDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * switch the roles of the pair
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call asyncFailoverDpVolumeGroupSnapshotReplicationPairAsync(Long pairId, final ApiCallback<DpVolumeGroupSnapshotReplicationPairsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = asyncFailoverDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDpVolumeGroupSnapshotReplicationPair
     * @param body pair info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDpVolumeGroupSnapshotReplicationPairCall(DpVolumeGroupSnapshotReplicationPairCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dp-volume-group-snapshot-replication-pairs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(DpVolumeGroupSnapshotReplicationPairCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDpVolumeGroupSnapshotReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = createDpVolumeGroupSnapshotReplicationPairCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dp volume group snapshot replication pair
     * @param body pair info (required)
     * @return DpVolumeGroupSnapshotReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpVolumeGroupSnapshotReplicationPairResp createDpVolumeGroupSnapshotReplicationPair(DpVolumeGroupSnapshotReplicationPairCreateReq body) throws ApiException {
        ApiResponse<DpVolumeGroupSnapshotReplicationPairResp> resp = createDpVolumeGroupSnapshotReplicationPairWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Create dp volume group snapshot replication pair
     * @param body pair info (required)
     * @return ApiResponse&lt;DpVolumeGroupSnapshotReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpVolumeGroupSnapshotReplicationPairResp> createDpVolumeGroupSnapshotReplicationPairWithHttpInfo(DpVolumeGroupSnapshotReplicationPairCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dp volume group snapshot replication pair
     * @param body pair info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDpVolumeGroupSnapshotReplicationPairAsync(DpVolumeGroupSnapshotReplicationPairCreateReq body, final ApiCallback<DpVolumeGroupSnapshotReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDpVolumeGroupSnapshotReplicationPair
     * @param pairId resource id (required)
     * @param force force delete volume group pair or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDpVolumeGroupSnapshotReplicationPairCall(Long pairId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-volume-group-snapshot-replication-pairs/{pair_id}"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(Long pairId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling deleteDpVolumeGroupSnapshotReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDpVolumeGroupSnapshotReplicationPairCall(pairId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete dp volume group snapshot replication pair
     * @param pairId resource id (required)
     * @param force force delete volume group pair or not (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDpVolumeGroupSnapshotReplicationPair(Long pairId, Boolean force) throws ApiException {
        deleteDpVolumeGroupSnapshotReplicationPairWithHttpInfo(pairId, force);
    }

    /**
     * 
     * Delete dp volume group snapshot replication pair
     * @param pairId resource id (required)
     * @param force force delete volume group pair or not (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDpVolumeGroupSnapshotReplicationPairWithHttpInfo(Long pairId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(pairId, force, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete dp volume group snapshot replication pair
     * @param pairId resource id (required)
     * @param force force delete volume group pair or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDpVolumeGroupSnapshotReplicationPairAsync(Long pairId, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(pairId, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDpVolumeGroupSnapshotReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDpVolumeGroupSnapshotReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-volume-group-snapshot-replication-pairs/{pair_id}"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling getDpVolumeGroupSnapshotReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = getDpVolumeGroupSnapshotReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dp volume group snapshot replication pair
     * @param pairId resource id (required)
     * @return DpVolumeGroupSnapshotReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpVolumeGroupSnapshotReplicationPairResp getDpVolumeGroupSnapshotReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpVolumeGroupSnapshotReplicationPairResp> resp = getDpVolumeGroupSnapshotReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * Get dp volume group snapshot replication pair
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpVolumeGroupSnapshotReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpVolumeGroupSnapshotReplicationPairResp> getDpVolumeGroupSnapshotReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = getDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dp volume group snapshot replication pair
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDpVolumeGroupSnapshotReplicationPairAsync(Long pairId, final ApiCallback<DpVolumeGroupSnapshotReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDpVolumeGroupSnapshotReplicationPair
     * @param volumeGroupId related volume group id (optional)
     * @param dpVolumeGroupSnapshotReplicationPolicyId related policy id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDpVolumeGroupSnapshotReplicationPairCall(Long volumeGroupId, Long dpVolumeGroupSnapshotReplicationPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-volume-group-snapshot-replication-pairs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (volumeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("volume_group_id", volumeGroupId));
        if (dpVolumeGroupSnapshotReplicationPolicyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dp_volume_group_snapshot_replication_policy_id", dpVolumeGroupSnapshotReplicationPolicyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(Long volumeGroupId, Long dpVolumeGroupSnapshotReplicationPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDpVolumeGroupSnapshotReplicationPairCall(volumeGroupId, dpVolumeGroupSnapshotReplicationPolicyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dp volume group snapshot replication pairs
     * @param volumeGroupId related volume group id (optional)
     * @param dpVolumeGroupSnapshotReplicationPolicyId related policy id (optional)
     * @return DpVolumeGroupSnapshotReplicationPairsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpVolumeGroupSnapshotReplicationPairsResp listDpVolumeGroupSnapshotReplicationPair(Long volumeGroupId, Long dpVolumeGroupSnapshotReplicationPolicyId) throws ApiException {
        ApiResponse<DpVolumeGroupSnapshotReplicationPairsResp> resp = listDpVolumeGroupSnapshotReplicationPairWithHttpInfo(volumeGroupId, dpVolumeGroupSnapshotReplicationPolicyId);
        return resp.getData();
    }

    /**
     * 
     * List dp volume group snapshot replication pairs
     * @param volumeGroupId related volume group id (optional)
     * @param dpVolumeGroupSnapshotReplicationPolicyId related policy id (optional)
     * @return ApiResponse&lt;DpVolumeGroupSnapshotReplicationPairsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpVolumeGroupSnapshotReplicationPairsResp> listDpVolumeGroupSnapshotReplicationPairWithHttpInfo(Long volumeGroupId, Long dpVolumeGroupSnapshotReplicationPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = listDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(volumeGroupId, dpVolumeGroupSnapshotReplicationPolicyId, null, null);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dp volume group snapshot replication pairs
     * @param volumeGroupId related volume group id (optional)
     * @param dpVolumeGroupSnapshotReplicationPolicyId related policy id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDpVolumeGroupSnapshotReplicationPairAsync(Long volumeGroupId, Long dpVolumeGroupSnapshotReplicationPolicyId, final ApiCallback<DpVolumeGroupSnapshotReplicationPairsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(volumeGroupId, dpVolumeGroupSnapshotReplicationPolicyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pauseDpVolumeGroupSnapshotReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pauseDpVolumeGroupSnapshotReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-volume-group-snapshot-replication-pairs/{pair_id}:pause"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pauseDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling pauseDpVolumeGroupSnapshotReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = pauseDpVolumeGroupSnapshotReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * pause periodic sync
     * @param pairId resource id (required)
     * @return DpVolumeGroupSnapshotReplicationPairsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpVolumeGroupSnapshotReplicationPairsResp pauseDpVolumeGroupSnapshotReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpVolumeGroupSnapshotReplicationPairsResp> resp = pauseDpVolumeGroupSnapshotReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * pause periodic sync
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpVolumeGroupSnapshotReplicationPairsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpVolumeGroupSnapshotReplicationPairsResp> pauseDpVolumeGroupSnapshotReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = pauseDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * pause periodic sync
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pauseDpVolumeGroupSnapshotReplicationPairAsync(Long pairId, final ApiCallback<DpVolumeGroupSnapshotReplicationPairsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pauseDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resumeDpVolumeGroupSnapshotReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resumeDpVolumeGroupSnapshotReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-volume-group-snapshot-replication-pairs/{pair_id}:resume"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resumeDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling resumeDpVolumeGroupSnapshotReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = resumeDpVolumeGroupSnapshotReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * resume periodic sync
     * @param pairId resource id (required)
     * @return DpVolumeGroupSnapshotReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpVolumeGroupSnapshotReplicationPairResp resumeDpVolumeGroupSnapshotReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpVolumeGroupSnapshotReplicationPairResp> resp = resumeDpVolumeGroupSnapshotReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * resume periodic sync
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpVolumeGroupSnapshotReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpVolumeGroupSnapshotReplicationPairResp> resumeDpVolumeGroupSnapshotReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = resumeDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * resume periodic sync
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resumeDpVolumeGroupSnapshotReplicationPairAsync(Long pairId, final ApiCallback<DpVolumeGroupSnapshotReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resumeDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDpVolumeGroupSnapshotReplicationPair
     * @param body pair info (required)
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDpVolumeGroupSnapshotReplicationPairCall(DpVolumeGroupSnapshotReplicationPairUpdateReq body, Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dp-volume-group-snapshot-replication-pairs/{pair_id}"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(DpVolumeGroupSnapshotReplicationPairUpdateReq body, Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDpVolumeGroupSnapshotReplicationPair(Async)");
        }
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling updateDpVolumeGroupSnapshotReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDpVolumeGroupSnapshotReplicationPairCall(body, pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dp volume group snapshot replication pair
     * @param body pair info (required)
     * @param pairId resource id (required)
     * @return DpVolumeGroupSnapshotReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpVolumeGroupSnapshotReplicationPairResp updateDpVolumeGroupSnapshotReplicationPair(DpVolumeGroupSnapshotReplicationPairUpdateReq body, Long pairId) throws ApiException {
        ApiResponse<DpVolumeGroupSnapshotReplicationPairResp> resp = updateDpVolumeGroupSnapshotReplicationPairWithHttpInfo(body, pairId);
        return resp.getData();
    }

    /**
     * 
     * Update dp volume group snapshot replication pair
     * @param body pair info (required)
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpVolumeGroupSnapshotReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpVolumeGroupSnapshotReplicationPairResp> updateDpVolumeGroupSnapshotReplicationPairWithHttpInfo(DpVolumeGroupSnapshotReplicationPairUpdateReq body, Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = updateDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(body, pairId, null, null);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dp volume group snapshot replication pair
     * @param body pair info (required)
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDpVolumeGroupSnapshotReplicationPairAsync(DpVolumeGroupSnapshotReplicationPairUpdateReq body, Long pairId, final ApiCallback<DpVolumeGroupSnapshotReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDpVolumeGroupSnapshotReplicationPairValidateBeforeCall(body, pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpVolumeGroupSnapshotReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
