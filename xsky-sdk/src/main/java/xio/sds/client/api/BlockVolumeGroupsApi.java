/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.VolumeGroupCreateReq;
import xio.sds.client.model.VolumeGroupResp;
import xio.sds.client.model.VolumeGroupRollbackReq;
import xio.sds.client.model.VolumeGroupSnapshotReplicationProtectionReq;
import xio.sds.client.model.VolumeGroupUpdateReq;
import xio.sds.client.model.VolumeGroupsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlockVolumeGroupsApi {
    private ApiClient apiClient;

    public BlockVolumeGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlockVolumeGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBlockVolumeGroup
     * @param body volume group info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBlockVolumeGroupCall(VolumeGroupCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBlockVolumeGroupValidateBeforeCall(VolumeGroupCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBlockVolumeGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createBlockVolumeGroupCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create block volume group
     * @param body volume group info (required)
     * @param clusterId cluster id (optional)
     * @return VolumeGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupResp createBlockVolumeGroup(VolumeGroupCreateReq body, String clusterId) throws ApiException {
        ApiResponse<VolumeGroupResp> resp = createBlockVolumeGroupWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create block volume group
     * @param body volume group info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;VolumeGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupResp> createBlockVolumeGroupWithHttpInfo(VolumeGroupCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createBlockVolumeGroupValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create block volume group
     * @param body volume group info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBlockVolumeGroupAsync(VolumeGroupCreateReq body, String clusterId, final ApiCallback<VolumeGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBlockVolumeGroupValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBlockVolumeGroup
     * @param blockVolumeGroupId block volume group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBlockVolumeGroupCall(Long blockVolumeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-groups/{block_volume_group_id}"
            .replaceAll("\\{" + "block_volume_group_id" + "\\}", apiClient.escapeString(blockVolumeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBlockVolumeGroupValidateBeforeCall(Long blockVolumeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeGroupId' is set
        if (blockVolumeGroupId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeGroupId' when calling deleteBlockVolumeGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBlockVolumeGroupCall(blockVolumeGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete a block volume group
     * @param blockVolumeGroupId block volume group id (required)
     * @return VolumeGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupResp deleteBlockVolumeGroup(Long blockVolumeGroupId) throws ApiException {
        ApiResponse<VolumeGroupResp> resp = deleteBlockVolumeGroupWithHttpInfo(blockVolumeGroupId);
        return resp.getData();
    }

    /**
     * 
     * Delete a block volume group
     * @param blockVolumeGroupId block volume group id (required)
     * @return ApiResponse&lt;VolumeGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupResp> deleteBlockVolumeGroupWithHttpInfo(Long blockVolumeGroupId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBlockVolumeGroupValidateBeforeCall(blockVolumeGroupId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a block volume group
     * @param blockVolumeGroupId block volume group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBlockVolumeGroupAsync(Long blockVolumeGroupId, final ApiCallback<VolumeGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBlockVolumeGroupValidateBeforeCall(blockVolumeGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBlockVolumeGroup
     * @param blockVolumeGroupId block volume group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlockVolumeGroupCall(Long blockVolumeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-groups/{block_volume_group_id}"
            .replaceAll("\\{" + "block_volume_group_id" + "\\}", apiClient.escapeString(blockVolumeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlockVolumeGroupValidateBeforeCall(Long blockVolumeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeGroupId' is set
        if (blockVolumeGroupId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeGroupId' when calling getBlockVolumeGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getBlockVolumeGroupCall(blockVolumeGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a block volume group
     * @param blockVolumeGroupId block volume group id (required)
     * @return VolumeGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupResp getBlockVolumeGroup(Long blockVolumeGroupId) throws ApiException {
        ApiResponse<VolumeGroupResp> resp = getBlockVolumeGroupWithHttpInfo(blockVolumeGroupId);
        return resp.getData();
    }

    /**
     * 
     * get a block volume group
     * @param blockVolumeGroupId block volume group id (required)
     * @return ApiResponse&lt;VolumeGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupResp> getBlockVolumeGroupWithHttpInfo(Long blockVolumeGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getBlockVolumeGroupValidateBeforeCall(blockVolumeGroupId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a block volume group
     * @param blockVolumeGroupId block volume group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlockVolumeGroupAsync(Long blockVolumeGroupId, final ApiCallback<VolumeGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlockVolumeGroupValidateBeforeCall(blockVolumeGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBlockVolumeGroups
     * @param clusterId cluster id (optional)
     * @param passive passive or not (optional)
     * @param name name of volume group (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param dpVolumeGroupSnapshotReplicationPolicyId show volume groups of specific dp block async replication policy (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBlockVolumeGroupsCall(String clusterId, Boolean passive, String name, Long limit, Long offset, String q, String sort, Long dpVolumeGroupSnapshotReplicationPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (passive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passive", passive));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (dpVolumeGroupSnapshotReplicationPolicyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dp_volume_group_snapshot_replication_policy_id", dpVolumeGroupSnapshotReplicationPolicyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBlockVolumeGroupsValidateBeforeCall(String clusterId, Boolean passive, String name, Long limit, Long offset, String q, String sort, Long dpVolumeGroupSnapshotReplicationPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listBlockVolumeGroupsCall(clusterId, passive, name, limit, offset, q, sort, dpVolumeGroupSnapshotReplicationPolicyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List block volume groups
     * @param clusterId cluster id (optional)
     * @param passive passive or not (optional)
     * @param name name of volume group (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param dpVolumeGroupSnapshotReplicationPolicyId show volume groups of specific dp block async replication policy (optional)
     * @return VolumeGroupsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupsResp listBlockVolumeGroups(String clusterId, Boolean passive, String name, Long limit, Long offset, String q, String sort, Long dpVolumeGroupSnapshotReplicationPolicyId) throws ApiException {
        ApiResponse<VolumeGroupsResp> resp = listBlockVolumeGroupsWithHttpInfo(clusterId, passive, name, limit, offset, q, sort, dpVolumeGroupSnapshotReplicationPolicyId);
        return resp.getData();
    }

    /**
     * 
     * List block volume groups
     * @param clusterId cluster id (optional)
     * @param passive passive or not (optional)
     * @param name name of volume group (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param dpVolumeGroupSnapshotReplicationPolicyId show volume groups of specific dp block async replication policy (optional)
     * @return ApiResponse&lt;VolumeGroupsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupsResp> listBlockVolumeGroupsWithHttpInfo(String clusterId, Boolean passive, String name, Long limit, Long offset, String q, String sort, Long dpVolumeGroupSnapshotReplicationPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = listBlockVolumeGroupsValidateBeforeCall(clusterId, passive, name, limit, offset, q, sort, dpVolumeGroupSnapshotReplicationPolicyId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List block volume groups
     * @param clusterId cluster id (optional)
     * @param passive passive or not (optional)
     * @param name name of volume group (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param dpVolumeGroupSnapshotReplicationPolicyId show volume groups of specific dp block async replication policy (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBlockVolumeGroupsAsync(String clusterId, Boolean passive, String name, Long limit, Long offset, String q, String sort, Long dpVolumeGroupSnapshotReplicationPolicyId, final ApiCallback<VolumeGroupsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBlockVolumeGroupsValidateBeforeCall(clusterId, passive, name, limit, offset, q, sort, dpVolumeGroupSnapshotReplicationPolicyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rollbackVolumeGroup
     * @param body rollback info (required)
     * @param blockVolumeGroupId block volume group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rollbackVolumeGroupCall(VolumeGroupRollbackReq body, Long blockVolumeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-groups/{block_volume_group_id}:rollback"
            .replaceAll("\\{" + "block_volume_group_id" + "\\}", apiClient.escapeString(blockVolumeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rollbackVolumeGroupValidateBeforeCall(VolumeGroupRollbackReq body, Long blockVolumeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rollbackVolumeGroup(Async)");
        }
        // verify the required parameter 'blockVolumeGroupId' is set
        if (blockVolumeGroupId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeGroupId' when calling rollbackVolumeGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = rollbackVolumeGroupCall(body, blockVolumeGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Rollback volume group
     * @param body rollback info (required)
     * @param blockVolumeGroupId block volume group id (required)
     * @return VolumeGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupResp rollbackVolumeGroup(VolumeGroupRollbackReq body, Long blockVolumeGroupId) throws ApiException {
        ApiResponse<VolumeGroupResp> resp = rollbackVolumeGroupWithHttpInfo(body, blockVolumeGroupId);
        return resp.getData();
    }

    /**
     * 
     * Rollback volume group
     * @param body rollback info (required)
     * @param blockVolumeGroupId block volume group id (required)
     * @return ApiResponse&lt;VolumeGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupResp> rollbackVolumeGroupWithHttpInfo(VolumeGroupRollbackReq body, Long blockVolumeGroupId) throws ApiException {
        com.squareup.okhttp.Call call = rollbackVolumeGroupValidateBeforeCall(body, blockVolumeGroupId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rollback volume group
     * @param body rollback info (required)
     * @param blockVolumeGroupId block volume group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rollbackVolumeGroupAsync(VolumeGroupRollbackReq body, Long blockVolumeGroupId, final ApiCallback<VolumeGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rollbackVolumeGroupValidateBeforeCall(body, blockVolumeGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setVolumeGroupSnapshotReplicationProtection
     * @param body request info (required)
     * @param blockVolumeGroupId the block volume group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setVolumeGroupSnapshotReplicationProtectionCall(VolumeGroupSnapshotReplicationProtectionReq body, Long blockVolumeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-groups/{block_volume_group_id}:set-snapshot-replication-protection"
            .replaceAll("\\{" + "block_volume_group_id" + "\\}", apiClient.escapeString(blockVolumeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setVolumeGroupSnapshotReplicationProtectionValidateBeforeCall(VolumeGroupSnapshotReplicationProtectionReq body, Long blockVolumeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setVolumeGroupSnapshotReplicationProtection(Async)");
        }
        // verify the required parameter 'blockVolumeGroupId' is set
        if (blockVolumeGroupId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeGroupId' when calling setVolumeGroupSnapshotReplicationProtection(Async)");
        }
        
        com.squareup.okhttp.Call call = setVolumeGroupSnapshotReplicationProtectionCall(body, blockVolumeGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set snapshot replication protection for a volume group
     * @param body request info (required)
     * @param blockVolumeGroupId the block volume group id (required)
     * @return VolumeGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupResp setVolumeGroupSnapshotReplicationProtection(VolumeGroupSnapshotReplicationProtectionReq body, Long blockVolumeGroupId) throws ApiException {
        ApiResponse<VolumeGroupResp> resp = setVolumeGroupSnapshotReplicationProtectionWithHttpInfo(body, blockVolumeGroupId);
        return resp.getData();
    }

    /**
     * 
     * Set snapshot replication protection for a volume group
     * @param body request info (required)
     * @param blockVolumeGroupId the block volume group id (required)
     * @return ApiResponse&lt;VolumeGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupResp> setVolumeGroupSnapshotReplicationProtectionWithHttpInfo(VolumeGroupSnapshotReplicationProtectionReq body, Long blockVolumeGroupId) throws ApiException {
        com.squareup.okhttp.Call call = setVolumeGroupSnapshotReplicationProtectionValidateBeforeCall(body, blockVolumeGroupId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set snapshot replication protection for a volume group
     * @param body request info (required)
     * @param blockVolumeGroupId the block volume group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setVolumeGroupSnapshotReplicationProtectionAsync(VolumeGroupSnapshotReplicationProtectionReq body, Long blockVolumeGroupId, final ApiCallback<VolumeGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setVolumeGroupSnapshotReplicationProtectionValidateBeforeCall(body, blockVolumeGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsetVolumeGroupSnapshotReplicationProtection
     * @param blockVolumeGroupId the volume group id (required)
     * @param force force unset or not (optional)
     * @param reserveVolumeGroup reserve replicated volume group or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsetVolumeGroupSnapshotReplicationProtectionCall(Long blockVolumeGroupId, Boolean force, Boolean reserveVolumeGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-groups/{block_volume_group_id}:unset-snapshot-replication-protection"
            .replaceAll("\\{" + "block_volume_group_id" + "\\}", apiClient.escapeString(blockVolumeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (reserveVolumeGroup != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reserve_volume_group", reserveVolumeGroup));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsetVolumeGroupSnapshotReplicationProtectionValidateBeforeCall(Long blockVolumeGroupId, Boolean force, Boolean reserveVolumeGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeGroupId' is set
        if (blockVolumeGroupId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeGroupId' when calling unsetVolumeGroupSnapshotReplicationProtection(Async)");
        }
        
        com.squareup.okhttp.Call call = unsetVolumeGroupSnapshotReplicationProtectionCall(blockVolumeGroupId, force, reserveVolumeGroup, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unset volume group snapshot replication protection for a volume group
     * @param blockVolumeGroupId the volume group id (required)
     * @param force force unset or not (optional)
     * @param reserveVolumeGroup reserve replicated volume group or not (optional)
     * @return VolumeGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupResp unsetVolumeGroupSnapshotReplicationProtection(Long blockVolumeGroupId, Boolean force, Boolean reserveVolumeGroup) throws ApiException {
        ApiResponse<VolumeGroupResp> resp = unsetVolumeGroupSnapshotReplicationProtectionWithHttpInfo(blockVolumeGroupId, force, reserveVolumeGroup);
        return resp.getData();
    }

    /**
     * 
     * Unset volume group snapshot replication protection for a volume group
     * @param blockVolumeGroupId the volume group id (required)
     * @param force force unset or not (optional)
     * @param reserveVolumeGroup reserve replicated volume group or not (optional)
     * @return ApiResponse&lt;VolumeGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupResp> unsetVolumeGroupSnapshotReplicationProtectionWithHttpInfo(Long blockVolumeGroupId, Boolean force, Boolean reserveVolumeGroup) throws ApiException {
        com.squareup.okhttp.Call call = unsetVolumeGroupSnapshotReplicationProtectionValidateBeforeCall(blockVolumeGroupId, force, reserveVolumeGroup, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unset volume group snapshot replication protection for a volume group
     * @param blockVolumeGroupId the volume group id (required)
     * @param force force unset or not (optional)
     * @param reserveVolumeGroup reserve replicated volume group or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsetVolumeGroupSnapshotReplicationProtectionAsync(Long blockVolumeGroupId, Boolean force, Boolean reserveVolumeGroup, final ApiCallback<VolumeGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsetVolumeGroupSnapshotReplicationProtectionValidateBeforeCall(blockVolumeGroupId, force, reserveVolumeGroup, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBlockVolumeGroup
     * @param body volume group info (required)
     * @param blockVolumeGroupId block volume group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBlockVolumeGroupCall(VolumeGroupUpdateReq body, Long blockVolumeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volume-groups/{block_volume_group_id}"
            .replaceAll("\\{" + "block_volume_group_id" + "\\}", apiClient.escapeString(blockVolumeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBlockVolumeGroupValidateBeforeCall(VolumeGroupUpdateReq body, Long blockVolumeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBlockVolumeGroup(Async)");
        }
        // verify the required parameter 'blockVolumeGroupId' is set
        if (blockVolumeGroupId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeGroupId' when calling updateBlockVolumeGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBlockVolumeGroupCall(body, blockVolumeGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update block volume group
     * @param body volume group info (required)
     * @param blockVolumeGroupId block volume group id (required)
     * @return VolumeGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeGroupResp updateBlockVolumeGroup(VolumeGroupUpdateReq body, Long blockVolumeGroupId) throws ApiException {
        ApiResponse<VolumeGroupResp> resp = updateBlockVolumeGroupWithHttpInfo(body, blockVolumeGroupId);
        return resp.getData();
    }

    /**
     * 
     * Update block volume group
     * @param body volume group info (required)
     * @param blockVolumeGroupId block volume group id (required)
     * @return ApiResponse&lt;VolumeGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeGroupResp> updateBlockVolumeGroupWithHttpInfo(VolumeGroupUpdateReq body, Long blockVolumeGroupId) throws ApiException {
        com.squareup.okhttp.Call call = updateBlockVolumeGroupValidateBeforeCall(body, blockVolumeGroupId, null, null);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update block volume group
     * @param body volume group info (required)
     * @param blockVolumeGroupId block volume group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBlockVolumeGroupAsync(VolumeGroupUpdateReq body, Long blockVolumeGroupId, final ApiCallback<VolumeGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBlockVolumeGroupValidateBeforeCall(body, blockVolumeGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
