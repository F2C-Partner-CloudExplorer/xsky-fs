/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsS3BucketCreateReq;
import xio.sds.client.model.DfsS3BucketPolicySetReq;
import xio.sds.client.model.DfsS3BucketResp;
import xio.sds.client.model.DfsS3BucketSamplesResp;
import xio.sds.client.model.DfsS3BucketUpdateReq;
import xio.sds.client.model.DfsS3BucketsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsS3BucketsApi {
    private ApiClient apiClient;

    public DfsS3BucketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsS3BucketsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDfsS3Bucket
     * @param body bucket info (required)
     * @param clusterId cluster id (optional)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsS3BucketCall(DfsS3BucketCreateReq body, String clusterId, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-s3-buckets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsS3BucketValidateBeforeCall(DfsS3BucketCreateReq body, String clusterId, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsS3Bucket(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsS3BucketCall(body, clusterId, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create os bucket
     * @param body bucket info (required)
     * @param clusterId cluster id (optional)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return DfsS3BucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsS3BucketResp createDfsS3Bucket(DfsS3BucketCreateReq body, String clusterId, Boolean allowPathCreate) throws ApiException {
        ApiResponse<DfsS3BucketResp> resp = createDfsS3BucketWithHttpInfo(body, clusterId, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * Create os bucket
     * @param body bucket info (required)
     * @param clusterId cluster id (optional)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return ApiResponse&lt;DfsS3BucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsS3BucketResp> createDfsS3BucketWithHttpInfo(DfsS3BucketCreateReq body, String clusterId, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = createDfsS3BucketValidateBeforeCall(body, clusterId, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create os bucket
     * @param body bucket info (required)
     * @param clusterId cluster id (optional)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsS3BucketAsync(DfsS3BucketCreateReq body, String clusterId, Boolean allowPathCreate, final ApiCallback<DfsS3BucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsS3BucketValidateBeforeCall(body, clusterId, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsS3Bucket
     * @param bucketId bucket id (required)
     * @param withDirectory also delete directory (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsS3BucketCall(Long bucketId, Boolean withDirectory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-s3-buckets/{bucket_id}"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (withDirectory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_directory", withDirectory));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsS3BucketValidateBeforeCall(Long bucketId, Boolean withDirectory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling deleteDfsS3Bucket(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsS3BucketCall(bucketId, withDirectory, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs s3 bucket
     * @param bucketId bucket id (required)
     * @param withDirectory also delete directory (optional)
     * @return DfsS3BucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsS3BucketResp deleteDfsS3Bucket(Long bucketId, Boolean withDirectory) throws ApiException {
        ApiResponse<DfsS3BucketResp> resp = deleteDfsS3BucketWithHttpInfo(bucketId, withDirectory);
        return resp.getData();
    }

    /**
     * 
     * delete dfs s3 bucket
     * @param bucketId bucket id (required)
     * @param withDirectory also delete directory (optional)
     * @return ApiResponse&lt;DfsS3BucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsS3BucketResp> deleteDfsS3BucketWithHttpInfo(Long bucketId, Boolean withDirectory) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsS3BucketValidateBeforeCall(bucketId, withDirectory, null, null);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs s3 bucket
     * @param bucketId bucket id (required)
     * @param withDirectory also delete directory (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsS3BucketAsync(Long bucketId, Boolean withDirectory, final ApiCallback<DfsS3BucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsS3BucketValidateBeforeCall(bucketId, withDirectory, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsS3BucketPolicy
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsS3BucketPolicyCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-s3-buckets/{bucket_id}:delete-bucket-policy"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsS3BucketPolicyValidateBeforeCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling deleteDfsS3BucketPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsS3BucketPolicyCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs s3 bucket policy
     * @param bucketId bucket id (required)
     * @return DfsS3BucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsS3BucketResp deleteDfsS3BucketPolicy(Long bucketId) throws ApiException {
        ApiResponse<DfsS3BucketResp> resp = deleteDfsS3BucketPolicyWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * 
     * delete dfs s3 bucket policy
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;DfsS3BucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsS3BucketResp> deleteDfsS3BucketPolicyWithHttpInfo(Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsS3BucketPolicyValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs s3 bucket policy
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsS3BucketPolicyAsync(Long bucketId, final ApiCallback<DfsS3BucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsS3BucketPolicyValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsS3Bucket
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsS3BucketCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-s3-buckets/{bucket_id}"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsS3BucketValidateBeforeCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getDfsS3Bucket(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsS3BucketCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs s3 bucket
     * @param bucketId bucket id (required)
     * @return DfsS3BucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsS3BucketResp getDfsS3Bucket(Long bucketId) throws ApiException {
        ApiResponse<DfsS3BucketResp> resp = getDfsS3BucketWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs s3 bucket
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;DfsS3BucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsS3BucketResp> getDfsS3BucketWithHttpInfo(Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsS3BucketValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs s3 bucket
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsS3BucketAsync(Long bucketId, final ApiCallback<DfsS3BucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsS3BucketValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsS3BucketSamples
     * @param bucketId bucket id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsS3BucketSamplesCall(Long bucketId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-s3-buckets/{bucket_id}/samples"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsS3BucketSamplesValidateBeforeCall(Long bucketId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getDfsS3BucketSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsS3BucketSamplesCall(bucketId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get an dfs s3 bucket&#x27;s Samples
     * @param bucketId bucket id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return DfsS3BucketSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsS3BucketSamplesResp getDfsS3BucketSamples(Long bucketId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<DfsS3BucketSamplesResp> resp = getDfsS3BucketSamplesWithHttpInfo(bucketId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get an dfs s3 bucket&#x27;s Samples
     * @param bucketId bucket id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;DfsS3BucketSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsS3BucketSamplesResp> getDfsS3BucketSamplesWithHttpInfo(Long bucketId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getDfsS3BucketSamplesValidateBeforeCall(bucketId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<DfsS3BucketSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get an dfs s3 bucket&#x27;s Samples
     * @param bucketId bucket id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsS3BucketSamplesAsync(Long bucketId, String durationBegin, String durationEnd, String period, final ApiCallback<DfsS3BucketSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsS3BucketSamplesValidateBeforeCall(bucketId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsS3BucketSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsS3Buckets
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of dfs s3 buckets (optional)
     * @param ownerId The id of user buckets belong to (optional)
     * @param pathId The id of bucket path (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsS3BucketsCall(String clusterId, Long limit, Long offset, String name, Long ownerId, Long pathId, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-s3-buckets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (ownerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("owner_id", ownerId));
        if (pathId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path_id", pathId));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsS3BucketsValidateBeforeCall(String clusterId, Long limit, Long offset, String name, Long ownerId, Long pathId, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsS3BucketsCall(clusterId, limit, offset, name, ownerId, pathId, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs s3 buckets
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of dfs s3 buckets (optional)
     * @param ownerId The id of user buckets belong to (optional)
     * @param pathId The id of bucket path (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return DfsS3BucketsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsS3BucketsResp listDfsS3Buckets(String clusterId, Long limit, Long offset, String name, Long ownerId, Long pathId, String q, String sort) throws ApiException {
        ApiResponse<DfsS3BucketsResp> resp = listDfsS3BucketsWithHttpInfo(clusterId, limit, offset, name, ownerId, pathId, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List dfs s3 buckets
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of dfs s3 buckets (optional)
     * @param ownerId The id of user buckets belong to (optional)
     * @param pathId The id of bucket path (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;DfsS3BucketsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsS3BucketsResp> listDfsS3BucketsWithHttpInfo(String clusterId, Long limit, Long offset, String name, Long ownerId, Long pathId, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listDfsS3BucketsValidateBeforeCall(clusterId, limit, offset, name, ownerId, pathId, q, sort, null, null);
        Type localVarReturnType = new TypeToken<DfsS3BucketsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs s3 buckets
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of dfs s3 buckets (optional)
     * @param ownerId The id of user buckets belong to (optional)
     * @param pathId The id of bucket path (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsS3BucketsAsync(String clusterId, Long limit, Long offset, String name, Long ownerId, Long pathId, String q, String sort, final ApiCallback<DfsS3BucketsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsS3BucketsValidateBeforeCall(clusterId, limit, offset, name, ownerId, pathId, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsS3BucketsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setDfsS3BucketPolicy
     * @param body bucket policy info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setDfsS3BucketPolicyCall(DfsS3BucketPolicySetReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-s3-buckets/{bucket_id}:set-bucket-policy"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setDfsS3BucketPolicyValidateBeforeCall(DfsS3BucketPolicySetReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setDfsS3BucketPolicy(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling setDfsS3BucketPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = setDfsS3BucketPolicyCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set dfs s3 bucket policy
     * @param body bucket policy info (required)
     * @param bucketId bucket id (required)
     * @return DfsS3BucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsS3BucketResp setDfsS3BucketPolicy(DfsS3BucketPolicySetReq body, Long bucketId) throws ApiException {
        ApiResponse<DfsS3BucketResp> resp = setDfsS3BucketPolicyWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * set dfs s3 bucket policy
     * @param body bucket policy info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;DfsS3BucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsS3BucketResp> setDfsS3BucketPolicyWithHttpInfo(DfsS3BucketPolicySetReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = setDfsS3BucketPolicyValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * set dfs s3 bucket policy
     * @param body bucket policy info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDfsS3BucketPolicyAsync(DfsS3BucketPolicySetReq body, Long bucketId, final ApiCallback<DfsS3BucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDfsS3BucketPolicyValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsS3Bucket
     * @param body bucket info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsS3BucketCall(DfsS3BucketUpdateReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-s3-buckets/{bucket_id}"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsS3BucketValidateBeforeCall(DfsS3BucketUpdateReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsS3Bucket(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling updateDfsS3Bucket(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsS3BucketCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs s3 bucket
     * @param body bucket info (required)
     * @param bucketId bucket id (required)
     * @return DfsS3BucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsS3BucketResp updateDfsS3Bucket(DfsS3BucketUpdateReq body, Long bucketId) throws ApiException {
        ApiResponse<DfsS3BucketResp> resp = updateDfsS3BucketWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs s3 bucket
     * @param body bucket info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;DfsS3BucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsS3BucketResp> updateDfsS3BucketWithHttpInfo(DfsS3BucketUpdateReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsS3BucketValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs s3 bucket
     * @param body bucket info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsS3BucketAsync(DfsS3BucketUpdateReq body, Long bucketId, final ApiCallback<DfsS3BucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsS3BucketValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsS3BucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
