/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsFTPShareAddACLsReq;
import xio.sds.client.model.DfsFTPShareCreateReq;
import xio.sds.client.model.DfsFTPShareRemoveACLsReq;
import xio.sds.client.model.DfsFTPShareResp;
import xio.sds.client.model.DfsFTPShareUpdateACLsReq;
import xio.sds.client.model.DfsFTPShareUpdateReq;
import xio.sds.client.model.DfsFTPSharesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsFtpSharesApi {
    private ApiClient apiClient;

    public DfsFtpSharesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsFtpSharesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDfsFTPShareACLs
     * @param body ftp share acls info (required)
     * @param dfsFtpShareId dfs ftp share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDfsFTPShareACLsCall(DfsFTPShareAddACLsReq body, Long dfsFtpShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-ftp-shares/{dfs_ftp_share_id}:add-acls"
            .replaceAll("\\{" + "dfs_ftp_share_id" + "\\}", apiClient.escapeString(dfsFtpShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDfsFTPShareACLsValidateBeforeCall(DfsFTPShareAddACLsReq body, Long dfsFtpShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addDfsFTPShareACLs(Async)");
        }
        // verify the required parameter 'dfsFtpShareId' is set
        if (dfsFtpShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsFtpShareId' when calling addDfsFTPShareACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = addDfsFTPShareACLsCall(body, dfsFtpShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Add dfs ftp share acls
     * @param body ftp share acls info (required)
     * @param dfsFtpShareId dfs ftp share id (required)
     * @return DfsFTPShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsFTPShareResp addDfsFTPShareACLs(DfsFTPShareAddACLsReq body, Long dfsFtpShareId) throws ApiException {
        ApiResponse<DfsFTPShareResp> resp = addDfsFTPShareACLsWithHttpInfo(body, dfsFtpShareId);
        return resp.getData();
    }

    /**
     * 
     * Add dfs ftp share acls
     * @param body ftp share acls info (required)
     * @param dfsFtpShareId dfs ftp share id (required)
     * @return ApiResponse&lt;DfsFTPShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsFTPShareResp> addDfsFTPShareACLsWithHttpInfo(DfsFTPShareAddACLsReq body, Long dfsFtpShareId) throws ApiException {
        com.squareup.okhttp.Call call = addDfsFTPShareACLsValidateBeforeCall(body, dfsFtpShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add dfs ftp share acls
     * @param body ftp share acls info (required)
     * @param dfsFtpShareId dfs ftp share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDfsFTPShareACLsAsync(DfsFTPShareAddACLsReq body, Long dfsFtpShareId, final ApiCallback<DfsFTPShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDfsFTPShareACLsValidateBeforeCall(body, dfsFtpShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDfsFTPShare
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsFTPShareCall(DfsFTPShareCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-ftp-shares/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsFTPShareValidateBeforeCall(DfsFTPShareCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsFTPShare(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsFTPShareCall(body, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dfs ftp share
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return DfsFTPShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsFTPShareResp createDfsFTPShare(DfsFTPShareCreateReq body, Boolean allowPathCreate) throws ApiException {
        ApiResponse<DfsFTPShareResp> resp = createDfsFTPShareWithHttpInfo(body, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * Create dfs ftp share
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return ApiResponse&lt;DfsFTPShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsFTPShareResp> createDfsFTPShareWithHttpInfo(DfsFTPShareCreateReq body, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = createDfsFTPShareValidateBeforeCall(body, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dfs ftp share
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsFTPShareAsync(DfsFTPShareCreateReq body, Boolean allowPathCreate, final ApiCallback<DfsFTPShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsFTPShareValidateBeforeCall(body, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsFTPShare
     * @param dfsFtpShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsFTPShareCall(Long dfsFtpShareId, Boolean force, Boolean withDirectory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-ftp-shares/{dfs_ftp_share_id}"
            .replaceAll("\\{" + "dfs_ftp_share_id" + "\\}", apiClient.escapeString(dfsFtpShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (withDirectory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_directory", withDirectory));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsFTPShareValidateBeforeCall(Long dfsFtpShareId, Boolean force, Boolean withDirectory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsFtpShareId' is set
        if (dfsFtpShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsFtpShareId' when calling deleteDfsFTPShare(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsFTPShareCall(dfsFtpShareId, force, withDirectory, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs ftp share
     * @param dfsFtpShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @return DfsFTPShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsFTPShareResp deleteDfsFTPShare(Long dfsFtpShareId, Boolean force, Boolean withDirectory) throws ApiException {
        ApiResponse<DfsFTPShareResp> resp = deleteDfsFTPShareWithHttpInfo(dfsFtpShareId, force, withDirectory);
        return resp.getData();
    }

    /**
     * 
     * delete dfs ftp share
     * @param dfsFtpShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @return ApiResponse&lt;DfsFTPShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsFTPShareResp> deleteDfsFTPShareWithHttpInfo(Long dfsFtpShareId, Boolean force, Boolean withDirectory) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsFTPShareValidateBeforeCall(dfsFtpShareId, force, withDirectory, null, null);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs ftp share
     * @param dfsFtpShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsFTPShareAsync(Long dfsFtpShareId, Boolean force, Boolean withDirectory, final ApiCallback<DfsFTPShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsFTPShareValidateBeforeCall(dfsFtpShareId, force, withDirectory, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsFTPShare
     * @param dfsFtpShareId share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsFTPShareCall(Long dfsFtpShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-ftp-shares/{dfs_ftp_share_id}"
            .replaceAll("\\{" + "dfs_ftp_share_id" + "\\}", apiClient.escapeString(dfsFtpShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsFTPShareValidateBeforeCall(Long dfsFtpShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsFtpShareId' is set
        if (dfsFtpShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsFtpShareId' when calling getDfsFTPShare(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsFTPShareCall(dfsFtpShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs ftp share
     * @param dfsFtpShareId share id (required)
     * @return DfsFTPShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsFTPShareResp getDfsFTPShare(Long dfsFtpShareId) throws ApiException {
        ApiResponse<DfsFTPShareResp> resp = getDfsFTPShareWithHttpInfo(dfsFtpShareId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs ftp share
     * @param dfsFtpShareId share id (required)
     * @return ApiResponse&lt;DfsFTPShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsFTPShareResp> getDfsFTPShareWithHttpInfo(Long dfsFtpShareId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsFTPShareValidateBeforeCall(dfsFtpShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs ftp share
     * @param dfsFtpShareId share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsFTPShareAsync(Long dfsFtpShareId, final ApiCallback<DfsFTPShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsFTPShareValidateBeforeCall(dfsFtpShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsFTPShares
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param path related dfs path (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsFTPSharesCall(Long limit, Long offset, String clusterId, Long dfsRootfsId, String path, Long dfsGatewayGroupId, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-ftp-shares/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (dfsRootfsId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_rootfs_id", dfsRootfsId));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (dfsGatewayGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_gateway_group_id", dfsGatewayGroupId));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsFTPSharesValidateBeforeCall(Long limit, Long offset, String clusterId, Long dfsRootfsId, String path, Long dfsGatewayGroupId, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsFTPSharesCall(limit, offset, clusterId, dfsRootfsId, path, dfsGatewayGroupId, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs ftp shares
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param path related dfs path (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return DfsFTPSharesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsFTPSharesResp listDfsFTPShares(Long limit, Long offset, String clusterId, Long dfsRootfsId, String path, Long dfsGatewayGroupId, String q, String sort) throws ApiException {
        ApiResponse<DfsFTPSharesResp> resp = listDfsFTPSharesWithHttpInfo(limit, offset, clusterId, dfsRootfsId, path, dfsGatewayGroupId, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List dfs ftp shares
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param path related dfs path (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;DfsFTPSharesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsFTPSharesResp> listDfsFTPSharesWithHttpInfo(Long limit, Long offset, String clusterId, Long dfsRootfsId, String path, Long dfsGatewayGroupId, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listDfsFTPSharesValidateBeforeCall(limit, offset, clusterId, dfsRootfsId, path, dfsGatewayGroupId, q, sort, null, null);
        Type localVarReturnType = new TypeToken<DfsFTPSharesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs ftp shares
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param path related dfs path (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsFTPSharesAsync(Long limit, Long offset, String clusterId, Long dfsRootfsId, String path, Long dfsGatewayGroupId, String q, String sort, final ApiCallback<DfsFTPSharesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsFTPSharesValidateBeforeCall(limit, offset, clusterId, dfsRootfsId, path, dfsGatewayGroupId, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsFTPSharesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeDfsFTPShareACLs
     * @param body share acls info (required)
     * @param dfsFtpShareId dfs ftp share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeDfsFTPShareACLsCall(DfsFTPShareRemoveACLsReq body, Long dfsFtpShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-ftp-shares/{dfs_ftp_share_id}:remove-acls"
            .replaceAll("\\{" + "dfs_ftp_share_id" + "\\}", apiClient.escapeString(dfsFtpShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeDfsFTPShareACLsValidateBeforeCall(DfsFTPShareRemoveACLsReq body, Long dfsFtpShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeDfsFTPShareACLs(Async)");
        }
        // verify the required parameter 'dfsFtpShareId' is set
        if (dfsFtpShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsFtpShareId' when calling removeDfsFTPShareACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = removeDfsFTPShareACLsCall(body, dfsFtpShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove dfs ftp share acls
     * @param body share acls info (required)
     * @param dfsFtpShareId dfs ftp share id (required)
     * @return DfsFTPShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsFTPShareResp removeDfsFTPShareACLs(DfsFTPShareRemoveACLsReq body, Long dfsFtpShareId) throws ApiException {
        ApiResponse<DfsFTPShareResp> resp = removeDfsFTPShareACLsWithHttpInfo(body, dfsFtpShareId);
        return resp.getData();
    }

    /**
     * 
     * remove dfs ftp share acls
     * @param body share acls info (required)
     * @param dfsFtpShareId dfs ftp share id (required)
     * @return ApiResponse&lt;DfsFTPShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsFTPShareResp> removeDfsFTPShareACLsWithHttpInfo(DfsFTPShareRemoveACLsReq body, Long dfsFtpShareId) throws ApiException {
        com.squareup.okhttp.Call call = removeDfsFTPShareACLsValidateBeforeCall(body, dfsFtpShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove dfs ftp share acls
     * @param body share acls info (required)
     * @param dfsFtpShareId dfs ftp share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDfsFTPShareACLsAsync(DfsFTPShareRemoveACLsReq body, Long dfsFtpShareId, final ApiCallback<DfsFTPShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDfsFTPShareACLsValidateBeforeCall(body, dfsFtpShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsFTPShare
     * @param body share info (required)
     * @param dfsFtpShareId share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsFTPShareCall(DfsFTPShareUpdateReq body, Long dfsFtpShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-ftp-shares/{dfs_ftp_share_id}"
            .replaceAll("\\{" + "dfs_ftp_share_id" + "\\}", apiClient.escapeString(dfsFtpShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsFTPShareValidateBeforeCall(DfsFTPShareUpdateReq body, Long dfsFtpShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsFTPShare(Async)");
        }
        // verify the required parameter 'dfsFtpShareId' is set
        if (dfsFtpShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsFtpShareId' when calling updateDfsFTPShare(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsFTPShareCall(body, dfsFtpShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update dfs ftp shares
     * @param body share info (required)
     * @param dfsFtpShareId share id (required)
     * @return DfsFTPShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsFTPShareResp updateDfsFTPShare(DfsFTPShareUpdateReq body, Long dfsFtpShareId) throws ApiException {
        ApiResponse<DfsFTPShareResp> resp = updateDfsFTPShareWithHttpInfo(body, dfsFtpShareId);
        return resp.getData();
    }

    /**
     * 
     * update dfs ftp shares
     * @param body share info (required)
     * @param dfsFtpShareId share id (required)
     * @return ApiResponse&lt;DfsFTPShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsFTPShareResp> updateDfsFTPShareWithHttpInfo(DfsFTPShareUpdateReq body, Long dfsFtpShareId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsFTPShareValidateBeforeCall(body, dfsFtpShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update dfs ftp shares
     * @param body share info (required)
     * @param dfsFtpShareId share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsFTPShareAsync(DfsFTPShareUpdateReq body, Long dfsFtpShareId, final ApiCallback<DfsFTPShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsFTPShareValidateBeforeCall(body, dfsFtpShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsFTPShareACLs
     * @param body ftp share acls info (required)
     * @param dfsFtpShareId ftp share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsFTPShareACLsCall(DfsFTPShareUpdateACLsReq body, Long dfsFtpShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-ftp-shares/{dfs_ftp_share_id}:update-acls"
            .replaceAll("\\{" + "dfs_ftp_share_id" + "\\}", apiClient.escapeString(dfsFtpShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsFTPShareACLsValidateBeforeCall(DfsFTPShareUpdateACLsReq body, Long dfsFtpShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsFTPShareACLs(Async)");
        }
        // verify the required parameter 'dfsFtpShareId' is set
        if (dfsFtpShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsFtpShareId' when calling updateDfsFTPShareACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsFTPShareACLsCall(body, dfsFtpShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs ftp share acls
     * @param body ftp share acls info (required)
     * @param dfsFtpShareId ftp share id (required)
     * @return DfsFTPShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsFTPShareResp updateDfsFTPShareACLs(DfsFTPShareUpdateACLsReq body, Long dfsFtpShareId) throws ApiException {
        ApiResponse<DfsFTPShareResp> resp = updateDfsFTPShareACLsWithHttpInfo(body, dfsFtpShareId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs ftp share acls
     * @param body ftp share acls info (required)
     * @param dfsFtpShareId ftp share id (required)
     * @return ApiResponse&lt;DfsFTPShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsFTPShareResp> updateDfsFTPShareACLsWithHttpInfo(DfsFTPShareUpdateACLsReq body, Long dfsFtpShareId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsFTPShareACLsValidateBeforeCall(body, dfsFtpShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs ftp share acls
     * @param body ftp share acls info (required)
     * @param dfsFtpShareId ftp share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsFTPShareACLsAsync(DfsFTPShareUpdateACLsReq body, Long dfsFtpShareId, final ApiCallback<DfsFTPShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsFTPShareACLsValidateBeforeCall(body, dfsFtpShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsFTPShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
