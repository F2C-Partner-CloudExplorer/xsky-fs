/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsGatewayZoneCreateReq;
import xio.sds.client.model.DfsGatewayZoneResp;
import xio.sds.client.model.DfsGatewayZoneSamplesResp;
import xio.sds.client.model.DfsGatewayZoneUpdateReq;
import xio.sds.client.model.DfsGatewayZonesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsGatewayZonesApi {
    private ApiClient apiClient;

    public DfsGatewayZonesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsGatewayZonesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDfsGatewayZone
     * @param body gateway zone info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsGatewayZoneCall(DfsGatewayZoneCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-zones/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsGatewayZoneValidateBeforeCall(DfsGatewayZoneCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsGatewayZone(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsGatewayZoneCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dfs gateway zone
     * @param body gateway zone info (required)
     * @param clusterId cluster id (optional)
     * @return DfsGatewayZoneResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayZoneResp createDfsGatewayZone(DfsGatewayZoneCreateReq body, String clusterId) throws ApiException {
        ApiResponse<DfsGatewayZoneResp> resp = createDfsGatewayZoneWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create dfs gateway zone
     * @param body gateway zone info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;DfsGatewayZoneResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayZoneResp> createDfsGatewayZoneWithHttpInfo(DfsGatewayZoneCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createDfsGatewayZoneValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayZoneResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dfs gateway zone
     * @param body gateway zone info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsGatewayZoneAsync(DfsGatewayZoneCreateReq body, String clusterId, final ApiCallback<DfsGatewayZoneResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsGatewayZoneValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayZoneResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsGatewayZone
     * @param dfsGatewayZoneId gateway zone id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsGatewayZoneCall(Long dfsGatewayZoneId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-zones/{dfs_gateway_zone_id}"
            .replaceAll("\\{" + "dfs_gateway_zone_id" + "\\}", apiClient.escapeString(dfsGatewayZoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsGatewayZoneValidateBeforeCall(Long dfsGatewayZoneId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsGatewayZoneId' is set
        if (dfsGatewayZoneId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayZoneId' when calling deleteDfsGatewayZone(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsGatewayZoneCall(dfsGatewayZoneId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs gateway zone
     * @param dfsGatewayZoneId gateway zone id (required)
     * @param force force delete or not (optional)
     * @return DfsGatewayZoneResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayZoneResp deleteDfsGatewayZone(Long dfsGatewayZoneId, Boolean force) throws ApiException {
        ApiResponse<DfsGatewayZoneResp> resp = deleteDfsGatewayZoneWithHttpInfo(dfsGatewayZoneId, force);
        return resp.getData();
    }

    /**
     * 
     * delete dfs gateway zone
     * @param dfsGatewayZoneId gateway zone id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;DfsGatewayZoneResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayZoneResp> deleteDfsGatewayZoneWithHttpInfo(Long dfsGatewayZoneId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsGatewayZoneValidateBeforeCall(dfsGatewayZoneId, force, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayZoneResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs gateway zone
     * @param dfsGatewayZoneId gateway zone id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsGatewayZoneAsync(Long dfsGatewayZoneId, Boolean force, final ApiCallback<DfsGatewayZoneResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsGatewayZoneValidateBeforeCall(dfsGatewayZoneId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayZoneResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsGatewayZone
     * @param dfsGatewayZoneId gateway zone id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsGatewayZoneCall(Long dfsGatewayZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-zones/{dfs_gateway_zone_id}"
            .replaceAll("\\{" + "dfs_gateway_zone_id" + "\\}", apiClient.escapeString(dfsGatewayZoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsGatewayZoneValidateBeforeCall(Long dfsGatewayZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsGatewayZoneId' is set
        if (dfsGatewayZoneId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayZoneId' when calling getDfsGatewayZone(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsGatewayZoneCall(dfsGatewayZoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs gateway zone
     * @param dfsGatewayZoneId gateway zone id (required)
     * @return DfsGatewayZoneResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayZoneResp getDfsGatewayZone(Long dfsGatewayZoneId) throws ApiException {
        ApiResponse<DfsGatewayZoneResp> resp = getDfsGatewayZoneWithHttpInfo(dfsGatewayZoneId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs gateway zone
     * @param dfsGatewayZoneId gateway zone id (required)
     * @return ApiResponse&lt;DfsGatewayZoneResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayZoneResp> getDfsGatewayZoneWithHttpInfo(Long dfsGatewayZoneId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsGatewayZoneValidateBeforeCall(dfsGatewayZoneId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayZoneResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs gateway zone
     * @param dfsGatewayZoneId gateway zone id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsGatewayZoneAsync(Long dfsGatewayZoneId, final ApiCallback<DfsGatewayZoneResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsGatewayZoneValidateBeforeCall(dfsGatewayZoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayZoneResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsGatewayZoneSamples
     * @param dfsGatewayZoneId dfs gateway zone id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsGatewayZoneSamplesCall(Long dfsGatewayZoneId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-zones/{dfs_gateway_zone_id}/samples"
            .replaceAll("\\{" + "dfs_gateway_zone_id" + "\\}", apiClient.escapeString(dfsGatewayZoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsGatewayZoneSamplesValidateBeforeCall(Long dfsGatewayZoneId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsGatewayZoneId' is set
        if (dfsGatewayZoneId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayZoneId' when calling getDfsGatewayZoneSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsGatewayZoneSamplesCall(dfsGatewayZoneId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a dfs gateway zone&#x27;s samples
     * @param dfsGatewayZoneId dfs gateway zone id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return DfsGatewayZoneSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayZoneSamplesResp getDfsGatewayZoneSamples(Long dfsGatewayZoneId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<DfsGatewayZoneSamplesResp> resp = getDfsGatewayZoneSamplesWithHttpInfo(dfsGatewayZoneId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get a dfs gateway zone&#x27;s samples
     * @param dfsGatewayZoneId dfs gateway zone id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;DfsGatewayZoneSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayZoneSamplesResp> getDfsGatewayZoneSamplesWithHttpInfo(Long dfsGatewayZoneId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getDfsGatewayZoneSamplesValidateBeforeCall(dfsGatewayZoneId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayZoneSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a dfs gateway zone&#x27;s samples
     * @param dfsGatewayZoneId dfs gateway zone id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsGatewayZoneSamplesAsync(Long dfsGatewayZoneId, String durationBegin, String durationEnd, String period, final ApiCallback<DfsGatewayZoneSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsGatewayZoneSamplesValidateBeforeCall(dfsGatewayZoneId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayZoneSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsGatewayZones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsGatewayZonesCall(Long limit, Long offset, String q, String sort, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-zones/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsGatewayZonesValidateBeforeCall(Long limit, Long offset, String q, String sort, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsGatewayZonesCall(limit, offset, q, sort, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs gateway zones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @return DfsGatewayZonesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayZonesResp listDfsGatewayZones(Long limit, Long offset, String q, String sort, String clusterId) throws ApiException {
        ApiResponse<DfsGatewayZonesResp> resp = listDfsGatewayZonesWithHttpInfo(limit, offset, q, sort, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List dfs gateway zones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;DfsGatewayZonesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayZonesResp> listDfsGatewayZonesWithHttpInfo(Long limit, Long offset, String q, String sort, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listDfsGatewayZonesValidateBeforeCall(limit, offset, q, sort, clusterId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayZonesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs gateway zones
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsGatewayZonesAsync(Long limit, Long offset, String q, String sort, String clusterId, final ApiCallback<DfsGatewayZonesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsGatewayZonesValidateBeforeCall(limit, offset, q, sort, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayZonesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsGatewayZone
     * @param body gateway zone info (required)
     * @param dfsGatewayZoneId gateway zone id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsGatewayZoneCall(DfsGatewayZoneUpdateReq body, Long dfsGatewayZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-gateway-zones/{dfs_gateway_zone_id}"
            .replaceAll("\\{" + "dfs_gateway_zone_id" + "\\}", apiClient.escapeString(dfsGatewayZoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsGatewayZoneValidateBeforeCall(DfsGatewayZoneUpdateReq body, Long dfsGatewayZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsGatewayZone(Async)");
        }
        // verify the required parameter 'dfsGatewayZoneId' is set
        if (dfsGatewayZoneId == null) {
            throw new ApiException("Missing the required parameter 'dfsGatewayZoneId' when calling updateDfsGatewayZone(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsGatewayZoneCall(body, dfsGatewayZoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs gateway zone
     * @param body gateway zone info (required)
     * @param dfsGatewayZoneId gateway zone id (required)
     * @return DfsGatewayZoneResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsGatewayZoneResp updateDfsGatewayZone(DfsGatewayZoneUpdateReq body, Long dfsGatewayZoneId) throws ApiException {
        ApiResponse<DfsGatewayZoneResp> resp = updateDfsGatewayZoneWithHttpInfo(body, dfsGatewayZoneId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs gateway zone
     * @param body gateway zone info (required)
     * @param dfsGatewayZoneId gateway zone id (required)
     * @return ApiResponse&lt;DfsGatewayZoneResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsGatewayZoneResp> updateDfsGatewayZoneWithHttpInfo(DfsGatewayZoneUpdateReq body, Long dfsGatewayZoneId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsGatewayZoneValidateBeforeCall(body, dfsGatewayZoneId, null, null);
        Type localVarReturnType = new TypeToken<DfsGatewayZoneResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs gateway zone
     * @param body gateway zone info (required)
     * @param dfsGatewayZoneId gateway zone id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsGatewayZoneAsync(DfsGatewayZoneUpdateReq body, Long dfsGatewayZoneId, final ApiCallback<DfsGatewayZoneResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsGatewayZoneValidateBeforeCall(body, dfsGatewayZoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsGatewayZoneResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
