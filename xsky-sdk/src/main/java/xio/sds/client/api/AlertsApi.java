/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.AlertActionReq;
import xio.sds.client.model.AlertResp;
import xio.sds.client.model.AlertStatsResp;
import xio.sds.client.model.AlertsActionReq;
import xio.sds.client.model.AlertsResolveReq;
import xio.sds.client.model.AlertsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertsApi {
    private ApiClient apiClient;

    public AlertsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for countAlerts
     * @param acked acked of alert (optional)
     * @param resolved resolved or not of alert (optional)
     * @param resourceType resource type of alert (optional)
     * @param resourceId resource id of alert (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call countAlertsCall(Boolean acked, Boolean resolved, String resourceType, Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alerts/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acked", acked));
        if (resolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolved", resolved));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (resourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_id", resourceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call countAlertsValidateBeforeCall(Boolean acked, Boolean resolved, String resourceType, Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = countAlertsCall(acked, resolved, resourceType, resourceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * count all alert
     * @param acked acked of alert (optional)
     * @param resolved resolved or not of alert (optional)
     * @param resourceType resource type of alert (optional)
     * @param resourceId resource id of alert (optional)
     * @return AlertStatsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertStatsResp countAlerts(Boolean acked, Boolean resolved, String resourceType, Long resourceId) throws ApiException {
        ApiResponse<AlertStatsResp> resp = countAlertsWithHttpInfo(acked, resolved, resourceType, resourceId);
        return resp.getData();
    }

    /**
     * 
     * count all alert
     * @param acked acked of alert (optional)
     * @param resolved resolved or not of alert (optional)
     * @param resourceType resource type of alert (optional)
     * @param resourceId resource id of alert (optional)
     * @return ApiResponse&lt;AlertStatsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertStatsResp> countAlertsWithHttpInfo(Boolean acked, Boolean resolved, String resourceType, Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = countAlertsValidateBeforeCall(acked, resolved, resourceType, resourceId, null, null);
        Type localVarReturnType = new TypeToken<AlertStatsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * count all alert
     * @param acked acked of alert (optional)
     * @param resolved resolved or not of alert (optional)
     * @param resourceType resource type of alert (optional)
     * @param resourceId resource id of alert (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call countAlertsAsync(Boolean acked, Boolean resolved, String resourceType, Long resourceId, final ApiCallback<AlertStatsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = countAlertsValidateBeforeCall(acked, resolved, resourceType, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertStatsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAlert
     * @param alertId alert id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAlertCall(Long alertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alerts/{alert_id}"
            .replaceAll("\\{" + "alert_id" + "\\}", apiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAlertValidateBeforeCall(Long alertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling deleteAlert(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAlertCall(alertId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete alert
     * @param alertId alert id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAlert(Long alertId) throws ApiException {
        deleteAlertWithHttpInfo(alertId);
    }

    /**
     * 
     * Delete alert
     * @param alertId alert id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAlertWithHttpInfo(Long alertId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAlertValidateBeforeCall(alertId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete alert
     * @param alertId alert id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAlertAsync(Long alertId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAlertValidateBeforeCall(alertId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAlerts
     * @param before create time of last alert (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAlertsCall(String before, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alerts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAlertsValidateBeforeCall(String before, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = deleteAlertsCall(before, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete alerts
     * @param before create time of last alert (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAlerts(String before) throws ApiException {
        deleteAlertsWithHttpInfo(before);
    }

    /**
     * 
     * delete alerts
     * @param before create time of last alert (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAlertsWithHttpInfo(String before) throws ApiException {
        com.squareup.okhttp.Call call = deleteAlertsValidateBeforeCall(before, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * delete alerts
     * @param before create time of last alert (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAlertsAsync(String before, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAlertsValidateBeforeCall(before, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for doAlert
     * @param body the alert action info (required)
     * @param alertId the id of alert (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call doAlertCall(AlertActionReq body, Long alertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/alerts/{alert_id}"
            .replaceAll("\\{" + "alert_id" + "\\}", apiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call doAlertValidateBeforeCall(AlertActionReq body, Long alertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling doAlert(Async)");
        }
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling doAlert(Async)");
        }
        
        com.squareup.okhttp.Call call = doAlertCall(body, alertId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set the ack status of alert
     * @param body the alert action info (required)
     * @param alertId the id of alert (required)
     * @return AlertResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertResp doAlert(AlertActionReq body, Long alertId) throws ApiException {
        ApiResponse<AlertResp> resp = doAlertWithHttpInfo(body, alertId);
        return resp.getData();
    }

    /**
     * 
     * set the ack status of alert
     * @param body the alert action info (required)
     * @param alertId the id of alert (required)
     * @return ApiResponse&lt;AlertResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertResp> doAlertWithHttpInfo(AlertActionReq body, Long alertId) throws ApiException {
        com.squareup.okhttp.Call call = doAlertValidateBeforeCall(body, alertId, null, null);
        Type localVarReturnType = new TypeToken<AlertResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * set the ack status of alert
     * @param body the alert action info (required)
     * @param alertId the id of alert (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call doAlertAsync(AlertActionReq body, Long alertId, final ApiCallback<AlertResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = doAlertValidateBeforeCall(body, alertId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for doAlerts
     * @param body the alerts action info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call doAlertsCall(AlertsActionReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/alerts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call doAlertsValidateBeforeCall(AlertsActionReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling doAlerts(Async)");
        }
        
        com.squareup.okhttp.Call call = doAlertsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set the ack status of alerts
     * @param body the alerts action info (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void doAlerts(AlertsActionReq body) throws ApiException {
        doAlertsWithHttpInfo(body);
    }

    /**
     * 
     * set the ack status of alerts
     * @param body the alerts action info (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> doAlertsWithHttpInfo(AlertsActionReq body) throws ApiException {
        com.squareup.okhttp.Call call = doAlertsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * set the ack status of alerts
     * @param body the alerts action info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call doAlertsAsync(AlertsActionReq body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = doAlertsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAlert
     * @param alertId alert id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlertCall(Long alertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alerts/{alert_id}"
            .replaceAll("\\{" + "alert_id" + "\\}", apiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlertValidateBeforeCall(Long alertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling getAlert(Async)");
        }
        
        com.squareup.okhttp.Call call = getAlertCall(alertId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a alert
     * @param alertId alert id (required)
     * @return AlertResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertResp getAlert(Long alertId) throws ApiException {
        ApiResponse<AlertResp> resp = getAlertWithHttpInfo(alertId);
        return resp.getData();
    }

    /**
     * 
     * get a alert
     * @param alertId alert id (required)
     * @return ApiResponse&lt;AlertResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertResp> getAlertWithHttpInfo(Long alertId) throws ApiException {
        com.squareup.okhttp.Call call = getAlertValidateBeforeCall(alertId, null, null);
        Type localVarReturnType = new TypeToken<AlertResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a alert
     * @param alertId alert id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlertAsync(Long alertId, final ApiCallback<AlertResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlertValidateBeforeCall(alertId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAlerts
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param resourceType resource type of alert (optional)
     * @param resourceId resource id of alert (optional)
     * @param alertType type of alert (optional)
     * @param acked acked of alert (optional)
     * @param resolved resolved or not of alert (optional)
     * @param resolveType resolve type of alert (optional)
     * @param level level of alert (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param durationLimit duration limit param (optional)
     * @param durationOffset duration offset param (optional)
     * @param q query param of search (optional)
     * @param relatedResource related resource info of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAlertsCall(Long limit, Long offset, String resourceType, Long resourceId, String alertType, Boolean acked, Boolean resolved, String resolveType, String level, String durationBegin, String durationEnd, Long durationLimit, Long durationOffset, String q, String relatedResource, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alerts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (resourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_id", resourceId));
        if (alertType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alert_type", alertType));
        if (acked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acked", acked));
        if (resolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolved", resolved));
        if (resolveType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_type", resolveType));
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (durationLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_limit", durationLimit));
        if (durationOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_offset", durationOffset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (relatedResource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("related_resource", relatedResource));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAlertsValidateBeforeCall(Long limit, Long offset, String resourceType, Long resourceId, String alertType, Boolean acked, Boolean resolved, String resolveType, String level, String durationBegin, String durationEnd, Long durationLimit, Long durationOffset, String q, String relatedResource, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listAlertsCall(limit, offset, resourceType, resourceId, alertType, acked, resolved, resolveType, level, durationBegin, durationEnd, durationLimit, durationOffset, q, relatedResource, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List all alerts
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param resourceType resource type of alert (optional)
     * @param resourceId resource id of alert (optional)
     * @param alertType type of alert (optional)
     * @param acked acked of alert (optional)
     * @param resolved resolved or not of alert (optional)
     * @param resolveType resolve type of alert (optional)
     * @param level level of alert (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param durationLimit duration limit param (optional)
     * @param durationOffset duration offset param (optional)
     * @param q query param of search (optional)
     * @param relatedResource related resource info of search (optional)
     * @param sort sort param of search (optional)
     * @return AlertsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertsResp listAlerts(Long limit, Long offset, String resourceType, Long resourceId, String alertType, Boolean acked, Boolean resolved, String resolveType, String level, String durationBegin, String durationEnd, Long durationLimit, Long durationOffset, String q, String relatedResource, String sort) throws ApiException {
        ApiResponse<AlertsResp> resp = listAlertsWithHttpInfo(limit, offset, resourceType, resourceId, alertType, acked, resolved, resolveType, level, durationBegin, durationEnd, durationLimit, durationOffset, q, relatedResource, sort);
        return resp.getData();
    }

    /**
     * 
     * List all alerts
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param resourceType resource type of alert (optional)
     * @param resourceId resource id of alert (optional)
     * @param alertType type of alert (optional)
     * @param acked acked of alert (optional)
     * @param resolved resolved or not of alert (optional)
     * @param resolveType resolve type of alert (optional)
     * @param level level of alert (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param durationLimit duration limit param (optional)
     * @param durationOffset duration offset param (optional)
     * @param q query param of search (optional)
     * @param relatedResource related resource info of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;AlertsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertsResp> listAlertsWithHttpInfo(Long limit, Long offset, String resourceType, Long resourceId, String alertType, Boolean acked, Boolean resolved, String resolveType, String level, String durationBegin, String durationEnd, Long durationLimit, Long durationOffset, String q, String relatedResource, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listAlertsValidateBeforeCall(limit, offset, resourceType, resourceId, alertType, acked, resolved, resolveType, level, durationBegin, durationEnd, durationLimit, durationOffset, q, relatedResource, sort, null, null);
        Type localVarReturnType = new TypeToken<AlertsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alerts
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param resourceType resource type of alert (optional)
     * @param resourceId resource id of alert (optional)
     * @param alertType type of alert (optional)
     * @param acked acked of alert (optional)
     * @param resolved resolved or not of alert (optional)
     * @param resolveType resolve type of alert (optional)
     * @param level level of alert (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param durationLimit duration limit param (optional)
     * @param durationOffset duration offset param (optional)
     * @param q query param of search (optional)
     * @param relatedResource related resource info of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAlertsAsync(Long limit, Long offset, String resourceType, Long resourceId, String alertType, Boolean acked, Boolean resolved, String resolveType, String level, String durationBegin, String durationEnd, Long durationLimit, Long durationOffset, String q, String relatedResource, String sort, final ApiCallback<AlertsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAlertsValidateBeforeCall(limit, offset, resourceType, resourceId, alertType, acked, resolved, resolveType, level, durationBegin, durationEnd, durationLimit, durationOffset, q, relatedResource, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resolveAlert
     * @param alertId the id of alert (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resolveAlertCall(Long alertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alerts/{alert_id}:resolve"
            .replaceAll("\\{" + "alert_id" + "\\}", apiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resolveAlertValidateBeforeCall(Long alertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling resolveAlert(Async)");
        }
        
        com.squareup.okhttp.Call call = resolveAlertCall(alertId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set the resolved status of alert
     * @param alertId the id of alert (required)
     * @return AlertResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertResp resolveAlert(Long alertId) throws ApiException {
        ApiResponse<AlertResp> resp = resolveAlertWithHttpInfo(alertId);
        return resp.getData();
    }

    /**
     * 
     * set the resolved status of alert
     * @param alertId the id of alert (required)
     * @return ApiResponse&lt;AlertResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertResp> resolveAlertWithHttpInfo(Long alertId) throws ApiException {
        com.squareup.okhttp.Call call = resolveAlertValidateBeforeCall(alertId, null, null);
        Type localVarReturnType = new TypeToken<AlertResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * set the resolved status of alert
     * @param alertId the id of alert (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resolveAlertAsync(Long alertId, final ApiCallback<AlertResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resolveAlertValidateBeforeCall(alertId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resolveAlerts
     * @param body the alerts resolve info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resolveAlertsCall(AlertsResolveReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/alerts/:resolve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resolveAlertsValidateBeforeCall(AlertsResolveReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling resolveAlerts(Async)");
        }
        
        com.squareup.okhttp.Call call = resolveAlertsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * resolve alerts of specific group or resource type
     * @param body the alerts resolve info (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resolveAlerts(AlertsResolveReq body) throws ApiException {
        resolveAlertsWithHttpInfo(body);
    }

    /**
     * 
     * resolve alerts of specific group or resource type
     * @param body the alerts resolve info (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resolveAlertsWithHttpInfo(AlertsResolveReq body) throws ApiException {
        com.squareup.okhttp.Call call = resolveAlertsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * resolve alerts of specific group or resource type
     * @param body the alerts resolve info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resolveAlertsAsync(AlertsResolveReq body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resolveAlertsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
