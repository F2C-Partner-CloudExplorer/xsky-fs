/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsRootfsCreateReq;
import xio.sds.client.model.DfsRootfsResp;
import xio.sds.client.model.DfsRootfsSamplesResp;
import xio.sds.client.model.DfsRootfsSetGCSpeedReq;
import xio.sds.client.model.DfsRootfsSetWormLogPathReq;
import xio.sds.client.model.DfsRootfsUpdateActivePoolReq;
import xio.sds.client.model.DfsRootfsesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsRootfsesApi {
    private ApiClient apiClient;

    public DfsRootfsesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsRootfsesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDfsRootfs
     * @param body rootfs info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsRootfsCall(DfsRootfsCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-rootfses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsRootfsValidateBeforeCall(DfsRootfsCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsRootfs(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsRootfsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dfs rootfs
     * @param body rootfs info (required)
     * @return DfsRootfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsRootfsResp createDfsRootfs(DfsRootfsCreateReq body) throws ApiException {
        ApiResponse<DfsRootfsResp> resp = createDfsRootfsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Create dfs rootfs
     * @param body rootfs info (required)
     * @return ApiResponse&lt;DfsRootfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsRootfsResp> createDfsRootfsWithHttpInfo(DfsRootfsCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createDfsRootfsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dfs rootfs
     * @param body rootfs info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsRootfsAsync(DfsRootfsCreateReq body, final ApiCallback<DfsRootfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsRootfsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsRootfs
     * @param dfsRootfsId rootfs id (required)
     * @param force force delete (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsRootfsCall(Long dfsRootfsId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-rootfses/{dfs_rootfs_id}"
            .replaceAll("\\{" + "dfs_rootfs_id" + "\\}", apiClient.escapeString(dfsRootfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsRootfsValidateBeforeCall(Long dfsRootfsId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsRootfsId' is set
        if (dfsRootfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsRootfsId' when calling deleteDfsRootfs(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsRootfsCall(dfsRootfsId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs rootfs
     * @param dfsRootfsId rootfs id (required)
     * @param force force delete (optional)
     * @return DfsRootfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsRootfsResp deleteDfsRootfs(Long dfsRootfsId, Boolean force) throws ApiException {
        ApiResponse<DfsRootfsResp> resp = deleteDfsRootfsWithHttpInfo(dfsRootfsId, force);
        return resp.getData();
    }

    /**
     * 
     * delete dfs rootfs
     * @param dfsRootfsId rootfs id (required)
     * @param force force delete (optional)
     * @return ApiResponse&lt;DfsRootfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsRootfsResp> deleteDfsRootfsWithHttpInfo(Long dfsRootfsId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsRootfsValidateBeforeCall(dfsRootfsId, force, null, null);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs rootfs
     * @param dfsRootfsId rootfs id (required)
     * @param force force delete (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsRootfsAsync(Long dfsRootfsId, Boolean force, final ApiCallback<DfsRootfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsRootfsValidateBeforeCall(dfsRootfsId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsRootfs
     * @param dfsRootfsId rootfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsRootfsCall(Long dfsRootfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-rootfses/{dfs_rootfs_id}"
            .replaceAll("\\{" + "dfs_rootfs_id" + "\\}", apiClient.escapeString(dfsRootfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsRootfsValidateBeforeCall(Long dfsRootfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsRootfsId' is set
        if (dfsRootfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsRootfsId' when calling getDfsRootfs(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsRootfsCall(dfsRootfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs rootfs
     * @param dfsRootfsId rootfs id (required)
     * @return DfsRootfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsRootfsResp getDfsRootfs(Long dfsRootfsId) throws ApiException {
        ApiResponse<DfsRootfsResp> resp = getDfsRootfsWithHttpInfo(dfsRootfsId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs rootfs
     * @param dfsRootfsId rootfs id (required)
     * @return ApiResponse&lt;DfsRootfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsRootfsResp> getDfsRootfsWithHttpInfo(Long dfsRootfsId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsRootfsValidateBeforeCall(dfsRootfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs rootfs
     * @param dfsRootfsId rootfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsRootfsAsync(Long dfsRootfsId, final ApiCallback<DfsRootfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsRootfsValidateBeforeCall(dfsRootfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsRootfsSamples
     * @param dfsRootfsId dfs rootfs id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsRootfsSamplesCall(Long dfsRootfsId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-rootfses/{dfs_rootfs_id}/samples"
            .replaceAll("\\{" + "dfs_rootfs_id" + "\\}", apiClient.escapeString(dfsRootfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsRootfsSamplesValidateBeforeCall(Long dfsRootfsId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsRootfsId' is set
        if (dfsRootfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsRootfsId' when calling getDfsRootfsSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsRootfsSamplesCall(dfsRootfsId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a dfs rootfs&#x27;s samples
     * @param dfsRootfsId dfs rootfs id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return DfsRootfsSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsRootfsSamplesResp getDfsRootfsSamples(Long dfsRootfsId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<DfsRootfsSamplesResp> resp = getDfsRootfsSamplesWithHttpInfo(dfsRootfsId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get a dfs rootfs&#x27;s samples
     * @param dfsRootfsId dfs rootfs id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;DfsRootfsSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsRootfsSamplesResp> getDfsRootfsSamplesWithHttpInfo(Long dfsRootfsId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getDfsRootfsSamplesValidateBeforeCall(dfsRootfsId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<DfsRootfsSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a dfs rootfs&#x27;s samples
     * @param dfsRootfsId dfs rootfs id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsRootfsSamplesAsync(Long dfsRootfsId, String durationBegin, String durationEnd, String period, final ApiCallback<DfsRootfsSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsRootfsSamplesValidateBeforeCall(dfsRootfsId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsRootfsSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsRootfses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param poolId pool id (optional)
     * @param fsUserId fs user id (optional)
     * @param fsUserGroupId fs user group id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsRootfsesCall(Long limit, Long offset, String q, String sort, String clusterId, Long poolId, Long fsUserId, Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-rootfses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (poolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pool_id", poolId));
        if (fsUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fs_user_id", fsUserId));
        if (fsUserGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fs_user_group_id", fsUserGroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsRootfsesValidateBeforeCall(Long limit, Long offset, String q, String sort, String clusterId, Long poolId, Long fsUserId, Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsRootfsesCall(limit, offset, q, sort, clusterId, poolId, fsUserId, fsUserGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs rootfses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param poolId pool id (optional)
     * @param fsUserId fs user id (optional)
     * @param fsUserGroupId fs user group id (optional)
     * @return DfsRootfsesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsRootfsesResp listDfsRootfses(Long limit, Long offset, String q, String sort, String clusterId, Long poolId, Long fsUserId, Long fsUserGroupId) throws ApiException {
        ApiResponse<DfsRootfsesResp> resp = listDfsRootfsesWithHttpInfo(limit, offset, q, sort, clusterId, poolId, fsUserId, fsUserGroupId);
        return resp.getData();
    }

    /**
     * 
     * List dfs rootfses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param poolId pool id (optional)
     * @param fsUserId fs user id (optional)
     * @param fsUserGroupId fs user group id (optional)
     * @return ApiResponse&lt;DfsRootfsesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsRootfsesResp> listDfsRootfsesWithHttpInfo(Long limit, Long offset, String q, String sort, String clusterId, Long poolId, Long fsUserId, Long fsUserGroupId) throws ApiException {
        com.squareup.okhttp.Call call = listDfsRootfsesValidateBeforeCall(limit, offset, q, sort, clusterId, poolId, fsUserId, fsUserGroupId, null, null);
        Type localVarReturnType = new TypeToken<DfsRootfsesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs rootfses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param poolId pool id (optional)
     * @param fsUserId fs user id (optional)
     * @param fsUserGroupId fs user group id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsRootfsesAsync(Long limit, Long offset, String q, String sort, String clusterId, Long poolId, Long fsUserId, Long fsUserGroupId, final ApiCallback<DfsRootfsesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsRootfsesValidateBeforeCall(limit, offset, q, sort, clusterId, poolId, fsUserId, fsUserGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsRootfsesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setDfsWormLogPath
     * @param body worm log path (required)
     * @param dfsRootfsId rootfs id (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setDfsWormLogPathCall(DfsRootfsSetWormLogPathReq body, Long dfsRootfsId, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-rootfses/{dfs_rootfs_id}:set-worm-log-path"
            .replaceAll("\\{" + "dfs_rootfs_id" + "\\}", apiClient.escapeString(dfsRootfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setDfsWormLogPathValidateBeforeCall(DfsRootfsSetWormLogPathReq body, Long dfsRootfsId, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setDfsWormLogPath(Async)");
        }
        // verify the required parameter 'dfsRootfsId' is set
        if (dfsRootfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsRootfsId' when calling setDfsWormLogPath(Async)");
        }
        
        com.squareup.okhttp.Call call = setDfsWormLogPathCall(body, dfsRootfsId, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set dfs worm log path
     * @param body worm log path (required)
     * @param dfsRootfsId rootfs id (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return DfsRootfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsRootfsResp setDfsWormLogPath(DfsRootfsSetWormLogPathReq body, Long dfsRootfsId, Boolean allowPathCreate) throws ApiException {
        ApiResponse<DfsRootfsResp> resp = setDfsWormLogPathWithHttpInfo(body, dfsRootfsId, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * Set dfs worm log path
     * @param body worm log path (required)
     * @param dfsRootfsId rootfs id (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return ApiResponse&lt;DfsRootfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsRootfsResp> setDfsWormLogPathWithHttpInfo(DfsRootfsSetWormLogPathReq body, Long dfsRootfsId, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = setDfsWormLogPathValidateBeforeCall(body, dfsRootfsId, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set dfs worm log path
     * @param body worm log path (required)
     * @param dfsRootfsId rootfs id (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDfsWormLogPathAsync(DfsRootfsSetWormLogPathReq body, Long dfsRootfsId, Boolean allowPathCreate, final ApiCallback<DfsRootfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDfsWormLogPathValidateBeforeCall(body, dfsRootfsId, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setGCSpeed
     * @param body gc speed (required)
     * @param dfsRootfsId rootfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setGCSpeedCall(DfsRootfsSetGCSpeedReq body, Long dfsRootfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-rootfses/{dfs_rootfs_id}:set-gc-speed"
            .replaceAll("\\{" + "dfs_rootfs_id" + "\\}", apiClient.escapeString(dfsRootfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setGCSpeedValidateBeforeCall(DfsRootfsSetGCSpeedReq body, Long dfsRootfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setGCSpeed(Async)");
        }
        // verify the required parameter 'dfsRootfsId' is set
        if (dfsRootfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsRootfsId' when calling setGCSpeed(Async)");
        }
        
        com.squareup.okhttp.Call call = setGCSpeedCall(body, dfsRootfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set gc speed of dfs rootfs
     * @param body gc speed (required)
     * @param dfsRootfsId rootfs id (required)
     * @return DfsRootfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsRootfsResp setGCSpeed(DfsRootfsSetGCSpeedReq body, Long dfsRootfsId) throws ApiException {
        ApiResponse<DfsRootfsResp> resp = setGCSpeedWithHttpInfo(body, dfsRootfsId);
        return resp.getData();
    }

    /**
     * 
     * Set gc speed of dfs rootfs
     * @param body gc speed (required)
     * @param dfsRootfsId rootfs id (required)
     * @return ApiResponse&lt;DfsRootfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsRootfsResp> setGCSpeedWithHttpInfo(DfsRootfsSetGCSpeedReq body, Long dfsRootfsId) throws ApiException {
        com.squareup.okhttp.Call call = setGCSpeedValidateBeforeCall(body, dfsRootfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set gc speed of dfs rootfs
     * @param body gc speed (required)
     * @param dfsRootfsId rootfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setGCSpeedAsync(DfsRootfsSetGCSpeedReq body, Long dfsRootfsId, final ApiCallback<DfsRootfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setGCSpeedValidateBeforeCall(body, dfsRootfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsRootfsActivePool
     * @param body active pool ids (required)
     * @param dfsRootfsId rootfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsRootfsActivePoolCall(DfsRootfsUpdateActivePoolReq body, Long dfsRootfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-rootfses/{dfs_rootfs_id}:update-active-pools"
            .replaceAll("\\{" + "dfs_rootfs_id" + "\\}", apiClient.escapeString(dfsRootfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsRootfsActivePoolValidateBeforeCall(DfsRootfsUpdateActivePoolReq body, Long dfsRootfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsRootfsActivePool(Async)");
        }
        // verify the required parameter 'dfsRootfsId' is set
        if (dfsRootfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsRootfsId' when calling updateDfsRootfsActivePool(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsRootfsActivePoolCall(body, dfsRootfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs rootfs active pools
     * @param body active pool ids (required)
     * @param dfsRootfsId rootfs id (required)
     * @return DfsRootfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsRootfsResp updateDfsRootfsActivePool(DfsRootfsUpdateActivePoolReq body, Long dfsRootfsId) throws ApiException {
        ApiResponse<DfsRootfsResp> resp = updateDfsRootfsActivePoolWithHttpInfo(body, dfsRootfsId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs rootfs active pools
     * @param body active pool ids (required)
     * @param dfsRootfsId rootfs id (required)
     * @return ApiResponse&lt;DfsRootfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsRootfsResp> updateDfsRootfsActivePoolWithHttpInfo(DfsRootfsUpdateActivePoolReq body, Long dfsRootfsId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsRootfsActivePoolValidateBeforeCall(body, dfsRootfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs rootfs active pools
     * @param body active pool ids (required)
     * @param dfsRootfsId rootfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsRootfsActivePoolAsync(DfsRootfsUpdateActivePoolReq body, Long dfsRootfsId, final ApiCallback<DfsRootfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsRootfsActivePoolValidateBeforeCall(body, dfsRootfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsRootfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
