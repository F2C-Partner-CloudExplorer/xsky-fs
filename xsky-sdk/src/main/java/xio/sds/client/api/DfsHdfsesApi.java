/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsHdfsAddACLsReq;
import xio.sds.client.model.DfsHdfsAddIPWhiteListReq;
import xio.sds.client.model.DfsHdfsAddProxyUsersReq;
import xio.sds.client.model.DfsHdfsCreateReq;
import xio.sds.client.model.DfsHdfsRemoveACLsReq;
import xio.sds.client.model.DfsHdfsRemoveIPWhiteListReq;
import xio.sds.client.model.DfsHdfsRemoveProxyUsersReq;
import xio.sds.client.model.DfsHdfsResp;
import xio.sds.client.model.DfsHdfsUpdateACLsReq;
import xio.sds.client.model.DfsHdfsUpdateIPWhiteListsReq;
import xio.sds.client.model.DfsHdfsUpdateProxyUsersReq;
import xio.sds.client.model.DfsHdfsUpdateReq;
import xio.sds.client.model.DfsHdfsesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsHdfsesApi {
    private ApiClient apiClient;

    public DfsHdfsesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsHdfsesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDfsHdfsACLs
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDfsHdfsACLsCall(DfsHdfsAddACLsReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}:add-acls"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDfsHdfsACLsValidateBeforeCall(DfsHdfsAddACLsReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addDfsHdfsACLs(Async)");
        }
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling addDfsHdfsACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = addDfsHdfsACLsCall(body, dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add dfs hdfs acls
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp addDfsHdfsACLs(DfsHdfsAddACLsReq body, Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = addDfsHdfsACLsWithHttpInfo(body, dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * add dfs hdfs acls
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> addDfsHdfsACLsWithHttpInfo(DfsHdfsAddACLsReq body, Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = addDfsHdfsACLsValidateBeforeCall(body, dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add dfs hdfs acls
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDfsHdfsACLsAsync(DfsHdfsAddACLsReq body, Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDfsHdfsACLsValidateBeforeCall(body, dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addDfsHdfsIPWhiteLists
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDfsHdfsIPWhiteListsCall(DfsHdfsAddIPWhiteListReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}:add-ip-white-lists"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDfsHdfsIPWhiteListsValidateBeforeCall(DfsHdfsAddIPWhiteListReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addDfsHdfsIPWhiteLists(Async)");
        }
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling addDfsHdfsIPWhiteLists(Async)");
        }
        
        com.squareup.okhttp.Call call = addDfsHdfsIPWhiteListsCall(body, dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add dfs hdfs ip white list
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp addDfsHdfsIPWhiteLists(DfsHdfsAddIPWhiteListReq body, Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = addDfsHdfsIPWhiteListsWithHttpInfo(body, dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * add dfs hdfs ip white list
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> addDfsHdfsIPWhiteListsWithHttpInfo(DfsHdfsAddIPWhiteListReq body, Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = addDfsHdfsIPWhiteListsValidateBeforeCall(body, dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add dfs hdfs ip white list
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDfsHdfsIPWhiteListsAsync(DfsHdfsAddIPWhiteListReq body, Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDfsHdfsIPWhiteListsValidateBeforeCall(body, dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addDfsHdfsProxyUsers
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDfsHdfsProxyUsersCall(DfsHdfsAddProxyUsersReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}:add-proxy-users"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDfsHdfsProxyUsersValidateBeforeCall(DfsHdfsAddProxyUsersReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addDfsHdfsProxyUsers(Async)");
        }
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling addDfsHdfsProxyUsers(Async)");
        }
        
        com.squareup.okhttp.Call call = addDfsHdfsProxyUsersCall(body, dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add dfs hdfs proxy users
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp addDfsHdfsProxyUsers(DfsHdfsAddProxyUsersReq body, Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = addDfsHdfsProxyUsersWithHttpInfo(body, dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * add dfs hdfs proxy users
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> addDfsHdfsProxyUsersWithHttpInfo(DfsHdfsAddProxyUsersReq body, Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = addDfsHdfsProxyUsersValidateBeforeCall(body, dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add dfs hdfs proxy users
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDfsHdfsProxyUsersAsync(DfsHdfsAddProxyUsersReq body, Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDfsHdfsProxyUsersValidateBeforeCall(body, dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDfsHdfs
     * @param body hdfs info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsHdfsCall(DfsHdfsCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsHdfsValidateBeforeCall(DfsHdfsCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsHdfs(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsHdfsCall(body, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dfs hdfs
     * @param body hdfs info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp createDfsHdfs(DfsHdfsCreateReq body, Boolean allowPathCreate) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = createDfsHdfsWithHttpInfo(body, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * Create dfs hdfs
     * @param body hdfs info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> createDfsHdfsWithHttpInfo(DfsHdfsCreateReq body, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = createDfsHdfsValidateBeforeCall(body, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dfs hdfs
     * @param body hdfs info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsHdfsAsync(DfsHdfsCreateReq body, Boolean allowPathCreate, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsHdfsValidateBeforeCall(body, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsHdfs
     * @param dfsHdfsId dfs hdfs id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsHdfsCall(Long dfsHdfsId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsHdfsValidateBeforeCall(Long dfsHdfsId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling deleteDfsHdfs(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsHdfsCall(dfsHdfsId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs hdfs
     * @param dfsHdfsId dfs hdfs id (required)
     * @param force force delete or not (optional)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp deleteDfsHdfs(Long dfsHdfsId, Boolean force) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = deleteDfsHdfsWithHttpInfo(dfsHdfsId, force);
        return resp.getData();
    }

    /**
     * 
     * delete dfs hdfs
     * @param dfsHdfsId dfs hdfs id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> deleteDfsHdfsWithHttpInfo(Long dfsHdfsId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsHdfsValidateBeforeCall(dfsHdfsId, force, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs hdfs
     * @param dfsHdfsId dfs hdfs id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsHdfsAsync(Long dfsHdfsId, Boolean force, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsHdfsValidateBeforeCall(dfsHdfsId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsHdfs
     * @param dfsHdfsId dfs hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsHdfsCall(Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsHdfsValidateBeforeCall(Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling getDfsHdfs(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsHdfsCall(dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs hdfs
     * @param dfsHdfsId dfs hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp getDfsHdfs(Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = getDfsHdfsWithHttpInfo(dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs hdfs
     * @param dfsHdfsId dfs hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> getDfsHdfsWithHttpInfo(Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsHdfsValidateBeforeCall(dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs hdfs
     * @param dfsHdfsId dfs hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsHdfsAsync(Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsHdfsValidateBeforeCall(dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsHdfses
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param path related dfs path (optional)
     * @param auth authType for hdfs: simple, kerberos (optional)
     * @param dfsGatewayZoneId dfs gateway zone id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsHdfsesCall(Long limit, Long offset, String clusterId, String path, String auth, Long dfsGatewayZoneId, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (auth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth", auth));
        if (dfsGatewayZoneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_gateway_zone_id", dfsGatewayZoneId));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsHdfsesValidateBeforeCall(Long limit, Long offset, String clusterId, String path, String auth, Long dfsGatewayZoneId, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsHdfsesCall(limit, offset, clusterId, path, auth, dfsGatewayZoneId, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs hdfs
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param path related dfs path (optional)
     * @param auth authType for hdfs: simple, kerberos (optional)
     * @param dfsGatewayZoneId dfs gateway zone id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return DfsHdfsesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsesResp listDfsHdfses(Long limit, Long offset, String clusterId, String path, String auth, Long dfsGatewayZoneId, String q, String sort) throws ApiException {
        ApiResponse<DfsHdfsesResp> resp = listDfsHdfsesWithHttpInfo(limit, offset, clusterId, path, auth, dfsGatewayZoneId, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List dfs hdfs
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param path related dfs path (optional)
     * @param auth authType for hdfs: simple, kerberos (optional)
     * @param dfsGatewayZoneId dfs gateway zone id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;DfsHdfsesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsesResp> listDfsHdfsesWithHttpInfo(Long limit, Long offset, String clusterId, String path, String auth, Long dfsGatewayZoneId, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listDfsHdfsesValidateBeforeCall(limit, offset, clusterId, path, auth, dfsGatewayZoneId, q, sort, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs hdfs
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param path related dfs path (optional)
     * @param auth authType for hdfs: simple, kerberos (optional)
     * @param dfsGatewayZoneId dfs gateway zone id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsHdfsesAsync(Long limit, Long offset, String clusterId, String path, String auth, Long dfsGatewayZoneId, String q, String sort, final ApiCallback<DfsHdfsesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsHdfsesValidateBeforeCall(limit, offset, clusterId, path, auth, dfsGatewayZoneId, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeDfsHdfsACLs
     * @param body hdfs acls info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeDfsHdfsACLsCall(DfsHdfsRemoveACLsReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}:remove-acls"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeDfsHdfsACLsValidateBeforeCall(DfsHdfsRemoveACLsReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeDfsHdfsACLs(Async)");
        }
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling removeDfsHdfsACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = removeDfsHdfsACLsCall(body, dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove dfs hdfs acls
     * @param body hdfs acls info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp removeDfsHdfsACLs(DfsHdfsRemoveACLsReq body, Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = removeDfsHdfsACLsWithHttpInfo(body, dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * remove dfs hdfs acls
     * @param body hdfs acls info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> removeDfsHdfsACLsWithHttpInfo(DfsHdfsRemoveACLsReq body, Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = removeDfsHdfsACLsValidateBeforeCall(body, dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove dfs hdfs acls
     * @param body hdfs acls info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDfsHdfsACLsAsync(DfsHdfsRemoveACLsReq body, Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDfsHdfsACLsValidateBeforeCall(body, dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeDfsHdfsIPWhiteLists
     * @param body hdfs ip white list info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeDfsHdfsIPWhiteListsCall(DfsHdfsRemoveIPWhiteListReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}:remove-ip-white-lists"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeDfsHdfsIPWhiteListsValidateBeforeCall(DfsHdfsRemoveIPWhiteListReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeDfsHdfsIPWhiteLists(Async)");
        }
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling removeDfsHdfsIPWhiteLists(Async)");
        }
        
        com.squareup.okhttp.Call call = removeDfsHdfsIPWhiteListsCall(body, dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove dfs hdfs ip white lists
     * @param body hdfs ip white list info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp removeDfsHdfsIPWhiteLists(DfsHdfsRemoveIPWhiteListReq body, Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = removeDfsHdfsIPWhiteListsWithHttpInfo(body, dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * remove dfs hdfs ip white lists
     * @param body hdfs ip white list info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> removeDfsHdfsIPWhiteListsWithHttpInfo(DfsHdfsRemoveIPWhiteListReq body, Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = removeDfsHdfsIPWhiteListsValidateBeforeCall(body, dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove dfs hdfs ip white lists
     * @param body hdfs ip white list info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDfsHdfsIPWhiteListsAsync(DfsHdfsRemoveIPWhiteListReq body, Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDfsHdfsIPWhiteListsValidateBeforeCall(body, dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeDfsHdfsProxyUsers
     * @param body hdfs proxy users info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeDfsHdfsProxyUsersCall(DfsHdfsRemoveProxyUsersReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}:remove-proxy-users"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeDfsHdfsProxyUsersValidateBeforeCall(DfsHdfsRemoveProxyUsersReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeDfsHdfsProxyUsers(Async)");
        }
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling removeDfsHdfsProxyUsers(Async)");
        }
        
        com.squareup.okhttp.Call call = removeDfsHdfsProxyUsersCall(body, dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove dfs hdfs proxy users
     * @param body hdfs proxy users info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp removeDfsHdfsProxyUsers(DfsHdfsRemoveProxyUsersReq body, Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = removeDfsHdfsProxyUsersWithHttpInfo(body, dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * remove dfs hdfs proxy users
     * @param body hdfs proxy users info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> removeDfsHdfsProxyUsersWithHttpInfo(DfsHdfsRemoveProxyUsersReq body, Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = removeDfsHdfsProxyUsersValidateBeforeCall(body, dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove dfs hdfs proxy users
     * @param body hdfs proxy users info (required)
     * @param dfsHdfsId dfs hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDfsHdfsProxyUsersAsync(DfsHdfsRemoveProxyUsersReq body, Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDfsHdfsProxyUsersValidateBeforeCall(body, dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsHdfs
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsHdfsCall(DfsHdfsUpdateReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsHdfsValidateBeforeCall(DfsHdfsUpdateReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsHdfs(Async)");
        }
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling updateDfsHdfs(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsHdfsCall(body, dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs hdfs
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp updateDfsHdfs(DfsHdfsUpdateReq body, Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = updateDfsHdfsWithHttpInfo(body, dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs hdfs
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> updateDfsHdfsWithHttpInfo(DfsHdfsUpdateReq body, Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsHdfsValidateBeforeCall(body, dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs hdfs
     * @param body dfs hdfs info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsHdfsAsync(DfsHdfsUpdateReq body, Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsHdfsValidateBeforeCall(body, dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsHdfsACLs
     * @param body hdfs acls info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsHdfsACLsCall(DfsHdfsUpdateACLsReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}:update-acls"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsHdfsACLsValidateBeforeCall(DfsHdfsUpdateACLsReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsHdfsACLs(Async)");
        }
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling updateDfsHdfsACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsHdfsACLsCall(body, dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs hdfs ACL
     * @param body hdfs acls info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp updateDfsHdfsACLs(DfsHdfsUpdateACLsReq body, Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = updateDfsHdfsACLsWithHttpInfo(body, dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs hdfs ACL
     * @param body hdfs acls info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> updateDfsHdfsACLsWithHttpInfo(DfsHdfsUpdateACLsReq body, Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsHdfsACLsValidateBeforeCall(body, dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs hdfs ACL
     * @param body hdfs acls info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsHdfsACLsAsync(DfsHdfsUpdateACLsReq body, Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsHdfsACLsValidateBeforeCall(body, dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsHdfsIPWhiteLists
     * @param body hdfs ip white lists info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsHdfsIPWhiteListsCall(DfsHdfsUpdateIPWhiteListsReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}:update-ip-white-lists"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsHdfsIPWhiteListsValidateBeforeCall(DfsHdfsUpdateIPWhiteListsReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsHdfsIPWhiteLists(Async)");
        }
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling updateDfsHdfsIPWhiteLists(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsHdfsIPWhiteListsCall(body, dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs hdfs IP White List
     * @param body hdfs ip white lists info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp updateDfsHdfsIPWhiteLists(DfsHdfsUpdateIPWhiteListsReq body, Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = updateDfsHdfsIPWhiteListsWithHttpInfo(body, dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs hdfs IP White List
     * @param body hdfs ip white lists info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> updateDfsHdfsIPWhiteListsWithHttpInfo(DfsHdfsUpdateIPWhiteListsReq body, Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsHdfsIPWhiteListsValidateBeforeCall(body, dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs hdfs IP White List
     * @param body hdfs ip white lists info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsHdfsIPWhiteListsAsync(DfsHdfsUpdateIPWhiteListsReq body, Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsHdfsIPWhiteListsValidateBeforeCall(body, dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsHdfsProxyUsers
     * @param body hdfs proxy user info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsHdfsProxyUsersCall(DfsHdfsUpdateProxyUsersReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-hdfses/{dfs_hdfs_id}:update-proxy-users"
            .replaceAll("\\{" + "dfs_hdfs_id" + "\\}", apiClient.escapeString(dfsHdfsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsHdfsProxyUsersValidateBeforeCall(DfsHdfsUpdateProxyUsersReq body, Long dfsHdfsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsHdfsProxyUsers(Async)");
        }
        // verify the required parameter 'dfsHdfsId' is set
        if (dfsHdfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsHdfsId' when calling updateDfsHdfsProxyUsers(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsHdfsProxyUsersCall(body, dfsHdfsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs hdfs proxy users
     * @param body hdfs proxy user info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return DfsHdfsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsHdfsResp updateDfsHdfsProxyUsers(DfsHdfsUpdateProxyUsersReq body, Long dfsHdfsId) throws ApiException {
        ApiResponse<DfsHdfsResp> resp = updateDfsHdfsProxyUsersWithHttpInfo(body, dfsHdfsId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs hdfs proxy users
     * @param body hdfs proxy user info (required)
     * @param dfsHdfsId hdfs id (required)
     * @return ApiResponse&lt;DfsHdfsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsHdfsResp> updateDfsHdfsProxyUsersWithHttpInfo(DfsHdfsUpdateProxyUsersReq body, Long dfsHdfsId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsHdfsProxyUsersValidateBeforeCall(body, dfsHdfsId, null, null);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs hdfs proxy users
     * @param body hdfs proxy user info (required)
     * @param dfsHdfsId hdfs id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsHdfsProxyUsersAsync(DfsHdfsUpdateProxyUsersReq body, Long dfsHdfsId, final ApiCallback<DfsHdfsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsHdfsProxyUsersValidateBeforeCall(body, dfsHdfsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsHdfsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
