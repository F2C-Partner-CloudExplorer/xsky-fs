/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.OSSearchEngineAddGatewaysReq;
import xio.sds.client.model.OSSearchEngineCreateReq;
import xio.sds.client.model.OSSearchEngineRemoveGatewaysReq;
import xio.sds.client.model.OSSearchEngineResp;
import xio.sds.client.model.OSSearchEngineSamplesResp;
import xio.sds.client.model.OSSearchEngineUpdateReq;
import xio.sds.client.model.OSSearchEnginesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OsSearchEnginesApi {
    private ApiClient apiClient;

    public OsSearchEnginesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OsSearchEnginesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addOSSearchGateways
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOSSearchGatewaysCall(OSSearchEngineAddGatewaysReq body, Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-search-engines/{os_search_engine_id}:add-os-search-gateways"
            .replaceAll("\\{" + "os_search_engine_id" + "\\}", apiClient.escapeString(osSearchEngineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOSSearchGatewaysValidateBeforeCall(OSSearchEngineAddGatewaysReq body, Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOSSearchGateways(Async)");
        }
        // verify the required parameter 'osSearchEngineId' is set
        if (osSearchEngineId == null) {
            throw new ApiException("Missing the required parameter 'osSearchEngineId' when calling addOSSearchGateways(Async)");
        }
        
        com.squareup.okhttp.Call call = addOSSearchGatewaysCall(body, osSearchEngineId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create new OS Search gateways on OS search engine
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @return OSSearchEngineResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSSearchEngineResp addOSSearchGateways(OSSearchEngineAddGatewaysReq body, Long osSearchEngineId) throws ApiException {
        ApiResponse<OSSearchEngineResp> resp = addOSSearchGatewaysWithHttpInfo(body, osSearchEngineId);
        return resp.getData();
    }

    /**
     * 
     * Create new OS Search gateways on OS search engine
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @return ApiResponse&lt;OSSearchEngineResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSSearchEngineResp> addOSSearchGatewaysWithHttpInfo(OSSearchEngineAddGatewaysReq body, Long osSearchEngineId) throws ApiException {
        com.squareup.okhttp.Call call = addOSSearchGatewaysValidateBeforeCall(body, osSearchEngineId, null, null);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new OS Search gateways on OS search engine
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOSSearchGatewaysAsync(OSSearchEngineAddGatewaysReq body, Long osSearchEngineId, final ApiCallback<OSSearchEngineResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOSSearchGatewaysValidateBeforeCall(body, osSearchEngineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changeOSSearchEngine
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeOSSearchEngineCall(OSSearchEngineUpdateReq body, Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-search-engines/{os_search_engine_id}"
            .replaceAll("\\{" + "os_search_engine_id" + "\\}", apiClient.escapeString(osSearchEngineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeOSSearchEngineValidateBeforeCall(OSSearchEngineUpdateReq body, Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeOSSearchEngine(Async)");
        }
        // verify the required parameter 'osSearchEngineId' is set
        if (osSearchEngineId == null) {
            throw new ApiException("Missing the required parameter 'osSearchEngineId' when calling changeOSSearchEngine(Async)");
        }
        
        com.squareup.okhttp.Call call = changeOSSearchEngineCall(body, osSearchEngineId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * change OS search engine falvor or data size
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @return OSSearchEngineResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSSearchEngineResp changeOSSearchEngine(OSSearchEngineUpdateReq body, Long osSearchEngineId) throws ApiException {
        ApiResponse<OSSearchEngineResp> resp = changeOSSearchEngineWithHttpInfo(body, osSearchEngineId);
        return resp.getData();
    }

    /**
     * 
     * change OS search engine falvor or data size
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @return ApiResponse&lt;OSSearchEngineResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSSearchEngineResp> changeOSSearchEngineWithHttpInfo(OSSearchEngineUpdateReq body, Long osSearchEngineId) throws ApiException {
        com.squareup.okhttp.Call call = changeOSSearchEngineValidateBeforeCall(body, osSearchEngineId, null, null);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * change OS search engine falvor or data size
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeOSSearchEngineAsync(OSSearchEngineUpdateReq body, Long osSearchEngineId, final ApiCallback<OSSearchEngineResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeOSSearchEngineValidateBeforeCall(body, osSearchEngineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOSSearchEngine
     * @param body OS search engine info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOSSearchEngineCall(OSSearchEngineCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-search-engines/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOSSearchEngineValidateBeforeCall(OSSearchEngineCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOSSearchEngine(Async)");
        }
        
        com.squareup.okhttp.Call call = createOSSearchEngineCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create OS search engine
     * @param body OS search engine info (required)
     * @param clusterId cluster id (optional)
     * @return OSSearchEngineResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSSearchEngineResp createOSSearchEngine(OSSearchEngineCreateReq body, String clusterId) throws ApiException {
        ApiResponse<OSSearchEngineResp> resp = createOSSearchEngineWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create OS search engine
     * @param body OS search engine info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;OSSearchEngineResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSSearchEngineResp> createOSSearchEngineWithHttpInfo(OSSearchEngineCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createOSSearchEngineValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create OS search engine
     * @param body OS search engine info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOSSearchEngineAsync(OSSearchEngineCreateReq body, String clusterId, final ApiCallback<OSSearchEngineResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOSSearchEngineValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteOSSearchEngine
     * @param osSearchEngineId OS search engine id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOSSearchEngineCall(Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-search-engines/{os_search_engine_id}"
            .replaceAll("\\{" + "os_search_engine_id" + "\\}", apiClient.escapeString(osSearchEngineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOSSearchEngineValidateBeforeCall(Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osSearchEngineId' is set
        if (osSearchEngineId == null) {
            throw new ApiException("Missing the required parameter 'osSearchEngineId' when calling deleteOSSearchEngine(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteOSSearchEngineCall(osSearchEngineId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @return OSSearchEngineResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSSearchEngineResp deleteOSSearchEngine(Long osSearchEngineId) throws ApiException {
        ApiResponse<OSSearchEngineResp> resp = deleteOSSearchEngineWithHttpInfo(osSearchEngineId);
        return resp.getData();
    }

    /**
     * 
     * delete OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @return ApiResponse&lt;OSSearchEngineResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSSearchEngineResp> deleteOSSearchEngineWithHttpInfo(Long osSearchEngineId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOSSearchEngineValidateBeforeCall(osSearchEngineId, null, null);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOSSearchEngineAsync(Long osSearchEngineId, final ApiCallback<OSSearchEngineResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOSSearchEngineValidateBeforeCall(osSearchEngineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOSSearchEngine
     * @param osSearchEngineId OS search engine id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOSSearchEngineCall(Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-search-engines/{os_search_engine_id}"
            .replaceAll("\\{" + "os_search_engine_id" + "\\}", apiClient.escapeString(osSearchEngineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOSSearchEngineValidateBeforeCall(Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osSearchEngineId' is set
        if (osSearchEngineId == null) {
            throw new ApiException("Missing the required parameter 'osSearchEngineId' when calling getOSSearchEngine(Async)");
        }
        
        com.squareup.okhttp.Call call = getOSSearchEngineCall(osSearchEngineId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get a OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @return OSSearchEngineResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSSearchEngineResp getOSSearchEngine(Long osSearchEngineId) throws ApiException {
        ApiResponse<OSSearchEngineResp> resp = getOSSearchEngineWithHttpInfo(osSearchEngineId);
        return resp.getData();
    }

    /**
     * 
     * Get a OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @return ApiResponse&lt;OSSearchEngineResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSSearchEngineResp> getOSSearchEngineWithHttpInfo(Long osSearchEngineId) throws ApiException {
        com.squareup.okhttp.Call call = getOSSearchEngineValidateBeforeCall(osSearchEngineId, null, null);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOSSearchEngineAsync(Long osSearchEngineId, final ApiCallback<OSSearchEngineResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOSSearchEngineValidateBeforeCall(osSearchEngineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOSSearchEngineSamples
     * @param osSearchEngineId OS search engine id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOSSearchEngineSamplesCall(Long osSearchEngineId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-search-engines/{os_search_engine_id}/samples"
            .replaceAll("\\{" + "os_search_engine_id" + "\\}", apiClient.escapeString(osSearchEngineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOSSearchEngineSamplesValidateBeforeCall(Long osSearchEngineId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osSearchEngineId' is set
        if (osSearchEngineId == null) {
            throw new ApiException("Missing the required parameter 'osSearchEngineId' when calling getOSSearchEngineSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getOSSearchEngineSamplesCall(osSearchEngineId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get an object storage search engine&#x27;s samples
     * @param osSearchEngineId OS search engine id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return OSSearchEngineSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSSearchEngineSamplesResp getOSSearchEngineSamples(Long osSearchEngineId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<OSSearchEngineSamplesResp> resp = getOSSearchEngineSamplesWithHttpInfo(osSearchEngineId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get an object storage search engine&#x27;s samples
     * @param osSearchEngineId OS search engine id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;OSSearchEngineSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSSearchEngineSamplesResp> getOSSearchEngineSamplesWithHttpInfo(Long osSearchEngineId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getOSSearchEngineSamplesValidateBeforeCall(osSearchEngineId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<OSSearchEngineSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get an object storage search engine&#x27;s samples
     * @param osSearchEngineId OS search engine id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOSSearchEngineSamplesAsync(Long osSearchEngineId, String durationBegin, String durationEnd, String period, final ApiCallback<OSSearchEngineSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOSSearchEngineSamplesValidateBeforeCall(osSearchEngineId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSSearchEngineSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOSSearchEngines
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOSSearchEnginesCall(String clusterId, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-search-engines/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOSSearchEnginesValidateBeforeCall(String clusterId, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listOSSearchEnginesCall(clusterId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List OS search engine
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @return OSSearchEnginesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSSearchEnginesResp listOSSearchEngines(String clusterId, Long limit, Long offset) throws ApiException {
        ApiResponse<OSSearchEnginesResp> resp = listOSSearchEnginesWithHttpInfo(clusterId, limit, offset);
        return resp.getData();
    }

    /**
     * 
     * List OS search engine
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @return ApiResponse&lt;OSSearchEnginesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSSearchEnginesResp> listOSSearchEnginesWithHttpInfo(String clusterId, Long limit, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = listOSSearchEnginesValidateBeforeCall(clusterId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<OSSearchEnginesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List OS search engine
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOSSearchEnginesAsync(String clusterId, Long limit, Long offset, final ApiCallback<OSSearchEnginesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOSSearchEnginesValidateBeforeCall(clusterId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSSearchEnginesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeOSSearchGateways
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeOSSearchGatewaysCall(OSSearchEngineRemoveGatewaysReq body, Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-search-engines/{os_search_engine_id}:remove-os-search-gateways"
            .replaceAll("\\{" + "os_search_engine_id" + "\\}", apiClient.escapeString(osSearchEngineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeOSSearchGatewaysValidateBeforeCall(OSSearchEngineRemoveGatewaysReq body, Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeOSSearchGateways(Async)");
        }
        // verify the required parameter 'osSearchEngineId' is set
        if (osSearchEngineId == null) {
            throw new ApiException("Missing the required parameter 'osSearchEngineId' when calling removeOSSearchGateways(Async)");
        }
        
        com.squareup.okhttp.Call call = removeOSSearchGatewaysCall(body, osSearchEngineId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove OS search gateways from OS search engine
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @return OSSearchEngineResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSSearchEngineResp removeOSSearchGateways(OSSearchEngineRemoveGatewaysReq body, Long osSearchEngineId) throws ApiException {
        ApiResponse<OSSearchEngineResp> resp = removeOSSearchGatewaysWithHttpInfo(body, osSearchEngineId);
        return resp.getData();
    }

    /**
     * 
     * remove OS search gateways from OS search engine
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @return ApiResponse&lt;OSSearchEngineResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSSearchEngineResp> removeOSSearchGatewaysWithHttpInfo(OSSearchEngineRemoveGatewaysReq body, Long osSearchEngineId) throws ApiException {
        com.squareup.okhttp.Call call = removeOSSearchGatewaysValidateBeforeCall(body, osSearchEngineId, null, null);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove OS search gateways from OS search engine
     * @param body os search gateways info (required)
     * @param osSearchEngineId OS search engine id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeOSSearchGatewaysAsync(OSSearchEngineRemoveGatewaysReq body, Long osSearchEngineId, final ApiCallback<OSSearchEngineResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeOSSearchGatewaysValidateBeforeCall(body, osSearchEngineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startOSSearchEngine
     * @param osSearchEngineId OS search engine id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startOSSearchEngineCall(Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-search-engines/{os_search_engine_id}:start"
            .replaceAll("\\{" + "os_search_engine_id" + "\\}", apiClient.escapeString(osSearchEngineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startOSSearchEngineValidateBeforeCall(Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osSearchEngineId' is set
        if (osSearchEngineId == null) {
            throw new ApiException("Missing the required parameter 'osSearchEngineId' when calling startOSSearchEngine(Async)");
        }
        
        com.squareup.okhttp.Call call = startOSSearchEngineCall(osSearchEngineId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * start OS search gateways from OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @return OSSearchEngineResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSSearchEngineResp startOSSearchEngine(Long osSearchEngineId) throws ApiException {
        ApiResponse<OSSearchEngineResp> resp = startOSSearchEngineWithHttpInfo(osSearchEngineId);
        return resp.getData();
    }

    /**
     * 
     * start OS search gateways from OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @return ApiResponse&lt;OSSearchEngineResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSSearchEngineResp> startOSSearchEngineWithHttpInfo(Long osSearchEngineId) throws ApiException {
        com.squareup.okhttp.Call call = startOSSearchEngineValidateBeforeCall(osSearchEngineId, null, null);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * start OS search gateways from OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startOSSearchEngineAsync(Long osSearchEngineId, final ApiCallback<OSSearchEngineResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startOSSearchEngineValidateBeforeCall(osSearchEngineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopOSSearchEngine
     * @param osSearchEngineId OS search engine id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopOSSearchEngineCall(Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-search-engines/{os_search_engine_id}:stop"
            .replaceAll("\\{" + "os_search_engine_id" + "\\}", apiClient.escapeString(osSearchEngineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopOSSearchEngineValidateBeforeCall(Long osSearchEngineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'osSearchEngineId' is set
        if (osSearchEngineId == null) {
            throw new ApiException("Missing the required parameter 'osSearchEngineId' when calling stopOSSearchEngine(Async)");
        }
        
        com.squareup.okhttp.Call call = stopOSSearchEngineCall(osSearchEngineId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * stop OS search gateways from OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @return OSSearchEngineResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSSearchEngineResp stopOSSearchEngine(Long osSearchEngineId) throws ApiException {
        ApiResponse<OSSearchEngineResp> resp = stopOSSearchEngineWithHttpInfo(osSearchEngineId);
        return resp.getData();
    }

    /**
     * 
     * stop OS search gateways from OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @return ApiResponse&lt;OSSearchEngineResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSSearchEngineResp> stopOSSearchEngineWithHttpInfo(Long osSearchEngineId) throws ApiException {
        com.squareup.okhttp.Call call = stopOSSearchEngineValidateBeforeCall(osSearchEngineId, null, null);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * stop OS search gateways from OS search engine
     * @param osSearchEngineId OS search engine id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopOSSearchEngineAsync(Long osSearchEngineId, final ApiCallback<OSSearchEngineResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopOSSearchEngineValidateBeforeCall(osSearchEngineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSSearchEngineResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
