/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.AlertInfoGroupResp;
import xio.sds.client.model.AlertInfoGroupsResp;
import xio.sds.client.model.AlertStatsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertInfoGroupsApi {
    private ApiClient apiClient;

    public AlertInfoGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertInfoGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ackAlertInfoGroup
     * @param alertInfoGroupId the id of alert info group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ackAlertInfoGroupCall(Long alertInfoGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-info-groups/{alert_info_group_id}:ack"
            .replaceAll("\\{" + "alert_info_group_id" + "\\}", apiClient.escapeString(alertInfoGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ackAlertInfoGroupValidateBeforeCall(Long alertInfoGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertInfoGroupId' is set
        if (alertInfoGroupId == null) {
            throw new ApiException("Missing the required parameter 'alertInfoGroupId' when calling ackAlertInfoGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = ackAlertInfoGroupCall(alertInfoGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set the acked status of alert info group
     * @param alertInfoGroupId the id of alert info group (required)
     * @return AlertInfoGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertInfoGroupResp ackAlertInfoGroup(Long alertInfoGroupId) throws ApiException {
        ApiResponse<AlertInfoGroupResp> resp = ackAlertInfoGroupWithHttpInfo(alertInfoGroupId);
        return resp.getData();
    }

    /**
     * 
     * set the acked status of alert info group
     * @param alertInfoGroupId the id of alert info group (required)
     * @return ApiResponse&lt;AlertInfoGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertInfoGroupResp> ackAlertInfoGroupWithHttpInfo(Long alertInfoGroupId) throws ApiException {
        com.squareup.okhttp.Call call = ackAlertInfoGroupValidateBeforeCall(alertInfoGroupId, null, null);
        Type localVarReturnType = new TypeToken<AlertInfoGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * set the acked status of alert info group
     * @param alertInfoGroupId the id of alert info group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ackAlertInfoGroupAsync(Long alertInfoGroupId, final ApiCallback<AlertInfoGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ackAlertInfoGroupValidateBeforeCall(alertInfoGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertInfoGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for countAlertInfoGroups
     * @param acked acked of the most recently alert info in group (optional)
     * @param resolved resolved or not of the most recently alert info in group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param resourceId resource id of alert info group (optional)
     * @param startTime start time of create of alert info group (optional)
     * @param endTime end time of create of alert info group (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call countAlertInfoGroupsCall(Boolean acked, Boolean resolved, String resourceType, Long resourceId, String startTime, String endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-info-groups/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acked", acked));
        if (resolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolved", resolved));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (resourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_id", resourceId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call countAlertInfoGroupsValidateBeforeCall(Boolean acked, Boolean resolved, String resourceType, Long resourceId, String startTime, String endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = countAlertInfoGroupsCall(acked, resolved, resourceType, resourceId, startTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * count alert info groups with conditions
     * @param acked acked of the most recently alert info in group (optional)
     * @param resolved resolved or not of the most recently alert info in group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param resourceId resource id of alert info group (optional)
     * @param startTime start time of create of alert info group (optional)
     * @param endTime end time of create of alert info group (optional)
     * @return AlertStatsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertStatsResp countAlertInfoGroups(Boolean acked, Boolean resolved, String resourceType, Long resourceId, String startTime, String endTime) throws ApiException {
        ApiResponse<AlertStatsResp> resp = countAlertInfoGroupsWithHttpInfo(acked, resolved, resourceType, resourceId, startTime, endTime);
        return resp.getData();
    }

    /**
     * 
     * count alert info groups with conditions
     * @param acked acked of the most recently alert info in group (optional)
     * @param resolved resolved or not of the most recently alert info in group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param resourceId resource id of alert info group (optional)
     * @param startTime start time of create of alert info group (optional)
     * @param endTime end time of create of alert info group (optional)
     * @return ApiResponse&lt;AlertStatsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertStatsResp> countAlertInfoGroupsWithHttpInfo(Boolean acked, Boolean resolved, String resourceType, Long resourceId, String startTime, String endTime) throws ApiException {
        com.squareup.okhttp.Call call = countAlertInfoGroupsValidateBeforeCall(acked, resolved, resourceType, resourceId, startTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<AlertStatsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * count alert info groups with conditions
     * @param acked acked of the most recently alert info in group (optional)
     * @param resolved resolved or not of the most recently alert info in group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param resourceId resource id of alert info group (optional)
     * @param startTime start time of create of alert info group (optional)
     * @param endTime end time of create of alert info group (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call countAlertInfoGroupsAsync(Boolean acked, Boolean resolved, String resourceType, Long resourceId, String startTime, String endTime, final ApiCallback<AlertStatsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = countAlertInfoGroupsValidateBeforeCall(acked, resolved, resourceType, resourceId, startTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertStatsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAlertInfoGroup
     * @param alertInfoGroupId the id of alert info group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAlertInfoGroupCall(Long alertInfoGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-info-groups/{alert_info_group_id}"
            .replaceAll("\\{" + "alert_info_group_id" + "\\}", apiClient.escapeString(alertInfoGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAlertInfoGroupValidateBeforeCall(Long alertInfoGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertInfoGroupId' is set
        if (alertInfoGroupId == null) {
            throw new ApiException("Missing the required parameter 'alertInfoGroupId' when calling deleteAlertInfoGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAlertInfoGroupCall(alertInfoGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete an alert info group
     * @param alertInfoGroupId the id of alert info group (required)
     * @return AlertInfoGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertInfoGroupResp deleteAlertInfoGroup(Long alertInfoGroupId) throws ApiException {
        ApiResponse<AlertInfoGroupResp> resp = deleteAlertInfoGroupWithHttpInfo(alertInfoGroupId);
        return resp.getData();
    }

    /**
     * 
     * delete an alert info group
     * @param alertInfoGroupId the id of alert info group (required)
     * @return ApiResponse&lt;AlertInfoGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertInfoGroupResp> deleteAlertInfoGroupWithHttpInfo(Long alertInfoGroupId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAlertInfoGroupValidateBeforeCall(alertInfoGroupId, null, null);
        Type localVarReturnType = new TypeToken<AlertInfoGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete an alert info group
     * @param alertInfoGroupId the id of alert info group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAlertInfoGroupAsync(Long alertInfoGroupId, final ApiCallback<AlertInfoGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAlertInfoGroupValidateBeforeCall(alertInfoGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertInfoGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAlertInfoGroup
     * @param groupId the id of alert info group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlertInfoGroupCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-info-groups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlertInfoGroupValidateBeforeCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getAlertInfoGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getAlertInfoGroupCall(groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get alert info group
     * @param groupId the id of alert info group (required)
     * @return AlertInfoGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertInfoGroupResp getAlertInfoGroup(Long groupId) throws ApiException {
        ApiResponse<AlertInfoGroupResp> resp = getAlertInfoGroupWithHttpInfo(groupId);
        return resp.getData();
    }

    /**
     * 
     * get alert info group
     * @param groupId the id of alert info group (required)
     * @return ApiResponse&lt;AlertInfoGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertInfoGroupResp> getAlertInfoGroupWithHttpInfo(Long groupId) throws ApiException {
        com.squareup.okhttp.Call call = getAlertInfoGroupValidateBeforeCall(groupId, null, null);
        Type localVarReturnType = new TypeToken<AlertInfoGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get alert info group
     * @param groupId the id of alert info group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlertInfoGroupAsync(Long groupId, final ApiCallback<AlertInfoGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlertInfoGroupValidateBeforeCall(groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertInfoGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAlertInfoGroupsReport
     * @param level level of alert info group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param createAfter create_after timestamp of alert info group (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlertInfoGroupsReportCall(String level, String resourceType, String createAfter, Boolean acked, Boolean resolved, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-info-groups/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (createAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("create_after", createAfter));
        if (acked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acked", acked));
        if (resolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolved", resolved));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlertInfoGroupsReportValidateBeforeCall(String level, String resourceType, String createAfter, Boolean acked, Boolean resolved, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAlertInfoGroupsReportCall(level, resourceType, createAfter, acked, resolved, group, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get report of alert info groups
     * @param level level of alert info group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param createAfter create_after timestamp of alert info group (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAlertInfoGroupsReport(String level, String resourceType, String createAfter, Boolean acked, Boolean resolved, String group) throws ApiException {
        getAlertInfoGroupsReportWithHttpInfo(level, resourceType, createAfter, acked, resolved, group);
    }

    /**
     * 
     * Get report of alert info groups
     * @param level level of alert info group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param createAfter create_after timestamp of alert info group (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAlertInfoGroupsReportWithHttpInfo(String level, String resourceType, String createAfter, Boolean acked, Boolean resolved, String group) throws ApiException {
        com.squareup.okhttp.Call call = getAlertInfoGroupsReportValidateBeforeCall(level, resourceType, createAfter, acked, resolved, group, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Get report of alert info groups
     * @param level level of alert info group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param createAfter create_after timestamp of alert info group (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlertInfoGroupsReportAsync(String level, String resourceType, String createAfter, Boolean acked, Boolean resolved, String group, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlertInfoGroupsReportValidateBeforeCall(level, resourceType, createAfter, acked, resolved, group, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listAlertInfoGroups
     * @param qMust must query param of search (optional)
     * @param q should query param of search (optional)
     * @param relatedResource should query param of search (optional)
     * @param sort sort param of search (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param level level of alert info group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param resourceId resource id of alert info group (optional)
     * @param createAfter create_after start time of alert info group (optional)
     * @param createBefore create_before end time of alert info group (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param excludeCluster filter to exclude cluster of alert info (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAlertInfoGroupsCall(String qMust, String q, String relatedResource, String sort, Long limit, Long offset, String level, String resourceType, Long resourceId, String createAfter, String createBefore, Boolean acked, Boolean resolved, String group, Boolean excludeCluster, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-info-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (qMust != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q_must", qMust));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (relatedResource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("related_resource", relatedResource));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (resourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_id", resourceId));
        if (createAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("create_after", createAfter));
        if (createBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("create_before", createBefore));
        if (acked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acked", acked));
        if (resolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolved", resolved));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (excludeCluster != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_cluster", excludeCluster));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAlertInfoGroupsValidateBeforeCall(String qMust, String q, String relatedResource, String sort, Long limit, Long offset, String level, String resourceType, Long resourceId, String createAfter, String createBefore, Boolean acked, Boolean resolved, String group, Boolean excludeCluster, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listAlertInfoGroupsCall(qMust, q, relatedResource, sort, limit, offset, level, resourceType, resourceId, createAfter, createBefore, acked, resolved, group, excludeCluster, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List all alert info groups
     * @param qMust must query param of search (optional)
     * @param q should query param of search (optional)
     * @param relatedResource should query param of search (optional)
     * @param sort sort param of search (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param level level of alert info group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param resourceId resource id of alert info group (optional)
     * @param createAfter create_after start time of alert info group (optional)
     * @param createBefore create_before end time of alert info group (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param excludeCluster filter to exclude cluster of alert info (optional)
     * @return AlertInfoGroupsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertInfoGroupsResp listAlertInfoGroups(String qMust, String q, String relatedResource, String sort, Long limit, Long offset, String level, String resourceType, Long resourceId, String createAfter, String createBefore, Boolean acked, Boolean resolved, String group, Boolean excludeCluster) throws ApiException {
        ApiResponse<AlertInfoGroupsResp> resp = listAlertInfoGroupsWithHttpInfo(qMust, q, relatedResource, sort, limit, offset, level, resourceType, resourceId, createAfter, createBefore, acked, resolved, group, excludeCluster);
        return resp.getData();
    }

    /**
     * 
     * List all alert info groups
     * @param qMust must query param of search (optional)
     * @param q should query param of search (optional)
     * @param relatedResource should query param of search (optional)
     * @param sort sort param of search (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param level level of alert info group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param resourceId resource id of alert info group (optional)
     * @param createAfter create_after start time of alert info group (optional)
     * @param createBefore create_before end time of alert info group (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param excludeCluster filter to exclude cluster of alert info (optional)
     * @return ApiResponse&lt;AlertInfoGroupsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertInfoGroupsResp> listAlertInfoGroupsWithHttpInfo(String qMust, String q, String relatedResource, String sort, Long limit, Long offset, String level, String resourceType, Long resourceId, String createAfter, String createBefore, Boolean acked, Boolean resolved, String group, Boolean excludeCluster) throws ApiException {
        com.squareup.okhttp.Call call = listAlertInfoGroupsValidateBeforeCall(qMust, q, relatedResource, sort, limit, offset, level, resourceType, resourceId, createAfter, createBefore, acked, resolved, group, excludeCluster, null, null);
        Type localVarReturnType = new TypeToken<AlertInfoGroupsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alert info groups
     * @param qMust must query param of search (optional)
     * @param q should query param of search (optional)
     * @param relatedResource should query param of search (optional)
     * @param sort sort param of search (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param level level of alert info group (optional)
     * @param resourceType resource type of alert info group (optional)
     * @param resourceId resource id of alert info group (optional)
     * @param createAfter create_after start time of alert info group (optional)
     * @param createBefore create_before end time of alert info group (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param excludeCluster filter to exclude cluster of alert info (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAlertInfoGroupsAsync(String qMust, String q, String relatedResource, String sort, Long limit, Long offset, String level, String resourceType, Long resourceId, String createAfter, String createBefore, Boolean acked, Boolean resolved, String group, Boolean excludeCluster, final ApiCallback<AlertInfoGroupsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAlertInfoGroupsValidateBeforeCall(qMust, q, relatedResource, sort, limit, offset, level, resourceType, resourceId, createAfter, createBefore, acked, resolved, group, excludeCluster, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertInfoGroupsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resolveAlertInfoGroup
     * @param alertInfoGroupId the id of alert info group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resolveAlertInfoGroupCall(Long alertInfoGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-info-groups/{alert_info_group_id}:resolve"
            .replaceAll("\\{" + "alert_info_group_id" + "\\}", apiClient.escapeString(alertInfoGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resolveAlertInfoGroupValidateBeforeCall(Long alertInfoGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertInfoGroupId' is set
        if (alertInfoGroupId == null) {
            throw new ApiException("Missing the required parameter 'alertInfoGroupId' when calling resolveAlertInfoGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = resolveAlertInfoGroupCall(alertInfoGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set the resolved status of alert info group
     * @param alertInfoGroupId the id of alert info group (required)
     * @return AlertInfoGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertInfoGroupResp resolveAlertInfoGroup(Long alertInfoGroupId) throws ApiException {
        ApiResponse<AlertInfoGroupResp> resp = resolveAlertInfoGroupWithHttpInfo(alertInfoGroupId);
        return resp.getData();
    }

    /**
     * 
     * set the resolved status of alert info group
     * @param alertInfoGroupId the id of alert info group (required)
     * @return ApiResponse&lt;AlertInfoGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertInfoGroupResp> resolveAlertInfoGroupWithHttpInfo(Long alertInfoGroupId) throws ApiException {
        com.squareup.okhttp.Call call = resolveAlertInfoGroupValidateBeforeCall(alertInfoGroupId, null, null);
        Type localVarReturnType = new TypeToken<AlertInfoGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * set the resolved status of alert info group
     * @param alertInfoGroupId the id of alert info group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resolveAlertInfoGroupAsync(Long alertInfoGroupId, final ApiCallback<AlertInfoGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resolveAlertInfoGroupValidateBeforeCall(alertInfoGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertInfoGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
