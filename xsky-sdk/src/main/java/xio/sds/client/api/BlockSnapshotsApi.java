/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.SnapshotCreateReq;
import xio.sds.client.model.SnapshotResp;
import xio.sds.client.model.SnapshotUpdateReq;
import xio.sds.client.model.SnapshotsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlockSnapshotsApi {
    private ApiClient apiClient;

    public BlockSnapshotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlockSnapshotsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBlockSnapshot
     * @param body snapshot info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBlockSnapshotCall(SnapshotCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-snapshots/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBlockSnapshotValidateBeforeCall(SnapshotCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBlockSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = createBlockSnapshotCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create block snapshot
     * @param body snapshot info (required)
     * @return SnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotResp createBlockSnapshot(SnapshotCreateReq body) throws ApiException {
        ApiResponse<SnapshotResp> resp = createBlockSnapshotWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Create block snapshot
     * @param body snapshot info (required)
     * @return ApiResponse&lt;SnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotResp> createBlockSnapshotWithHttpInfo(SnapshotCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createBlockSnapshotValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<SnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create block snapshot
     * @param body snapshot info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBlockSnapshotAsync(SnapshotCreateReq body, final ApiCallback<SnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBlockSnapshotValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBlockSnapshot
     * @param snapshotId snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBlockSnapshotCall(Long snapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-snapshots/{snapshot_id}"
            .replaceAll("\\{" + "snapshot_id" + "\\}", apiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBlockSnapshotValidateBeforeCall(Long snapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling deleteBlockSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBlockSnapshotCall(snapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete block snapshot
     * @param snapshotId snapshot id (required)
     * @return SnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotResp deleteBlockSnapshot(Long snapshotId) throws ApiException {
        ApiResponse<SnapshotResp> resp = deleteBlockSnapshotWithHttpInfo(snapshotId);
        return resp.getData();
    }

    /**
     * 
     * Delete block snapshot
     * @param snapshotId snapshot id (required)
     * @return ApiResponse&lt;SnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotResp> deleteBlockSnapshotWithHttpInfo(Long snapshotId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBlockSnapshotValidateBeforeCall(snapshotId, null, null);
        Type localVarReturnType = new TypeToken<SnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete block snapshot
     * @param snapshotId snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBlockSnapshotAsync(Long snapshotId, final ApiCallback<SnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBlockSnapshotValidateBeforeCall(snapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBlockSnapshot
     * @param blockSnapshotId the block snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlockSnapshotCall(Long blockSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-snapshots/{block_snapshot_id}"
            .replaceAll("\\{" + "block_snapshot_id" + "\\}", apiClient.escapeString(blockSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlockSnapshotValidateBeforeCall(Long blockSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockSnapshotId' is set
        if (blockSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'blockSnapshotId' when calling getBlockSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = getBlockSnapshotCall(blockSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get block snapshot
     * @param blockSnapshotId the block snapshot id (required)
     * @return SnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotResp getBlockSnapshot(Long blockSnapshotId) throws ApiException {
        ApiResponse<SnapshotResp> resp = getBlockSnapshotWithHttpInfo(blockSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * get block snapshot
     * @param blockSnapshotId the block snapshot id (required)
     * @return ApiResponse&lt;SnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotResp> getBlockSnapshotWithHttpInfo(Long blockSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = getBlockSnapshotValidateBeforeCall(blockSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<SnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get block snapshot
     * @param blockSnapshotId the block snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlockSnapshotAsync(Long blockSnapshotId, final ApiCallback<SnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlockSnapshotValidateBeforeCall(blockSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBlockSnapshots
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param poolId pool id (optional)
     * @param uid snapshot uid (optional)
     * @param blockVolumeId volume id (optional)
     * @param consistentSnapshotId consistent snapshot id (optional)
     * @param reserved show reserved snapshot or not, default not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param all show all snapshots (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBlockSnapshotsCall(Long limit, Long offset, String clusterId, Long poolId, String uid, Long blockVolumeId, Long consistentSnapshotId, Boolean reserved, String q, String sort, Boolean all, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-snapshots/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (poolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pool_id", poolId));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));
        if (blockVolumeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("block_volume_id", blockVolumeId));
        if (consistentSnapshotId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("consistent_snapshot_id", consistentSnapshotId));
        if (reserved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reserved", reserved));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (all != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("all", all));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBlockSnapshotsValidateBeforeCall(Long limit, Long offset, String clusterId, Long poolId, String uid, Long blockVolumeId, Long consistentSnapshotId, Boolean reserved, String q, String sort, Boolean all, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listBlockSnapshotsCall(limit, offset, clusterId, poolId, uid, blockVolumeId, consistentSnapshotId, reserved, q, sort, all, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List block snapshots
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param poolId pool id (optional)
     * @param uid snapshot uid (optional)
     * @param blockVolumeId volume id (optional)
     * @param consistentSnapshotId consistent snapshot id (optional)
     * @param reserved show reserved snapshot or not, default not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param all show all snapshots (optional)
     * @return SnapshotsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotsResp listBlockSnapshots(Long limit, Long offset, String clusterId, Long poolId, String uid, Long blockVolumeId, Long consistentSnapshotId, Boolean reserved, String q, String sort, Boolean all) throws ApiException {
        ApiResponse<SnapshotsResp> resp = listBlockSnapshotsWithHttpInfo(limit, offset, clusterId, poolId, uid, blockVolumeId, consistentSnapshotId, reserved, q, sort, all);
        return resp.getData();
    }

    /**
     * 
     * List block snapshots
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param poolId pool id (optional)
     * @param uid snapshot uid (optional)
     * @param blockVolumeId volume id (optional)
     * @param consistentSnapshotId consistent snapshot id (optional)
     * @param reserved show reserved snapshot or not, default not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param all show all snapshots (optional)
     * @return ApiResponse&lt;SnapshotsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotsResp> listBlockSnapshotsWithHttpInfo(Long limit, Long offset, String clusterId, Long poolId, String uid, Long blockVolumeId, Long consistentSnapshotId, Boolean reserved, String q, String sort, Boolean all) throws ApiException {
        com.squareup.okhttp.Call call = listBlockSnapshotsValidateBeforeCall(limit, offset, clusterId, poolId, uid, blockVolumeId, consistentSnapshotId, reserved, q, sort, all, null, null);
        Type localVarReturnType = new TypeToken<SnapshotsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List block snapshots
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param poolId pool id (optional)
     * @param uid snapshot uid (optional)
     * @param blockVolumeId volume id (optional)
     * @param consistentSnapshotId consistent snapshot id (optional)
     * @param reserved show reserved snapshot or not, default not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param all show all snapshots (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBlockSnapshotsAsync(Long limit, Long offset, String clusterId, Long poolId, String uid, Long blockVolumeId, Long consistentSnapshotId, Boolean reserved, String q, String sort, Boolean all, final ApiCallback<SnapshotsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBlockSnapshotsValidateBeforeCall(limit, offset, clusterId, poolId, uid, blockVolumeId, consistentSnapshotId, reserved, q, sort, all, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSnapshot
     * @param body snapshot info (required)
     * @param snapshotId snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotCall(SnapshotUpdateReq body, Long snapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-snapshots/{snapshot_id}"
            .replaceAll("\\{" + "snapshot_id" + "\\}", apiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSnapshotValidateBeforeCall(SnapshotUpdateReq body, Long snapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSnapshot(Async)");
        }
        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling updateSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSnapshotCall(body, snapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update block snapshot info
     * @param body snapshot info (required)
     * @param snapshotId snapshot id (required)
     * @return SnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotResp updateSnapshot(SnapshotUpdateReq body, Long snapshotId) throws ApiException {
        ApiResponse<SnapshotResp> resp = updateSnapshotWithHttpInfo(body, snapshotId);
        return resp.getData();
    }

    /**
     * 
     * Update block snapshot info
     * @param body snapshot info (required)
     * @param snapshotId snapshot id (required)
     * @return ApiResponse&lt;SnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotResp> updateSnapshotWithHttpInfo(SnapshotUpdateReq body, Long snapshotId) throws ApiException {
        com.squareup.okhttp.Call call = updateSnapshotValidateBeforeCall(body, snapshotId, null, null);
        Type localVarReturnType = new TypeToken<SnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update block snapshot info
     * @param body snapshot info (required)
     * @param snapshotId snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotAsync(SnapshotUpdateReq body, Long snapshotId, final ApiCallback<SnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSnapshotValidateBeforeCall(body, snapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
