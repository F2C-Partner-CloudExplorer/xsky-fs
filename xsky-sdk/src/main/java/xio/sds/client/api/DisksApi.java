/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DiskRebuildReq;
import xio.sds.client.model.DiskResp;
import xio.sds.client.model.DiskSamplesResp;
import xio.sds.client.model.DiskUpdateReq;
import xio.sds.client.model.DisksResp;
import xio.sds.client.model.PartitionsCreateReq;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisksApi {
    private ApiClient apiClient;

    public DisksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPartitions
     * @param body partitions info (required)
     * @param diskId disk id (required)
     * @param num num of cache partitions to create (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPartitionsCall(PartitionsCreateReq body, Long diskId, Long num, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/disks/{disk_id}/partitions"
            .replaceAll("\\{" + "disk_id" + "\\}", apiClient.escapeString(diskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (num != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("num", num));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPartitionsValidateBeforeCall(PartitionsCreateReq body, Long diskId, Long num, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPartitions(Async)");
        }
        // verify the required parameter 'diskId' is set
        if (diskId == null) {
            throw new ApiException("Missing the required parameter 'diskId' when calling createPartitions(Async)");
        }
        
        com.squareup.okhttp.Call call = createPartitionsCall(body, diskId, num, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * create cache partitions for disk
     * @param body partitions info (required)
     * @param diskId disk id (required)
     * @param num num of cache partitions to create (optional)
     * @return DiskResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiskResp createPartitions(PartitionsCreateReq body, Long diskId, Long num) throws ApiException {
        ApiResponse<DiskResp> resp = createPartitionsWithHttpInfo(body, diskId, num);
        return resp.getData();
    }

    /**
     * 
     * create cache partitions for disk
     * @param body partitions info (required)
     * @param diskId disk id (required)
     * @param num num of cache partitions to create (optional)
     * @return ApiResponse&lt;DiskResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiskResp> createPartitionsWithHttpInfo(PartitionsCreateReq body, Long diskId, Long num) throws ApiException {
        com.squareup.okhttp.Call call = createPartitionsValidateBeforeCall(body, diskId, num, null, null);
        Type localVarReturnType = new TypeToken<DiskResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create cache partitions for disk
     * @param body partitions info (required)
     * @param diskId disk id (required)
     * @param num num of cache partitions to create (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPartitionsAsync(PartitionsCreateReq body, Long diskId, Long num, final ApiCallback<DiskResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPartitionsValidateBeforeCall(body, diskId, num, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiskResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePartitions
     * @param diskId disk id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePartitionsCall(Long diskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/disks/{disk_id}/partitions"
            .replaceAll("\\{" + "disk_id" + "\\}", apiClient.escapeString(diskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePartitionsValidateBeforeCall(Long diskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'diskId' is set
        if (diskId == null) {
            throw new ApiException("Missing the required parameter 'diskId' when calling deletePartitions(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePartitionsCall(diskId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete cache partitions of disk
     * @param diskId disk id (required)
     * @return DiskResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiskResp deletePartitions(Long diskId) throws ApiException {
        ApiResponse<DiskResp> resp = deletePartitionsWithHttpInfo(diskId);
        return resp.getData();
    }

    /**
     * 
     * delete cache partitions of disk
     * @param diskId disk id (required)
     * @return ApiResponse&lt;DiskResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiskResp> deletePartitionsWithHttpInfo(Long diskId) throws ApiException {
        com.squareup.okhttp.Call call = deletePartitionsValidateBeforeCall(diskId, null, null);
        Type localVarReturnType = new TypeToken<DiskResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete cache partitions of disk
     * @param diskId disk id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePartitionsAsync(Long diskId, final ApiCallback<DiskResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePartitionsValidateBeforeCall(diskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiskResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDisk
     * @param diskId disk id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiskCall(Long diskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/disks/{disk_id}"
            .replaceAll("\\{" + "disk_id" + "\\}", apiClient.escapeString(diskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiskValidateBeforeCall(Long diskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'diskId' is set
        if (diskId == null) {
            throw new ApiException("Missing the required parameter 'diskId' when calling getDisk(Async)");
        }
        
        com.squareup.okhttp.Call call = getDiskCall(diskId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get a disk
     * @param diskId disk id (required)
     * @return DiskResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiskResp getDisk(Long diskId) throws ApiException {
        ApiResponse<DiskResp> resp = getDiskWithHttpInfo(diskId);
        return resp.getData();
    }

    /**
     * 
     * Get a disk
     * @param diskId disk id (required)
     * @return ApiResponse&lt;DiskResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiskResp> getDiskWithHttpInfo(Long diskId) throws ApiException {
        com.squareup.okhttp.Call call = getDiskValidateBeforeCall(diskId, null, null);
        Type localVarReturnType = new TypeToken<DiskResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a disk
     * @param diskId disk id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiskAsync(Long diskId, final ApiCallback<DiskResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiskValidateBeforeCall(diskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiskResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiskSamples
     * @param diskId disk id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiskSamplesCall(Long diskId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/disks/{disk_id}/samples"
            .replaceAll("\\{" + "disk_id" + "\\}", apiClient.escapeString(diskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiskSamplesValidateBeforeCall(Long diskId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'diskId' is set
        if (diskId == null) {
            throw new ApiException("Missing the required parameter 'diskId' when calling getDiskSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getDiskSamplesCall(diskId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a disk&#x27;s samples
     * @param diskId disk id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return DiskSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiskSamplesResp getDiskSamples(Long diskId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<DiskSamplesResp> resp = getDiskSamplesWithHttpInfo(diskId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get a disk&#x27;s samples
     * @param diskId disk id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;DiskSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiskSamplesResp> getDiskSamplesWithHttpInfo(Long diskId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getDiskSamplesValidateBeforeCall(diskId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<DiskSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a disk&#x27;s samples
     * @param diskId disk id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiskSamplesAsync(Long diskId, String durationBegin, String durationEnd, String period, final ApiCallback<DiskSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiskSamplesValidateBeforeCall(diskId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiskSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDisks
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param hostId host id (optional)
     * @param clusterId cluster id (optional)
     * @param rebuildDiskId disk id to order disk by size and type for rebuilding disk (optional)
     * @param isCache filter cache disk, deprecated, use &#x60;usage&#x3D;partition&#x60; instead (optional)
     * @param diskType filter disk type (optional)
     * @param usage filter disk usage (optional)
     * @param used filter used (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param device device name of disk (optional)
     * @param status disk status (optional)
     * @param ids disk comma separate ids (optional)
     * @param hostIds disk.host comma separate ids (optional)
     * @param orderBy sort param without search, split with comma, e.g. -host.name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDisksCall(Long limit, Long offset, Long hostId, String clusterId, Long rebuildDiskId, Boolean isCache, String diskType, String usage, Boolean used, String q, String sort, String device, String status, String ids, String hostIds, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/disks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (hostId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("host_id", hostId));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (rebuildDiskId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rebuild_disk_id", rebuildDiskId));
        if (isCache != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_cache", isCache));
        if (diskType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disk_type", diskType));
        if (usage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("usage", usage));
        if (used != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("used", used));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (device != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("device", device));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));
        if (hostIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("host_ids", hostIds));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDisksValidateBeforeCall(Long limit, Long offset, Long hostId, String clusterId, Long rebuildDiskId, Boolean isCache, String diskType, String usage, Boolean used, String q, String sort, String device, String status, String ids, String hostIds, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDisksCall(limit, offset, hostId, clusterId, rebuildDiskId, isCache, diskType, usage, used, q, sort, device, status, ids, hostIds, orderBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List all pyhsical disks in the system
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param hostId host id (optional)
     * @param clusterId cluster id (optional)
     * @param rebuildDiskId disk id to order disk by size and type for rebuilding disk (optional)
     * @param isCache filter cache disk, deprecated, use &#x60;usage&#x3D;partition&#x60; instead (optional)
     * @param diskType filter disk type (optional)
     * @param usage filter disk usage (optional)
     * @param used filter used (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param device device name of disk (optional)
     * @param status disk status (optional)
     * @param ids disk comma separate ids (optional)
     * @param hostIds disk.host comma separate ids (optional)
     * @param orderBy sort param without search, split with comma, e.g. -host.name (optional)
     * @return DisksResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DisksResp listDisks(Long limit, Long offset, Long hostId, String clusterId, Long rebuildDiskId, Boolean isCache, String diskType, String usage, Boolean used, String q, String sort, String device, String status, String ids, String hostIds, String orderBy) throws ApiException {
        ApiResponse<DisksResp> resp = listDisksWithHttpInfo(limit, offset, hostId, clusterId, rebuildDiskId, isCache, diskType, usage, used, q, sort, device, status, ids, hostIds, orderBy);
        return resp.getData();
    }

    /**
     * 
     * List all pyhsical disks in the system
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param hostId host id (optional)
     * @param clusterId cluster id (optional)
     * @param rebuildDiskId disk id to order disk by size and type for rebuilding disk (optional)
     * @param isCache filter cache disk, deprecated, use &#x60;usage&#x3D;partition&#x60; instead (optional)
     * @param diskType filter disk type (optional)
     * @param usage filter disk usage (optional)
     * @param used filter used (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param device device name of disk (optional)
     * @param status disk status (optional)
     * @param ids disk comma separate ids (optional)
     * @param hostIds disk.host comma separate ids (optional)
     * @param orderBy sort param without search, split with comma, e.g. -host.name (optional)
     * @return ApiResponse&lt;DisksResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DisksResp> listDisksWithHttpInfo(Long limit, Long offset, Long hostId, String clusterId, Long rebuildDiskId, Boolean isCache, String diskType, String usage, Boolean used, String q, String sort, String device, String status, String ids, String hostIds, String orderBy) throws ApiException {
        com.squareup.okhttp.Call call = listDisksValidateBeforeCall(limit, offset, hostId, clusterId, rebuildDiskId, isCache, diskType, usage, used, q, sort, device, status, ids, hostIds, orderBy, null, null);
        Type localVarReturnType = new TypeToken<DisksResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all pyhsical disks in the system
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param hostId host id (optional)
     * @param clusterId cluster id (optional)
     * @param rebuildDiskId disk id to order disk by size and type for rebuilding disk (optional)
     * @param isCache filter cache disk, deprecated, use &#x60;usage&#x3D;partition&#x60; instead (optional)
     * @param diskType filter disk type (optional)
     * @param usage filter disk usage (optional)
     * @param used filter used (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param device device name of disk (optional)
     * @param status disk status (optional)
     * @param ids disk comma separate ids (optional)
     * @param hostIds disk.host comma separate ids (optional)
     * @param orderBy sort param without search, split with comma, e.g. -host.name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDisksAsync(Long limit, Long offset, Long hostId, String clusterId, Long rebuildDiskId, Boolean isCache, String diskType, String usage, Boolean used, String q, String sort, String device, String status, String ids, String hostIds, String orderBy, final ApiCallback<DisksResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDisksValidateBeforeCall(limit, offset, hostId, clusterId, rebuildDiskId, isCache, diskType, usage, used, q, sort, device, status, ids, hostIds, orderBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DisksResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rebuildDisk
     * @param body new disk info (required)
     * @param diskId disk id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rebuildDiskCall(DiskRebuildReq body, Long diskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/disks/{disk_id}:rebuild"
            .replaceAll("\\{" + "disk_id" + "\\}", apiClient.escapeString(diskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rebuildDiskValidateBeforeCall(DiskRebuildReq body, Long diskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rebuildDisk(Async)");
        }
        // verify the required parameter 'diskId' is set
        if (diskId == null) {
            throw new ApiException("Missing the required parameter 'diskId' when calling rebuildDisk(Async)");
        }
        
        com.squareup.okhttp.Call call = rebuildDiskCall(body, diskId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * rebuild disk with a new disk
     * @param body new disk info (required)
     * @param diskId disk id (required)
     * @return DiskResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiskResp rebuildDisk(DiskRebuildReq body, Long diskId) throws ApiException {
        ApiResponse<DiskResp> resp = rebuildDiskWithHttpInfo(body, diskId);
        return resp.getData();
    }

    /**
     * 
     * rebuild disk with a new disk
     * @param body new disk info (required)
     * @param diskId disk id (required)
     * @return ApiResponse&lt;DiskResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiskResp> rebuildDiskWithHttpInfo(DiskRebuildReq body, Long diskId) throws ApiException {
        com.squareup.okhttp.Call call = rebuildDiskValidateBeforeCall(body, diskId, null, null);
        Type localVarReturnType = new TypeToken<DiskResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * rebuild disk with a new disk
     * @param body new disk info (required)
     * @param diskId disk id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rebuildDiskAsync(DiskRebuildReq body, Long diskId, final ApiCallback<DiskResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rebuildDiskValidateBeforeCall(body, diskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiskResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDisk
     * @param body disk info (required)
     * @param diskId disk id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDiskCall(DiskUpdateReq body, Long diskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/disks/{disk_id}"
            .replaceAll("\\{" + "disk_id" + "\\}", apiClient.escapeString(diskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDiskValidateBeforeCall(DiskUpdateReq body, Long diskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDisk(Async)");
        }
        // verify the required parameter 'diskId' is set
        if (diskId == null) {
            throw new ApiException("Missing the required parameter 'diskId' when calling updateDisk(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDiskCall(body, diskId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update disk info
     * @param body disk info (required)
     * @param diskId disk id (required)
     * @return DiskResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiskResp updateDisk(DiskUpdateReq body, Long diskId) throws ApiException {
        ApiResponse<DiskResp> resp = updateDiskWithHttpInfo(body, diskId);
        return resp.getData();
    }

    /**
     * 
     * update disk info
     * @param body disk info (required)
     * @param diskId disk id (required)
     * @return ApiResponse&lt;DiskResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiskResp> updateDiskWithHttpInfo(DiskUpdateReq body, Long diskId) throws ApiException {
        com.squareup.okhttp.Call call = updateDiskValidateBeforeCall(body, diskId, null, null);
        Type localVarReturnType = new TypeToken<DiskResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update disk info
     * @param body disk info (required)
     * @param diskId disk id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDiskAsync(DiskUpdateReq body, Long diskId, final ApiCallback<DiskResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDiskValidateBeforeCall(body, diskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiskResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
