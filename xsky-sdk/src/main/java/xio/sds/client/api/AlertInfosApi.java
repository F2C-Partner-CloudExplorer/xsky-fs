/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.AlertInfoResp;
import xio.sds.client.model.AlertInfosResp;
import xio.sds.client.model.AlertStatsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertInfosApi {
    private ApiClient apiClient;

    public AlertInfosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertInfosApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ackAlertInfo
     * @param alertInfoId the id of alert info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ackAlertInfoCall(Long alertInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-infos/{alert_info_id}:ack"
            .replaceAll("\\{" + "alert_info_id" + "\\}", apiClient.escapeString(alertInfoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ackAlertInfoValidateBeforeCall(Long alertInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertInfoId' is set
        if (alertInfoId == null) {
            throw new ApiException("Missing the required parameter 'alertInfoId' when calling ackAlertInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = ackAlertInfoCall(alertInfoId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set the acked status of alert info
     * @param alertInfoId the id of alert info (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ackAlertInfo(Long alertInfoId) throws ApiException {
        ackAlertInfoWithHttpInfo(alertInfoId);
    }

    /**
     * 
     * set the acked status of alert info
     * @param alertInfoId the id of alert info (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ackAlertInfoWithHttpInfo(Long alertInfoId) throws ApiException {
        com.squareup.okhttp.Call call = ackAlertInfoValidateBeforeCall(alertInfoId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * set the acked status of alert info
     * @param alertInfoId the id of alert info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ackAlertInfoAsync(Long alertInfoId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ackAlertInfoValidateBeforeCall(alertInfoId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for countAlertInfos
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call countAlertInfosCall(Boolean acked, Boolean resolved, String resourceType, Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-infos/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acked", acked));
        if (resolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolved", resolved));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (resourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_id", resourceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call countAlertInfosValidateBeforeCall(Boolean acked, Boolean resolved, String resourceType, Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = countAlertInfosCall(acked, resolved, resourceType, resourceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * count all alert infos
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @return AlertStatsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertStatsResp countAlertInfos(Boolean acked, Boolean resolved, String resourceType, Long resourceId) throws ApiException {
        ApiResponse<AlertStatsResp> resp = countAlertInfosWithHttpInfo(acked, resolved, resourceType, resourceId);
        return resp.getData();
    }

    /**
     * 
     * count all alert infos
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @return ApiResponse&lt;AlertStatsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertStatsResp> countAlertInfosWithHttpInfo(Boolean acked, Boolean resolved, String resourceType, Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = countAlertInfosValidateBeforeCall(acked, resolved, resourceType, resourceId, null, null);
        Type localVarReturnType = new TypeToken<AlertStatsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * count all alert infos
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call countAlertInfosAsync(Boolean acked, Boolean resolved, String resourceType, Long resourceId, final ApiCallback<AlertStatsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = countAlertInfosValidateBeforeCall(acked, resolved, resourceType, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertStatsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAlertInfo
     * @param alertInfoId the id of alert info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAlertInfoCall(Long alertInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-infos/{alert_info_id}"
            .replaceAll("\\{" + "alert_info_id" + "\\}", apiClient.escapeString(alertInfoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAlertInfoValidateBeforeCall(Long alertInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertInfoId' is set
        if (alertInfoId == null) {
            throw new ApiException("Missing the required parameter 'alertInfoId' when calling deleteAlertInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAlertInfoCall(alertInfoId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete an alert info
     * @param alertInfoId the id of alert info (required)
     * @return AlertInfoResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertInfoResp deleteAlertInfo(Long alertInfoId) throws ApiException {
        ApiResponse<AlertInfoResp> resp = deleteAlertInfoWithHttpInfo(alertInfoId);
        return resp.getData();
    }

    /**
     * 
     * delete an alert info
     * @param alertInfoId the id of alert info (required)
     * @return ApiResponse&lt;AlertInfoResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertInfoResp> deleteAlertInfoWithHttpInfo(Long alertInfoId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAlertInfoValidateBeforeCall(alertInfoId, null, null);
        Type localVarReturnType = new TypeToken<AlertInfoResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete an alert info
     * @param alertInfoId the id of alert info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAlertInfoAsync(Long alertInfoId, final ApiCallback<AlertInfoResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAlertInfoValidateBeforeCall(alertInfoId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertInfoResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAlertInfo
     * @param alertInfoId alert info id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlertInfoCall(Long alertInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-infos/{alert_info_id}"
            .replaceAll("\\{" + "alert_info_id" + "\\}", apiClient.escapeString(alertInfoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlertInfoValidateBeforeCall(Long alertInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertInfoId' is set
        if (alertInfoId == null) {
            throw new ApiException("Missing the required parameter 'alertInfoId' when calling getAlertInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getAlertInfoCall(alertInfoId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get an alert info
     * @param alertInfoId alert info id (required)
     * @return AlertInfoResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertInfoResp getAlertInfo(Long alertInfoId) throws ApiException {
        ApiResponse<AlertInfoResp> resp = getAlertInfoWithHttpInfo(alertInfoId);
        return resp.getData();
    }

    /**
     * 
     * get an alert info
     * @param alertInfoId alert info id (required)
     * @return ApiResponse&lt;AlertInfoResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertInfoResp> getAlertInfoWithHttpInfo(Long alertInfoId) throws ApiException {
        com.squareup.okhttp.Call call = getAlertInfoValidateBeforeCall(alertInfoId, null, null);
        Type localVarReturnType = new TypeToken<AlertInfoResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get an alert info
     * @param alertInfoId alert info id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlertInfoAsync(Long alertInfoId, final ApiCallback<AlertInfoResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlertInfoValidateBeforeCall(alertInfoId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertInfoResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAlertInfosReport
     * @param level level of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @param createAfter create_after timestamp of alert info (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlertInfosReportCall(String level, String resourceType, Long resourceId, String createAfter, Boolean acked, Boolean resolved, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-infos/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (resourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_id", resourceId));
        if (createAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("create_after", createAfter));
        if (acked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acked", acked));
        if (resolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolved", resolved));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlertInfosReportValidateBeforeCall(String level, String resourceType, Long resourceId, String createAfter, Boolean acked, Boolean resolved, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAlertInfosReportCall(level, resourceType, resourceId, createAfter, acked, resolved, group, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get report of alert infos
     * @param level level of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @param createAfter create_after timestamp of alert info (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAlertInfosReport(String level, String resourceType, Long resourceId, String createAfter, Boolean acked, Boolean resolved, String group) throws ApiException {
        getAlertInfosReportWithHttpInfo(level, resourceType, resourceId, createAfter, acked, resolved, group);
    }

    /**
     * 
     * Get report of alert infos
     * @param level level of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @param createAfter create_after timestamp of alert info (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAlertInfosReportWithHttpInfo(String level, String resourceType, Long resourceId, String createAfter, Boolean acked, Boolean resolved, String group) throws ApiException {
        com.squareup.okhttp.Call call = getAlertInfosReportValidateBeforeCall(level, resourceType, resourceId, createAfter, acked, resolved, group, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Get report of alert infos
     * @param level level of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @param createAfter create_after timestamp of alert info (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlertInfosReportAsync(String level, String resourceType, Long resourceId, String createAfter, Boolean acked, Boolean resolved, String group, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlertInfosReportValidateBeforeCall(level, resourceType, resourceId, createAfter, acked, resolved, group, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listAlertInfos
     * @param qMust must query param of search (optional)
     * @param q should query param of search (optional)
     * @param relatedResource should query param of search (optional)
     * @param sort sort param of search (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param level level of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @param createAfter create_after timestamp of alert info (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param excludeCluster filter to exclude cluster of alert info (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAlertInfosCall(String qMust, String q, String relatedResource, String sort, Long limit, Long offset, String level, String resourceType, Long resourceId, String createAfter, Boolean acked, Boolean resolved, String group, Boolean excludeCluster, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-infos/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (qMust != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q_must", qMust));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (relatedResource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("related_resource", relatedResource));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (resourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_id", resourceId));
        if (createAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("create_after", createAfter));
        if (acked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acked", acked));
        if (resolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolved", resolved));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (excludeCluster != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_cluster", excludeCluster));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAlertInfosValidateBeforeCall(String qMust, String q, String relatedResource, String sort, Long limit, Long offset, String level, String resourceType, Long resourceId, String createAfter, Boolean acked, Boolean resolved, String group, Boolean excludeCluster, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listAlertInfosCall(qMust, q, relatedResource, sort, limit, offset, level, resourceType, resourceId, createAfter, acked, resolved, group, excludeCluster, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List all alert infos
     * @param qMust must query param of search (optional)
     * @param q should query param of search (optional)
     * @param relatedResource should query param of search (optional)
     * @param sort sort param of search (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param level level of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @param createAfter create_after timestamp of alert info (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param excludeCluster filter to exclude cluster of alert info (optional)
     * @return AlertInfosResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertInfosResp listAlertInfos(String qMust, String q, String relatedResource, String sort, Long limit, Long offset, String level, String resourceType, Long resourceId, String createAfter, Boolean acked, Boolean resolved, String group, Boolean excludeCluster) throws ApiException {
        ApiResponse<AlertInfosResp> resp = listAlertInfosWithHttpInfo(qMust, q, relatedResource, sort, limit, offset, level, resourceType, resourceId, createAfter, acked, resolved, group, excludeCluster);
        return resp.getData();
    }

    /**
     * 
     * List all alert infos
     * @param qMust must query param of search (optional)
     * @param q should query param of search (optional)
     * @param relatedResource should query param of search (optional)
     * @param sort sort param of search (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param level level of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @param createAfter create_after timestamp of alert info (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param excludeCluster filter to exclude cluster of alert info (optional)
     * @return ApiResponse&lt;AlertInfosResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertInfosResp> listAlertInfosWithHttpInfo(String qMust, String q, String relatedResource, String sort, Long limit, Long offset, String level, String resourceType, Long resourceId, String createAfter, Boolean acked, Boolean resolved, String group, Boolean excludeCluster) throws ApiException {
        com.squareup.okhttp.Call call = listAlertInfosValidateBeforeCall(qMust, q, relatedResource, sort, limit, offset, level, resourceType, resourceId, createAfter, acked, resolved, group, excludeCluster, null, null);
        Type localVarReturnType = new TypeToken<AlertInfosResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alert infos
     * @param qMust must query param of search (optional)
     * @param q should query param of search (optional)
     * @param relatedResource should query param of search (optional)
     * @param sort sort param of search (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param level level of alert info (optional)
     * @param resourceType resource type of alert info (optional)
     * @param resourceId resource id of alert info (optional)
     * @param createAfter create_after timestamp of alert info (optional)
     * @param acked acked of alert info (optional)
     * @param resolved resolved or not of alert info (optional)
     * @param group group of alert info (optional)
     * @param excludeCluster filter to exclude cluster of alert info (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAlertInfosAsync(String qMust, String q, String relatedResource, String sort, Long limit, Long offset, String level, String resourceType, Long resourceId, String createAfter, Boolean acked, Boolean resolved, String group, Boolean excludeCluster, final ApiCallback<AlertInfosResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAlertInfosValidateBeforeCall(qMust, q, relatedResource, sort, limit, offset, level, resourceType, resourceId, createAfter, acked, resolved, group, excludeCluster, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertInfosResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resolveAlertInfo
     * @param alertInfoId the id of alert info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resolveAlertInfoCall(Long alertInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-infos/{alert_info_id}:resolve"
            .replaceAll("\\{" + "alert_info_id" + "\\}", apiClient.escapeString(alertInfoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resolveAlertInfoValidateBeforeCall(Long alertInfoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alertInfoId' is set
        if (alertInfoId == null) {
            throw new ApiException("Missing the required parameter 'alertInfoId' when calling resolveAlertInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = resolveAlertInfoCall(alertInfoId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set the resolved status of alert info
     * @param alertInfoId the id of alert info (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resolveAlertInfo(Long alertInfoId) throws ApiException {
        resolveAlertInfoWithHttpInfo(alertInfoId);
    }

    /**
     * 
     * set the resolved status of alert info
     * @param alertInfoId the id of alert info (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resolveAlertInfoWithHttpInfo(Long alertInfoId) throws ApiException {
        com.squareup.okhttp.Call call = resolveAlertInfoValidateBeforeCall(alertInfoId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * set the resolved status of alert info
     * @param alertInfoId the id of alert info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resolveAlertInfoAsync(Long alertInfoId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resolveAlertInfoValidateBeforeCall(alertInfoId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
