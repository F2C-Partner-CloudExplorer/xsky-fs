/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsQuotaCreateReq;
import xio.sds.client.model.DfsQuotaOverviewResp;
import xio.sds.client.model.DfsQuotaPathValidateResp;
import xio.sds.client.model.DfsQuotaPredictionsResp;
import xio.sds.client.model.DfsQuotaResp;
import xio.sds.client.model.DfsQuotaSamplesResp;
import xio.sds.client.model.DfsQuotaUpdateReq;
import xio.sds.client.model.DfsQuotasResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsQuotasApi {
    private ApiClient apiClient;

    public DfsQuotasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsQuotasApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDfsQuota
     * @param body quota info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsQuotaCall(DfsQuotaCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-quotas/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsQuotaValidateBeforeCall(DfsQuotaCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsQuota(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsQuotaCall(body, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dfs quota
     * @param body quota info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return DfsQuotaResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsQuotaResp createDfsQuota(DfsQuotaCreateReq body, Boolean allowPathCreate) throws ApiException {
        ApiResponse<DfsQuotaResp> resp = createDfsQuotaWithHttpInfo(body, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * Create dfs quota
     * @param body quota info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return ApiResponse&lt;DfsQuotaResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsQuotaResp> createDfsQuotaWithHttpInfo(DfsQuotaCreateReq body, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = createDfsQuotaValidateBeforeCall(body, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<DfsQuotaResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dfs quota
     * @param body quota info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsQuotaAsync(DfsQuotaCreateReq body, Boolean allowPathCreate, final ApiCallback<DfsQuotaResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsQuotaValidateBeforeCall(body, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsQuotaResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsQuota
     * @param dfsQuotaId dfs quota id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsQuotaCall(Long dfsQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-quotas/{dfs_quota_id}"
            .replaceAll("\\{" + "dfs_quota_id" + "\\}", apiClient.escapeString(dfsQuotaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsQuotaValidateBeforeCall(Long dfsQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsQuotaId' is set
        if (dfsQuotaId == null) {
            throw new ApiException("Missing the required parameter 'dfsQuotaId' when calling deleteDfsQuota(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsQuotaCall(dfsQuotaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs quota
     * @param dfsQuotaId dfs quota id (required)
     * @return DfsQuotaResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsQuotaResp deleteDfsQuota(Long dfsQuotaId) throws ApiException {
        ApiResponse<DfsQuotaResp> resp = deleteDfsQuotaWithHttpInfo(dfsQuotaId);
        return resp.getData();
    }

    /**
     * 
     * delete dfs quota
     * @param dfsQuotaId dfs quota id (required)
     * @return ApiResponse&lt;DfsQuotaResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsQuotaResp> deleteDfsQuotaWithHttpInfo(Long dfsQuotaId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsQuotaValidateBeforeCall(dfsQuotaId, null, null);
        Type localVarReturnType = new TypeToken<DfsQuotaResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs quota
     * @param dfsQuotaId dfs quota id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsQuotaAsync(Long dfsQuotaId, final ApiCallback<DfsQuotaResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsQuotaValidateBeforeCall(dfsQuotaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsQuotaResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dfsQuotaOverview
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dfsQuotaOverviewCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-quotas/overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dfsQuotaOverviewValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = dfsQuotaOverviewCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * dfs quota overview about type and status
     * @return DfsQuotaOverviewResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsQuotaOverviewResp dfsQuotaOverview() throws ApiException {
        ApiResponse<DfsQuotaOverviewResp> resp = dfsQuotaOverviewWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * dfs quota overview about type and status
     * @return ApiResponse&lt;DfsQuotaOverviewResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsQuotaOverviewResp> dfsQuotaOverviewWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = dfsQuotaOverviewValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<DfsQuotaOverviewResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * dfs quota overview about type and status
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dfsQuotaOverviewAsync(final ApiCallback<DfsQuotaOverviewResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dfsQuotaOverviewValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsQuotaOverviewResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsQuota
     * @param dfsQuotaId dfs quota id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsQuotaCall(Long dfsQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-quotas/{dfs_quota_id}"
            .replaceAll("\\{" + "dfs_quota_id" + "\\}", apiClient.escapeString(dfsQuotaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsQuotaValidateBeforeCall(Long dfsQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsQuotaId' is set
        if (dfsQuotaId == null) {
            throw new ApiException("Missing the required parameter 'dfsQuotaId' when calling getDfsQuota(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsQuotaCall(dfsQuotaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs quota
     * @param dfsQuotaId dfs quota id (required)
     * @return DfsQuotaResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsQuotaResp getDfsQuota(Long dfsQuotaId) throws ApiException {
        ApiResponse<DfsQuotaResp> resp = getDfsQuotaWithHttpInfo(dfsQuotaId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs quota
     * @param dfsQuotaId dfs quota id (required)
     * @return ApiResponse&lt;DfsQuotaResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsQuotaResp> getDfsQuotaWithHttpInfo(Long dfsQuotaId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsQuotaValidateBeforeCall(dfsQuotaId, null, null);
        Type localVarReturnType = new TypeToken<DfsQuotaResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs quota
     * @param dfsQuotaId dfs quota id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsQuotaAsync(Long dfsQuotaId, final ApiCallback<DfsQuotaResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsQuotaValidateBeforeCall(dfsQuotaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsQuotaResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsQuotaPredictions
     * @param dfsQuotaId dfs quota id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsQuotaPredictionsCall(Long dfsQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-quotas/{dfs_quota_id}/predictions"
            .replaceAll("\\{" + "dfs_quota_id" + "\\}", apiClient.escapeString(dfsQuotaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsQuotaPredictionsValidateBeforeCall(Long dfsQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsQuotaId' is set
        if (dfsQuotaId == null) {
            throw new ApiException("Missing the required parameter 'dfsQuotaId' when calling getDfsQuotaPredictions(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsQuotaPredictionsCall(dfsQuotaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a quota&#x27;s prediction
     * @param dfsQuotaId dfs quota id (required)
     * @return DfsQuotaPredictionsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsQuotaPredictionsResp getDfsQuotaPredictions(Long dfsQuotaId) throws ApiException {
        ApiResponse<DfsQuotaPredictionsResp> resp = getDfsQuotaPredictionsWithHttpInfo(dfsQuotaId);
        return resp.getData();
    }

    /**
     * 
     * get a quota&#x27;s prediction
     * @param dfsQuotaId dfs quota id (required)
     * @return ApiResponse&lt;DfsQuotaPredictionsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsQuotaPredictionsResp> getDfsQuotaPredictionsWithHttpInfo(Long dfsQuotaId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsQuotaPredictionsValidateBeforeCall(dfsQuotaId, null, null);
        Type localVarReturnType = new TypeToken<DfsQuotaPredictionsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a quota&#x27;s prediction
     * @param dfsQuotaId dfs quota id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsQuotaPredictionsAsync(Long dfsQuotaId, final ApiCallback<DfsQuotaPredictionsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsQuotaPredictionsValidateBeforeCall(dfsQuotaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsQuotaPredictionsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsQuotaSamples
     * @param dfsQuotaId dfs quota id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsQuotaSamplesCall(Long dfsQuotaId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-quotas/{dfs_quota_id}/samples"
            .replaceAll("\\{" + "dfs_quota_id" + "\\}", apiClient.escapeString(dfsQuotaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsQuotaSamplesValidateBeforeCall(Long dfsQuotaId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsQuotaId' is set
        if (dfsQuotaId == null) {
            throw new ApiException("Missing the required parameter 'dfsQuotaId' when calling getDfsQuotaSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsQuotaSamplesCall(dfsQuotaId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a dfs quota&#x27;s samples
     * @param dfsQuotaId dfs quota id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return DfsQuotaSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsQuotaSamplesResp getDfsQuotaSamples(Long dfsQuotaId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<DfsQuotaSamplesResp> resp = getDfsQuotaSamplesWithHttpInfo(dfsQuotaId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get a dfs quota&#x27;s samples
     * @param dfsQuotaId dfs quota id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;DfsQuotaSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsQuotaSamplesResp> getDfsQuotaSamplesWithHttpInfo(Long dfsQuotaId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getDfsQuotaSamplesValidateBeforeCall(dfsQuotaId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<DfsQuotaSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a dfs quota&#x27;s samples
     * @param dfsQuotaId dfs quota id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsQuotaSamplesAsync(Long dfsQuotaId, String durationBegin, String durationEnd, String period, final ApiCallback<DfsQuotaSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsQuotaSamplesValidateBeforeCall(dfsQuotaId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsQuotaSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsQuotas
     * @param path dfs quota path (optional)
     * @param type dfs quota type (optional)
     * @param domainUserName dfs quota domain user name (optional)
     * @param domainUserGroupName dfs quota domain user group name (optional)
     * @param fsUserId fs user id (optional)
     * @param fsUserGroupId fs user group id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsQuotasCall(String path, String type, String domainUserName, String domainUserGroupName, Long fsUserId, Long fsUserGroupId, Long limit, Long offset, String q, String sort, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-quotas/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (domainUserName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domain_user_name", domainUserName));
        if (domainUserGroupName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domain_user_group_name", domainUserGroupName));
        if (fsUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fs_user_id", fsUserId));
        if (fsUserGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fs_user_group_id", fsUserGroupId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsQuotasValidateBeforeCall(String path, String type, String domainUserName, String domainUserGroupName, Long fsUserId, Long fsUserGroupId, Long limit, Long offset, String q, String sort, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsQuotasCall(path, type, domainUserName, domainUserGroupName, fsUserId, fsUserGroupId, limit, offset, q, sort, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs quotas
     * @param path dfs quota path (optional)
     * @param type dfs quota type (optional)
     * @param domainUserName dfs quota domain user name (optional)
     * @param domainUserGroupName dfs quota domain user group name (optional)
     * @param fsUserId fs user id (optional)
     * @param fsUserGroupId fs user group id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @return DfsQuotasResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsQuotasResp listDfsQuotas(String path, String type, String domainUserName, String domainUserGroupName, Long fsUserId, Long fsUserGroupId, Long limit, Long offset, String q, String sort, String clusterId) throws ApiException {
        ApiResponse<DfsQuotasResp> resp = listDfsQuotasWithHttpInfo(path, type, domainUserName, domainUserGroupName, fsUserId, fsUserGroupId, limit, offset, q, sort, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List dfs quotas
     * @param path dfs quota path (optional)
     * @param type dfs quota type (optional)
     * @param domainUserName dfs quota domain user name (optional)
     * @param domainUserGroupName dfs quota domain user group name (optional)
     * @param fsUserId fs user id (optional)
     * @param fsUserGroupId fs user group id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;DfsQuotasResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsQuotasResp> listDfsQuotasWithHttpInfo(String path, String type, String domainUserName, String domainUserGroupName, Long fsUserId, Long fsUserGroupId, Long limit, Long offset, String q, String sort, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listDfsQuotasValidateBeforeCall(path, type, domainUserName, domainUserGroupName, fsUserId, fsUserGroupId, limit, offset, q, sort, clusterId, null, null);
        Type localVarReturnType = new TypeToken<DfsQuotasResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs quotas
     * @param path dfs quota path (optional)
     * @param type dfs quota type (optional)
     * @param domainUserName dfs quota domain user name (optional)
     * @param domainUserGroupName dfs quota domain user group name (optional)
     * @param fsUserId fs user id (optional)
     * @param fsUserGroupId fs user group id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsQuotasAsync(String path, String type, String domainUserName, String domainUserGroupName, Long fsUserId, Long fsUserGroupId, Long limit, Long offset, String q, String sort, String clusterId, final ApiCallback<DfsQuotasResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsQuotasValidateBeforeCall(path, type, domainUserName, domainUserGroupName, fsUserId, fsUserGroupId, limit, offset, q, sort, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsQuotasResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pathValidator
     * @param dfsRootfsId dfs rootfs id (required)
     * @param path dfs quota path (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pathValidatorCall(Long dfsRootfsId, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-quotas/path-validator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dfsRootfsId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_rootfs_id", dfsRootfsId));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pathValidatorValidateBeforeCall(Long dfsRootfsId, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsRootfsId' is set
        if (dfsRootfsId == null) {
            throw new ApiException("Missing the required parameter 'dfsRootfsId' when calling pathValidator(Async)");
        }
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling pathValidator(Async)");
        }
        
        com.squareup.okhttp.Call call = pathValidatorCall(dfsRootfsId, path, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * validate a path for dfs quota
     * @param dfsRootfsId dfs rootfs id (required)
     * @param path dfs quota path (required)
     * @return DfsQuotaPathValidateResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsQuotaPathValidateResp pathValidator(Long dfsRootfsId, String path) throws ApiException {
        ApiResponse<DfsQuotaPathValidateResp> resp = pathValidatorWithHttpInfo(dfsRootfsId, path);
        return resp.getData();
    }

    /**
     * 
     * validate a path for dfs quota
     * @param dfsRootfsId dfs rootfs id (required)
     * @param path dfs quota path (required)
     * @return ApiResponse&lt;DfsQuotaPathValidateResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsQuotaPathValidateResp> pathValidatorWithHttpInfo(Long dfsRootfsId, String path) throws ApiException {
        com.squareup.okhttp.Call call = pathValidatorValidateBeforeCall(dfsRootfsId, path, null, null);
        Type localVarReturnType = new TypeToken<DfsQuotaPathValidateResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * validate a path for dfs quota
     * @param dfsRootfsId dfs rootfs id (required)
     * @param path dfs quota path (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pathValidatorAsync(Long dfsRootfsId, String path, final ApiCallback<DfsQuotaPathValidateResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pathValidatorValidateBeforeCall(dfsRootfsId, path, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsQuotaPathValidateResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsQuota
     * @param body dfs quota info (required)
     * @param dfsQuotaId quota id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsQuotaCall(DfsQuotaUpdateReq body, Long dfsQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-quotas/{dfs_quota_id}"
            .replaceAll("\\{" + "dfs_quota_id" + "\\}", apiClient.escapeString(dfsQuotaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsQuotaValidateBeforeCall(DfsQuotaUpdateReq body, Long dfsQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsQuota(Async)");
        }
        // verify the required parameter 'dfsQuotaId' is set
        if (dfsQuotaId == null) {
            throw new ApiException("Missing the required parameter 'dfsQuotaId' when calling updateDfsQuota(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsQuotaCall(body, dfsQuotaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs quota
     * @param body dfs quota info (required)
     * @param dfsQuotaId quota id (required)
     * @return DfsQuotaResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsQuotaResp updateDfsQuota(DfsQuotaUpdateReq body, Long dfsQuotaId) throws ApiException {
        ApiResponse<DfsQuotaResp> resp = updateDfsQuotaWithHttpInfo(body, dfsQuotaId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs quota
     * @param body dfs quota info (required)
     * @param dfsQuotaId quota id (required)
     * @return ApiResponse&lt;DfsQuotaResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsQuotaResp> updateDfsQuotaWithHttpInfo(DfsQuotaUpdateReq body, Long dfsQuotaId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsQuotaValidateBeforeCall(body, dfsQuotaId, null, null);
        Type localVarReturnType = new TypeToken<DfsQuotaResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs quota
     * @param body dfs quota info (required)
     * @param dfsQuotaId quota id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsQuotaAsync(DfsQuotaUpdateReq body, Long dfsQuotaId, final ApiCallback<DfsQuotaResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsQuotaValidateBeforeCall(body, dfsQuotaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsQuotaResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
