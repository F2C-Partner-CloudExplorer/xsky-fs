/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.OSExternalStoragePlatformTypeCreateReq;
import xio.sds.client.model.OSExternalStoragePlatformTypeResp;
import xio.sds.client.model.OSExternalStoragePlatformTypesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OsExternalStoragePlatformTypesApi {
    private ApiClient apiClient;

    public OsExternalStoragePlatformTypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OsExternalStoragePlatformTypesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createOSExternalStoragePlatformType
     * @param body external storage platform type info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOSExternalStoragePlatformTypeCall(OSExternalStoragePlatformTypeCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-external-storage-platform-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOSExternalStoragePlatformTypeValidateBeforeCall(OSExternalStoragePlatformTypeCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOSExternalStoragePlatformType(Async)");
        }
        
        com.squareup.okhttp.Call call = createOSExternalStoragePlatformTypeCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create os external storage platform type
     * @param body external storage platform type info (required)
     * @param clusterId cluster id (optional)
     * @return OSExternalStoragePlatformTypeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSExternalStoragePlatformTypeResp createOSExternalStoragePlatformType(OSExternalStoragePlatformTypeCreateReq body, String clusterId) throws ApiException {
        ApiResponse<OSExternalStoragePlatformTypeResp> resp = createOSExternalStoragePlatformTypeWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create os external storage platform type
     * @param body external storage platform type info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;OSExternalStoragePlatformTypeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSExternalStoragePlatformTypeResp> createOSExternalStoragePlatformTypeWithHttpInfo(OSExternalStoragePlatformTypeCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createOSExternalStoragePlatformTypeValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<OSExternalStoragePlatformTypeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create os external storage platform type
     * @param body external storage platform type info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOSExternalStoragePlatformTypeAsync(OSExternalStoragePlatformTypeCreateReq body, String clusterId, final ApiCallback<OSExternalStoragePlatformTypeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOSExternalStoragePlatformTypeValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSExternalStoragePlatformTypeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOSExternalStoragePlatformType
     * @param externalStoragePlatformTypeId external storage platform type id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOSExternalStoragePlatformTypeCall(Long externalStoragePlatformTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-external-storage-platform-types/{external_storage_platform_type_id}"
            .replaceAll("\\{" + "external_storage_platform_type_id" + "\\}", apiClient.escapeString(externalStoragePlatformTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOSExternalStoragePlatformTypeValidateBeforeCall(Long externalStoragePlatformTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'externalStoragePlatformTypeId' is set
        if (externalStoragePlatformTypeId == null) {
            throw new ApiException("Missing the required parameter 'externalStoragePlatformTypeId' when calling getOSExternalStoragePlatformType(Async)");
        }
        
        com.squareup.okhttp.Call call = getOSExternalStoragePlatformTypeCall(externalStoragePlatformTypeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get an os external storage platform type info
     * @param externalStoragePlatformTypeId external storage platform type id (required)
     * @return OSExternalStoragePlatformTypeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSExternalStoragePlatformTypeResp getOSExternalStoragePlatformType(Long externalStoragePlatformTypeId) throws ApiException {
        ApiResponse<OSExternalStoragePlatformTypeResp> resp = getOSExternalStoragePlatformTypeWithHttpInfo(externalStoragePlatformTypeId);
        return resp.getData();
    }

    /**
     * 
     * Get an os external storage platform type info
     * @param externalStoragePlatformTypeId external storage platform type id (required)
     * @return ApiResponse&lt;OSExternalStoragePlatformTypeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSExternalStoragePlatformTypeResp> getOSExternalStoragePlatformTypeWithHttpInfo(Long externalStoragePlatformTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getOSExternalStoragePlatformTypeValidateBeforeCall(externalStoragePlatformTypeId, null, null);
        Type localVarReturnType = new TypeToken<OSExternalStoragePlatformTypeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an os external storage platform type info
     * @param externalStoragePlatformTypeId external storage platform type id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOSExternalStoragePlatformTypeAsync(Long externalStoragePlatformTypeId, final ApiCallback<OSExternalStoragePlatformTypeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOSExternalStoragePlatformTypeValidateBeforeCall(externalStoragePlatformTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSExternalStoragePlatformTypeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOSExternalStoragePlatformTypes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param platform platform (optional)
     * @param platformType platform type (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOSExternalStoragePlatformTypesCall(Long limit, Long offset, String platform, String platformType, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-external-storage-platform-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (platform != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("platform", platform));
        if (platformType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("platform_type", platformType));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOSExternalStoragePlatformTypesValidateBeforeCall(Long limit, Long offset, String platform, String platformType, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listOSExternalStoragePlatformTypesCall(limit, offset, platform, platformType, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List os external storage platform types
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param platform platform (optional)
     * @param platformType platform type (optional)
     * @param clusterId cluster id (optional)
     * @return OSExternalStoragePlatformTypesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSExternalStoragePlatformTypesResp listOSExternalStoragePlatformTypes(Long limit, Long offset, String platform, String platformType, String clusterId) throws ApiException {
        ApiResponse<OSExternalStoragePlatformTypesResp> resp = listOSExternalStoragePlatformTypesWithHttpInfo(limit, offset, platform, platformType, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List os external storage platform types
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param platform platform (optional)
     * @param platformType platform type (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;OSExternalStoragePlatformTypesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSExternalStoragePlatformTypesResp> listOSExternalStoragePlatformTypesWithHttpInfo(Long limit, Long offset, String platform, String platformType, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listOSExternalStoragePlatformTypesValidateBeforeCall(limit, offset, platform, platformType, clusterId, null, null);
        Type localVarReturnType = new TypeToken<OSExternalStoragePlatformTypesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List os external storage platform types
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param platform platform (optional)
     * @param platformType platform type (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOSExternalStoragePlatformTypesAsync(Long limit, Long offset, String platform, String platformType, String clusterId, final ApiCallback<OSExternalStoragePlatformTypesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOSExternalStoragePlatformTypesValidateBeforeCall(limit, offset, platform, platformType, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSExternalStoragePlatformTypesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
