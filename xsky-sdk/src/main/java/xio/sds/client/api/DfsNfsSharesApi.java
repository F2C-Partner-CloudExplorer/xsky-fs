/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsNFSShareAddACLsReq;
import xio.sds.client.model.DfsNFSShareCreateReq;
import xio.sds.client.model.DfsNFSShareRemoveACLsReq;
import xio.sds.client.model.DfsNFSShareResp;
import xio.sds.client.model.DfsNFSShareSetACLsReq;
import xio.sds.client.model.DfsNFSShareUpdateACLsReq;
import xio.sds.client.model.DfsNFSShareUpdateReq;
import xio.sds.client.model.DfsNFSSharesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsNfsSharesApi {
    private ApiClient apiClient;

    public DfsNfsSharesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsNfsSharesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDfsNFSShareACLs
     * @param body share acls info (required)
     * @param dfsNfsShareId dfs nfs shares id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDfsNFSShareACLsCall(DfsNFSShareAddACLsReq body, Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-nfs-shares/{dfs_nfs_share_id}:add-acls"
            .replaceAll("\\{" + "dfs_nfs_share_id" + "\\}", apiClient.escapeString(dfsNfsShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDfsNFSShareACLsValidateBeforeCall(DfsNFSShareAddACLsReq body, Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addDfsNFSShareACLs(Async)");
        }
        // verify the required parameter 'dfsNfsShareId' is set
        if (dfsNfsShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsNfsShareId' when calling addDfsNFSShareACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = addDfsNFSShareACLsCall(body, dfsNfsShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Add dfs nfs shares acls
     * @param body share acls info (required)
     * @param dfsNfsShareId dfs nfs shares id (required)
     * @return DfsNFSShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsNFSShareResp addDfsNFSShareACLs(DfsNFSShareAddACLsReq body, Long dfsNfsShareId) throws ApiException {
        ApiResponse<DfsNFSShareResp> resp = addDfsNFSShareACLsWithHttpInfo(body, dfsNfsShareId);
        return resp.getData();
    }

    /**
     * 
     * Add dfs nfs shares acls
     * @param body share acls info (required)
     * @param dfsNfsShareId dfs nfs shares id (required)
     * @return ApiResponse&lt;DfsNFSShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsNFSShareResp> addDfsNFSShareACLsWithHttpInfo(DfsNFSShareAddACLsReq body, Long dfsNfsShareId) throws ApiException {
        com.squareup.okhttp.Call call = addDfsNFSShareACLsValidateBeforeCall(body, dfsNfsShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add dfs nfs shares acls
     * @param body share acls info (required)
     * @param dfsNfsShareId dfs nfs shares id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDfsNFSShareACLsAsync(DfsNFSShareAddACLsReq body, Long dfsNfsShareId, final ApiCallback<DfsNFSShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDfsNFSShareACLsValidateBeforeCall(body, dfsNfsShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDfsNFSShare
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsNFSShareCall(DfsNFSShareCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-nfs-shares/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsNFSShareValidateBeforeCall(DfsNFSShareCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsNFSShare(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsNFSShareCall(body, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dfs nfs shares
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return DfsNFSShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsNFSShareResp createDfsNFSShare(DfsNFSShareCreateReq body, Boolean allowPathCreate) throws ApiException {
        ApiResponse<DfsNFSShareResp> resp = createDfsNFSShareWithHttpInfo(body, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * Create dfs nfs shares
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return ApiResponse&lt;DfsNFSShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsNFSShareResp> createDfsNFSShareWithHttpInfo(DfsNFSShareCreateReq body, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = createDfsNFSShareValidateBeforeCall(body, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dfs nfs shares
     * @param body share info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsNFSShareAsync(DfsNFSShareCreateReq body, Boolean allowPathCreate, final ApiCallback<DfsNFSShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsNFSShareValidateBeforeCall(body, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsNFSShare
     * @param dfsNfsShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsNFSShareCall(Long dfsNfsShareId, Boolean force, Boolean withDirectory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-nfs-shares/{dfs_nfs_share_id}"
            .replaceAll("\\{" + "dfs_nfs_share_id" + "\\}", apiClient.escapeString(dfsNfsShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (withDirectory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_directory", withDirectory));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsNFSShareValidateBeforeCall(Long dfsNfsShareId, Boolean force, Boolean withDirectory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsNfsShareId' is set
        if (dfsNfsShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsNfsShareId' when calling deleteDfsNFSShare(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsNFSShareCall(dfsNfsShareId, force, withDirectory, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete dfs nfs shares
     * @param dfsNfsShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @return DfsNFSShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsNFSShareResp deleteDfsNFSShare(Long dfsNfsShareId, Boolean force, Boolean withDirectory) throws ApiException {
        ApiResponse<DfsNFSShareResp> resp = deleteDfsNFSShareWithHttpInfo(dfsNfsShareId, force, withDirectory);
        return resp.getData();
    }

    /**
     * 
     * delete dfs nfs shares
     * @param dfsNfsShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @return ApiResponse&lt;DfsNFSShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsNFSShareResp> deleteDfsNFSShareWithHttpInfo(Long dfsNfsShareId, Boolean force, Boolean withDirectory) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsNFSShareValidateBeforeCall(dfsNfsShareId, force, withDirectory, null, null);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete dfs nfs shares
     * @param dfsNfsShareId share id (required)
     * @param force force delete or not (optional)
     * @param withDirectory also delete directory (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsNFSShareAsync(Long dfsNfsShareId, Boolean force, Boolean withDirectory, final ApiCallback<DfsNFSShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsNFSShareValidateBeforeCall(dfsNfsShareId, force, withDirectory, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsNFSShare
     * @param dfsNfsShareId share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsNFSShareCall(Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-nfs-shares/{dfs_nfs_share_id}"
            .replaceAll("\\{" + "dfs_nfs_share_id" + "\\}", apiClient.escapeString(dfsNfsShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsNFSShareValidateBeforeCall(Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsNfsShareId' is set
        if (dfsNfsShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsNfsShareId' when calling getDfsNFSShare(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsNFSShareCall(dfsNfsShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs nfs shares
     * @param dfsNfsShareId share id (required)
     * @return DfsNFSShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsNFSShareResp getDfsNFSShare(Long dfsNfsShareId) throws ApiException {
        ApiResponse<DfsNFSShareResp> resp = getDfsNFSShareWithHttpInfo(dfsNfsShareId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs nfs shares
     * @param dfsNfsShareId share id (required)
     * @return ApiResponse&lt;DfsNFSShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsNFSShareResp> getDfsNFSShareWithHttpInfo(Long dfsNfsShareId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsNFSShareValidateBeforeCall(dfsNfsShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs nfs shares
     * @param dfsNfsShareId share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsNFSShareAsync(Long dfsNfsShareId, final ApiCallback<DfsNFSShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsNFSShareValidateBeforeCall(dfsNfsShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsNFSShares
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param path related dfs path (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param nfsVersions nfs share version (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsNFSSharesCall(Long limit, Long offset, Long dfsRootfsId, String path, Long dfsGatewayGroupId, String nfsVersions, String q, String sort, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-nfs-shares/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (dfsRootfsId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_rootfs_id", dfsRootfsId));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (dfsGatewayGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_gateway_group_id", dfsGatewayGroupId));
        if (nfsVersions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nfs_versions", nfsVersions));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsNFSSharesValidateBeforeCall(Long limit, Long offset, Long dfsRootfsId, String path, Long dfsGatewayGroupId, String nfsVersions, String q, String sort, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsNFSSharesCall(limit, offset, dfsRootfsId, path, dfsGatewayGroupId, nfsVersions, q, sort, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs nfs sharess
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param path related dfs path (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param nfsVersions nfs share version (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @return DfsNFSSharesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsNFSSharesResp listDfsNFSShares(Long limit, Long offset, Long dfsRootfsId, String path, Long dfsGatewayGroupId, String nfsVersions, String q, String sort, String clusterId) throws ApiException {
        ApiResponse<DfsNFSSharesResp> resp = listDfsNFSSharesWithHttpInfo(limit, offset, dfsRootfsId, path, dfsGatewayGroupId, nfsVersions, q, sort, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List dfs nfs sharess
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param path related dfs path (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param nfsVersions nfs share version (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;DfsNFSSharesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsNFSSharesResp> listDfsNFSSharesWithHttpInfo(Long limit, Long offset, Long dfsRootfsId, String path, Long dfsGatewayGroupId, String nfsVersions, String q, String sort, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listDfsNFSSharesValidateBeforeCall(limit, offset, dfsRootfsId, path, dfsGatewayGroupId, nfsVersions, q, sort, clusterId, null, null);
        Type localVarReturnType = new TypeToken<DfsNFSSharesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs nfs sharess
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param dfsRootfsId dfs rootfs id (optional)
     * @param path related dfs path (optional)
     * @param dfsGatewayGroupId dfs gateway group id (optional)
     * @param nfsVersions nfs share version (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsNFSSharesAsync(Long limit, Long offset, Long dfsRootfsId, String path, Long dfsGatewayGroupId, String nfsVersions, String q, String sort, String clusterId, final ApiCallback<DfsNFSSharesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsNFSSharesValidateBeforeCall(limit, offset, dfsRootfsId, path, dfsGatewayGroupId, nfsVersions, q, sort, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsNFSSharesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeDfsNFSShareACLs
     * @param body share acls info (required)
     * @param dfsNfsShareId dfs nfs shares id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeDfsNFSShareACLsCall(DfsNFSShareRemoveACLsReq body, Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-nfs-shares/{dfs_nfs_share_id}:remove-acls"
            .replaceAll("\\{" + "dfs_nfs_share_id" + "\\}", apiClient.escapeString(dfsNfsShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeDfsNFSShareACLsValidateBeforeCall(DfsNFSShareRemoveACLsReq body, Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeDfsNFSShareACLs(Async)");
        }
        // verify the required parameter 'dfsNfsShareId' is set
        if (dfsNfsShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsNfsShareId' when calling removeDfsNFSShareACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = removeDfsNFSShareACLsCall(body, dfsNfsShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove dfs nfs shares acls
     * @param body share acls info (required)
     * @param dfsNfsShareId dfs nfs shares id (required)
     * @return DfsNFSShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsNFSShareResp removeDfsNFSShareACLs(DfsNFSShareRemoveACLsReq body, Long dfsNfsShareId) throws ApiException {
        ApiResponse<DfsNFSShareResp> resp = removeDfsNFSShareACLsWithHttpInfo(body, dfsNfsShareId);
        return resp.getData();
    }

    /**
     * 
     * remove dfs nfs shares acls
     * @param body share acls info (required)
     * @param dfsNfsShareId dfs nfs shares id (required)
     * @return ApiResponse&lt;DfsNFSShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsNFSShareResp> removeDfsNFSShareACLsWithHttpInfo(DfsNFSShareRemoveACLsReq body, Long dfsNfsShareId) throws ApiException {
        com.squareup.okhttp.Call call = removeDfsNFSShareACLsValidateBeforeCall(body, dfsNfsShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove dfs nfs shares acls
     * @param body share acls info (required)
     * @param dfsNfsShareId dfs nfs shares id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDfsNFSShareACLsAsync(DfsNFSShareRemoveACLsReq body, Long dfsNfsShareId, final ApiCallback<DfsNFSShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDfsNFSShareACLsValidateBeforeCall(body, dfsNfsShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setDfsNFSShareACLs
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setDfsNFSShareACLsCall(DfsNFSShareSetACLsReq body, Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-nfs-shares/{dfs_nfs_share_id}:set-acls"
            .replaceAll("\\{" + "dfs_nfs_share_id" + "\\}", apiClient.escapeString(dfsNfsShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setDfsNFSShareACLsValidateBeforeCall(DfsNFSShareSetACLsReq body, Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setDfsNFSShareACLs(Async)");
        }
        // verify the required parameter 'dfsNfsShareId' is set
        if (dfsNfsShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsNfsShareId' when calling setDfsNFSShareACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = setDfsNFSShareACLsCall(body, dfsNfsShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set all acls of dfs nfs share
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @return DfsNFSShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsNFSShareResp setDfsNFSShareACLs(DfsNFSShareSetACLsReq body, Long dfsNfsShareId) throws ApiException {
        ApiResponse<DfsNFSShareResp> resp = setDfsNFSShareACLsWithHttpInfo(body, dfsNfsShareId);
        return resp.getData();
    }

    /**
     * 
     * Set all acls of dfs nfs share
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @return ApiResponse&lt;DfsNFSShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsNFSShareResp> setDfsNFSShareACLsWithHttpInfo(DfsNFSShareSetACLsReq body, Long dfsNfsShareId) throws ApiException {
        com.squareup.okhttp.Call call = setDfsNFSShareACLsValidateBeforeCall(body, dfsNfsShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set all acls of dfs nfs share
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDfsNFSShareACLsAsync(DfsNFSShareSetACLsReq body, Long dfsNfsShareId, final ApiCallback<DfsNFSShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDfsNFSShareACLsValidateBeforeCall(body, dfsNfsShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsNFSShare
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsNFSShareCall(DfsNFSShareUpdateReq body, Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-nfs-shares/{dfs_nfs_share_id}"
            .replaceAll("\\{" + "dfs_nfs_share_id" + "\\}", apiClient.escapeString(dfsNfsShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsNFSShareValidateBeforeCall(DfsNFSShareUpdateReq body, Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsNFSShare(Async)");
        }
        // verify the required parameter 'dfsNfsShareId' is set
        if (dfsNfsShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsNfsShareId' when calling updateDfsNFSShare(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsNFSShareCall(body, dfsNfsShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update dfs nfs shares
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @return DfsNFSShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsNFSShareResp updateDfsNFSShare(DfsNFSShareUpdateReq body, Long dfsNfsShareId) throws ApiException {
        ApiResponse<DfsNFSShareResp> resp = updateDfsNFSShareWithHttpInfo(body, dfsNfsShareId);
        return resp.getData();
    }

    /**
     * 
     * update dfs nfs shares
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @return ApiResponse&lt;DfsNFSShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsNFSShareResp> updateDfsNFSShareWithHttpInfo(DfsNFSShareUpdateReq body, Long dfsNfsShareId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsNFSShareValidateBeforeCall(body, dfsNfsShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update dfs nfs shares
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsNFSShareAsync(DfsNFSShareUpdateReq body, Long dfsNfsShareId, final ApiCallback<DfsNFSShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsNFSShareValidateBeforeCall(body, dfsNfsShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsNFSShareACLs
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsNFSShareACLsCall(DfsNFSShareUpdateACLsReq body, Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-nfs-shares/{dfs_nfs_share_id}:update-acls"
            .replaceAll("\\{" + "dfs_nfs_share_id" + "\\}", apiClient.escapeString(dfsNfsShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsNFSShareACLsValidateBeforeCall(DfsNFSShareUpdateACLsReq body, Long dfsNfsShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsNFSShareACLs(Async)");
        }
        // verify the required parameter 'dfsNfsShareId' is set
        if (dfsNfsShareId == null) {
            throw new ApiException("Missing the required parameter 'dfsNfsShareId' when calling updateDfsNFSShareACLs(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsNFSShareACLsCall(body, dfsNfsShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs nfs share acls
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @return DfsNFSShareResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsNFSShareResp updateDfsNFSShareACLs(DfsNFSShareUpdateACLsReq body, Long dfsNfsShareId) throws ApiException {
        ApiResponse<DfsNFSShareResp> resp = updateDfsNFSShareACLsWithHttpInfo(body, dfsNfsShareId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs nfs share acls
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @return ApiResponse&lt;DfsNFSShareResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsNFSShareResp> updateDfsNFSShareACLsWithHttpInfo(DfsNFSShareUpdateACLsReq body, Long dfsNfsShareId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsNFSShareACLsValidateBeforeCall(body, dfsNfsShareId, null, null);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs nfs share acls
     * @param body share info (required)
     * @param dfsNfsShareId share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsNFSShareACLsAsync(DfsNFSShareUpdateACLsReq body, Long dfsNfsShareId, final ApiCallback<DfsNFSShareResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsNFSShareACLsValidateBeforeCall(body, dfsNfsShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsNFSShareResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
