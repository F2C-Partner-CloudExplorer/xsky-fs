/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.MetadataClusterAddServicesReq;
import xio.sds.client.model.MetadataClusterCreateReq;
import xio.sds.client.model.MetadataClusterPredictionsResp;
import xio.sds.client.model.MetadataClusterRemoveServicesReq;
import xio.sds.client.model.MetadataClusterResp;
import xio.sds.client.model.MetadataClusterSamplesResp;
import xio.sds.client.model.MetadataClusterUpdatePrimaryDcReq;
import xio.sds.client.model.MetadataClusterUpdateReq;
import xio.sds.client.model.MetadataClustersResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetadataClustersApi {
    private ApiClient apiClient;

    public MetadataClustersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataClustersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addMetadataServicesToCluster
     * @param body metadata services (required)
     * @param metadataClusterId metadata cluster id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMetadataServicesToClusterCall(MetadataClusterAddServicesReq body, Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/{metadata_cluster_id}:add-metadata-services"
            .replaceAll("\\{" + "metadata_cluster_id" + "\\}", apiClient.escapeString(metadataClusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMetadataServicesToClusterValidateBeforeCall(MetadataClusterAddServicesReq body, Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addMetadataServicesToCluster(Async)");
        }
        // verify the required parameter 'metadataClusterId' is set
        if (metadataClusterId == null) {
            throw new ApiException("Missing the required parameter 'metadataClusterId' when calling addMetadataServicesToCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = addMetadataServicesToClusterCall(body, metadataClusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Add metadata services to cluster
     * @param body metadata services (required)
     * @param metadataClusterId metadata cluster id (required)
     * @return MetadataClusterResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClusterResp addMetadataServicesToCluster(MetadataClusterAddServicesReq body, Long metadataClusterId) throws ApiException {
        ApiResponse<MetadataClusterResp> resp = addMetadataServicesToClusterWithHttpInfo(body, metadataClusterId);
        return resp.getData();
    }

    /**
     * 
     * Add metadata services to cluster
     * @param body metadata services (required)
     * @param metadataClusterId metadata cluster id (required)
     * @return ApiResponse&lt;MetadataClusterResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClusterResp> addMetadataServicesToClusterWithHttpInfo(MetadataClusterAddServicesReq body, Long metadataClusterId) throws ApiException {
        com.squareup.okhttp.Call call = addMetadataServicesToClusterValidateBeforeCall(body, metadataClusterId, null, null);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add metadata services to cluster
     * @param body metadata services (required)
     * @param metadataClusterId metadata cluster id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMetadataServicesToClusterAsync(MetadataClusterAddServicesReq body, Long metadataClusterId, final ApiCallback<MetadataClusterResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMetadataServicesToClusterValidateBeforeCall(body, metadataClusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMetadataCluster
     * @param body metadata cluster info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMetadataClusterCall(MetadataClusterCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMetadataClusterValidateBeforeCall(MetadataClusterCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createMetadataCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = createMetadataClusterCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create metadata cluster on specific disk
     * @param body metadata cluster info (required)
     * @param clusterId cluster id (optional)
     * @return MetadataClusterResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClusterResp createMetadataCluster(MetadataClusterCreateReq body, String clusterId) throws ApiException {
        ApiResponse<MetadataClusterResp> resp = createMetadataClusterWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create metadata cluster on specific disk
     * @param body metadata cluster info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;MetadataClusterResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClusterResp> createMetadataClusterWithHttpInfo(MetadataClusterCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createMetadataClusterValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create metadata cluster on specific disk
     * @param body metadata cluster info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMetadataClusterAsync(MetadataClusterCreateReq body, String clusterId, final ApiCallback<MetadataClusterResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMetadataClusterValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMetadataCluster
     * @param metadataClusterId metadata cluster id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMetadataClusterCall(Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/{metadata_cluster_id}"
            .replaceAll("\\{" + "metadata_cluster_id" + "\\}", apiClient.escapeString(metadataClusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMetadataClusterValidateBeforeCall(Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'metadataClusterId' is set
        if (metadataClusterId == null) {
            throw new ApiException("Missing the required parameter 'metadataClusterId' when calling deleteMetadataCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteMetadataClusterCall(metadataClusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete a metadata cluster
     * @param metadataClusterId metadata cluster id (required)
     * @return MetadataClusterResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClusterResp deleteMetadataCluster(Long metadataClusterId) throws ApiException {
        ApiResponse<MetadataClusterResp> resp = deleteMetadataClusterWithHttpInfo(metadataClusterId);
        return resp.getData();
    }

    /**
     * 
     * delete a metadata cluster
     * @param metadataClusterId metadata cluster id (required)
     * @return ApiResponse&lt;MetadataClusterResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClusterResp> deleteMetadataClusterWithHttpInfo(Long metadataClusterId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMetadataClusterValidateBeforeCall(metadataClusterId, null, null);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete a metadata cluster
     * @param metadataClusterId metadata cluster id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMetadataClusterAsync(Long metadataClusterId, final ApiCallback<MetadataClusterResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMetadataClusterValidateBeforeCall(metadataClusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMetadataCluster
     * @param metadataClusterId metadata cluster id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMetadataClusterCall(Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/{metadata_cluster_id}"
            .replaceAll("\\{" + "metadata_cluster_id" + "\\}", apiClient.escapeString(metadataClusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMetadataClusterValidateBeforeCall(Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'metadataClusterId' is set
        if (metadataClusterId == null) {
            throw new ApiException("Missing the required parameter 'metadataClusterId' when calling getMetadataCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = getMetadataClusterCall(metadataClusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a metadata cluster
     * @param metadataClusterId metadata cluster id (required)
     * @return MetadataClusterResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClusterResp getMetadataCluster(Long metadataClusterId) throws ApiException {
        ApiResponse<MetadataClusterResp> resp = getMetadataClusterWithHttpInfo(metadataClusterId);
        return resp.getData();
    }

    /**
     * 
     * get a metadata cluster
     * @param metadataClusterId metadata cluster id (required)
     * @return ApiResponse&lt;MetadataClusterResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClusterResp> getMetadataClusterWithHttpInfo(Long metadataClusterId) throws ApiException {
        com.squareup.okhttp.Call call = getMetadataClusterValidateBeforeCall(metadataClusterId, null, null);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a metadata cluster
     * @param metadataClusterId metadata cluster id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMetadataClusterAsync(Long metadataClusterId, final ApiCallback<MetadataClusterResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMetadataClusterValidateBeforeCall(metadataClusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMetadataClusterPredictions
     * @param metadataClusterId metadata cluster id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMetadataClusterPredictionsCall(Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/{metadata_cluster_id}/predictions"
            .replaceAll("\\{" + "metadata_cluster_id" + "\\}", apiClient.escapeString(metadataClusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMetadataClusterPredictionsValidateBeforeCall(Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'metadataClusterId' is set
        if (metadataClusterId == null) {
            throw new ApiException("Missing the required parameter 'metadataClusterId' when calling getMetadataClusterPredictions(Async)");
        }
        
        com.squareup.okhttp.Call call = getMetadataClusterPredictionsCall(metadataClusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a metadata cluster&#x27;s prediction
     * @param metadataClusterId metadata cluster id (required)
     * @return MetadataClusterPredictionsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClusterPredictionsResp getMetadataClusterPredictions(Long metadataClusterId) throws ApiException {
        ApiResponse<MetadataClusterPredictionsResp> resp = getMetadataClusterPredictionsWithHttpInfo(metadataClusterId);
        return resp.getData();
    }

    /**
     * 
     * get a metadata cluster&#x27;s prediction
     * @param metadataClusterId metadata cluster id (required)
     * @return ApiResponse&lt;MetadataClusterPredictionsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClusterPredictionsResp> getMetadataClusterPredictionsWithHttpInfo(Long metadataClusterId) throws ApiException {
        com.squareup.okhttp.Call call = getMetadataClusterPredictionsValidateBeforeCall(metadataClusterId, null, null);
        Type localVarReturnType = new TypeToken<MetadataClusterPredictionsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a metadata cluster&#x27;s prediction
     * @param metadataClusterId metadata cluster id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMetadataClusterPredictionsAsync(Long metadataClusterId, final ApiCallback<MetadataClusterPredictionsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMetadataClusterPredictionsValidateBeforeCall(metadataClusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClusterPredictionsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMetadataClusterSamples
     * @param metadataClusterId metadata cluster id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMetadataClusterSamplesCall(Long metadataClusterId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/{metadata_cluster_id}/samples"
            .replaceAll("\\{" + "metadata_cluster_id" + "\\}", apiClient.escapeString(metadataClusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMetadataClusterSamplesValidateBeforeCall(Long metadataClusterId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'metadataClusterId' is set
        if (metadataClusterId == null) {
            throw new ApiException("Missing the required parameter 'metadataClusterId' when calling getMetadataClusterSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getMetadataClusterSamplesCall(metadataClusterId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get samples of a metadata cluster
     * @param metadataClusterId metadata cluster id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return MetadataClusterSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClusterSamplesResp getMetadataClusterSamples(Long metadataClusterId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<MetadataClusterSamplesResp> resp = getMetadataClusterSamplesWithHttpInfo(metadataClusterId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get samples of a metadata cluster
     * @param metadataClusterId metadata cluster id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;MetadataClusterSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClusterSamplesResp> getMetadataClusterSamplesWithHttpInfo(Long metadataClusterId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getMetadataClusterSamplesValidateBeforeCall(metadataClusterId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<MetadataClusterSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get samples of a metadata cluster
     * @param metadataClusterId metadata cluster id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMetadataClusterSamplesAsync(Long metadataClusterId, String durationBegin, String durationEnd, String period, final ApiCallback<MetadataClusterSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMetadataClusterSamplesValidateBeforeCall(metadataClusterId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClusterSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listMetadataClusters
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param hostId host id (optional)
     * @param metadataClusterId metadata cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listMetadataClustersCall(Long limit, Long offset, String clusterId, Long hostId, Long metadataClusterId, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (hostId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("host_id", hostId));
        if (metadataClusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metadata_cluster_id", metadataClusterId));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listMetadataClustersValidateBeforeCall(Long limit, Long offset, String clusterId, Long hostId, Long metadataClusterId, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listMetadataClustersCall(limit, offset, clusterId, hostId, metadataClusterId, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List all metadata clusters in the cluster
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param hostId host id (optional)
     * @param metadataClusterId metadata cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return MetadataClustersResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClustersResp listMetadataClusters(Long limit, Long offset, String clusterId, Long hostId, Long metadataClusterId, String q, String sort) throws ApiException {
        ApiResponse<MetadataClustersResp> resp = listMetadataClustersWithHttpInfo(limit, offset, clusterId, hostId, metadataClusterId, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List all metadata clusters in the cluster
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param hostId host id (optional)
     * @param metadataClusterId metadata cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;MetadataClustersResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClustersResp> listMetadataClustersWithHttpInfo(Long limit, Long offset, String clusterId, Long hostId, Long metadataClusterId, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listMetadataClustersValidateBeforeCall(limit, offset, clusterId, hostId, metadataClusterId, q, sort, null, null);
        Type localVarReturnType = new TypeToken<MetadataClustersResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all metadata clusters in the cluster
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param hostId host id (optional)
     * @param metadataClusterId metadata cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listMetadataClustersAsync(Long limit, Long offset, String clusterId, Long hostId, Long metadataClusterId, String q, String sort, final ApiCallback<MetadataClustersResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listMetadataClustersValidateBeforeCall(limit, offset, clusterId, hostId, metadataClusterId, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClustersResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeMetadataServicesFromCluster
     * @param body metadata services (required)
     * @param metadataClusterId metadata cluster id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeMetadataServicesFromClusterCall(MetadataClusterRemoveServicesReq body, Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/{metadata_cluster_id}:remove-metadata-services"
            .replaceAll("\\{" + "metadata_cluster_id" + "\\}", apiClient.escapeString(metadataClusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeMetadataServicesFromClusterValidateBeforeCall(MetadataClusterRemoveServicesReq body, Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeMetadataServicesFromCluster(Async)");
        }
        // verify the required parameter 'metadataClusterId' is set
        if (metadataClusterId == null) {
            throw new ApiException("Missing the required parameter 'metadataClusterId' when calling removeMetadataServicesFromCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = removeMetadataServicesFromClusterCall(body, metadataClusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Remove metadata services from cluster
     * @param body metadata services (required)
     * @param metadataClusterId metadata cluster id (required)
     * @return MetadataClusterResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClusterResp removeMetadataServicesFromCluster(MetadataClusterRemoveServicesReq body, Long metadataClusterId) throws ApiException {
        ApiResponse<MetadataClusterResp> resp = removeMetadataServicesFromClusterWithHttpInfo(body, metadataClusterId);
        return resp.getData();
    }

    /**
     * 
     * Remove metadata services from cluster
     * @param body metadata services (required)
     * @param metadataClusterId metadata cluster id (required)
     * @return ApiResponse&lt;MetadataClusterResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClusterResp> removeMetadataServicesFromClusterWithHttpInfo(MetadataClusterRemoveServicesReq body, Long metadataClusterId) throws ApiException {
        com.squareup.okhttp.Call call = removeMetadataServicesFromClusterValidateBeforeCall(body, metadataClusterId, null, null);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove metadata services from cluster
     * @param body metadata services (required)
     * @param metadataClusterId metadata cluster id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeMetadataServicesFromClusterAsync(MetadataClusterRemoveServicesReq body, Long metadataClusterId, final ApiCallback<MetadataClusterResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeMetadataServicesFromClusterValidateBeforeCall(body, metadataClusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setMetadataClusterToStretched
     * @param metadataClusterId metadata cluster id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMetadataClusterToStretchedCall(Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/{metadata_cluster_id}:set-stretched"
            .replaceAll("\\{" + "metadata_cluster_id" + "\\}", apiClient.escapeString(metadataClusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMetadataClusterToStretchedValidateBeforeCall(Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'metadataClusterId' is set
        if (metadataClusterId == null) {
            throw new ApiException("Missing the required parameter 'metadataClusterId' when calling setMetadataClusterToStretched(Async)");
        }
        
        com.squareup.okhttp.Call call = setMetadataClusterToStretchedCall(metadataClusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set metadata cluster to stretched
     * @param metadataClusterId metadata cluster id (required)
     * @return MetadataClusterResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClusterResp setMetadataClusterToStretched(Long metadataClusterId) throws ApiException {
        ApiResponse<MetadataClusterResp> resp = setMetadataClusterToStretchedWithHttpInfo(metadataClusterId);
        return resp.getData();
    }

    /**
     * 
     * set metadata cluster to stretched
     * @param metadataClusterId metadata cluster id (required)
     * @return ApiResponse&lt;MetadataClusterResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClusterResp> setMetadataClusterToStretchedWithHttpInfo(Long metadataClusterId) throws ApiException {
        com.squareup.okhttp.Call call = setMetadataClusterToStretchedValidateBeforeCall(metadataClusterId, null, null);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * set metadata cluster to stretched
     * @param metadataClusterId metadata cluster id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMetadataClusterToStretchedAsync(Long metadataClusterId, final ApiCallback<MetadataClusterResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMetadataClusterToStretchedValidateBeforeCall(metadataClusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMetadataCluster
     * @param body metadata cluster info (required)
     * @param metadataClusterId metadata cluster id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMetadataClusterCall(MetadataClusterUpdateReq body, Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/{metadata_cluster_id}"
            .replaceAll("\\{" + "metadata_cluster_id" + "\\}", apiClient.escapeString(metadataClusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMetadataClusterValidateBeforeCall(MetadataClusterUpdateReq body, Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMetadataCluster(Async)");
        }
        // verify the required parameter 'metadataClusterId' is set
        if (metadataClusterId == null) {
            throw new ApiException("Missing the required parameter 'metadataClusterId' when calling updateMetadataCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMetadataClusterCall(body, metadataClusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update metadata cluster
     * @param body metadata cluster info (required)
     * @param metadataClusterId metadata cluster id (required)
     * @return MetadataClusterResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClusterResp updateMetadataCluster(MetadataClusterUpdateReq body, Long metadataClusterId) throws ApiException {
        ApiResponse<MetadataClusterResp> resp = updateMetadataClusterWithHttpInfo(body, metadataClusterId);
        return resp.getData();
    }

    /**
     * 
     * update metadata cluster
     * @param body metadata cluster info (required)
     * @param metadataClusterId metadata cluster id (required)
     * @return ApiResponse&lt;MetadataClusterResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClusterResp> updateMetadataClusterWithHttpInfo(MetadataClusterUpdateReq body, Long metadataClusterId) throws ApiException {
        com.squareup.okhttp.Call call = updateMetadataClusterValidateBeforeCall(body, metadataClusterId, null, null);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update metadata cluster
     * @param body metadata cluster info (required)
     * @param metadataClusterId metadata cluster id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMetadataClusterAsync(MetadataClusterUpdateReq body, Long metadataClusterId, final ApiCallback<MetadataClusterResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMetadataClusterValidateBeforeCall(body, metadataClusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePrimaryDc
     * @param body metadata cluster info (required)
     * @param metadataClusterId metadata cluster id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePrimaryDcCall(MetadataClusterUpdatePrimaryDcReq body, Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/metadata-clusters/{metadata_cluster_id}:update-primary-dc"
            .replaceAll("\\{" + "metadata_cluster_id" + "\\}", apiClient.escapeString(metadataClusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePrimaryDcValidateBeforeCall(MetadataClusterUpdatePrimaryDcReq body, Long metadataClusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePrimaryDc(Async)");
        }
        // verify the required parameter 'metadataClusterId' is set
        if (metadataClusterId == null) {
            throw new ApiException("Missing the required parameter 'metadataClusterId' when calling updatePrimaryDc(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePrimaryDcCall(body, metadataClusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update primary datacenter of metadata cluster
     * @param body metadata cluster info (required)
     * @param metadataClusterId metadata cluster id (required)
     * @return MetadataClusterResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataClusterResp updatePrimaryDc(MetadataClusterUpdatePrimaryDcReq body, Long metadataClusterId) throws ApiException {
        ApiResponse<MetadataClusterResp> resp = updatePrimaryDcWithHttpInfo(body, metadataClusterId);
        return resp.getData();
    }

    /**
     * 
     * update primary datacenter of metadata cluster
     * @param body metadata cluster info (required)
     * @param metadataClusterId metadata cluster id (required)
     * @return ApiResponse&lt;MetadataClusterResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataClusterResp> updatePrimaryDcWithHttpInfo(MetadataClusterUpdatePrimaryDcReq body, Long metadataClusterId) throws ApiException {
        com.squareup.okhttp.Call call = updatePrimaryDcValidateBeforeCall(body, metadataClusterId, null, null);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update primary datacenter of metadata cluster
     * @param body metadata cluster info (required)
     * @param metadataClusterId metadata cluster id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePrimaryDcAsync(MetadataClusterUpdatePrimaryDcReq body, Long metadataClusterId, final ApiCallback<MetadataClusterResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePrimaryDcValidateBeforeCall(body, metadataClusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataClusterResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
