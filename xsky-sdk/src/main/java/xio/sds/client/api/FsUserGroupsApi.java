/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.FSUserGroupAddUsersReq;
import xio.sds.client.model.FSUserGroupCreateReq;
import xio.sds.client.model.FSUserGroupRemoveUsersReq;
import xio.sds.client.model.FSUserGroupResp;
import xio.sds.client.model.FSUserGroupUpdateReq;
import xio.sds.client.model.FSUserGroupsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FsUserGroupsApi {
    private ApiClient apiClient;

    public FsUserGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FsUserGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFSUsers
     * @param body users info (required)
     * @param fsUserGroupId user group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFSUsersCall(FSUserGroupAddUsersReq body, Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/fs-user-groups/{fs_user_group_id}/fs-users"
            .replaceAll("\\{" + "fs_user_group_id" + "\\}", apiClient.escapeString(fsUserGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFSUsersValidateBeforeCall(FSUserGroupAddUsersReq body, Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFSUsers(Async)");
        }
        // verify the required parameter 'fsUserGroupId' is set
        if (fsUserGroupId == null) {
            throw new ApiException("Missing the required parameter 'fsUserGroupId' when calling addFSUsers(Async)");
        }
        
        com.squareup.okhttp.Call call = addFSUsersCall(body, fsUserGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add users to file storage user group
     * @param body users info (required)
     * @param fsUserGroupId user group id (required)
     * @return FSUserGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserGroupResp addFSUsers(FSUserGroupAddUsersReq body, Long fsUserGroupId) throws ApiException {
        ApiResponse<FSUserGroupResp> resp = addFSUsersWithHttpInfo(body, fsUserGroupId);
        return resp.getData();
    }

    /**
     * 
     * add users to file storage user group
     * @param body users info (required)
     * @param fsUserGroupId user group id (required)
     * @return ApiResponse&lt;FSUserGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserGroupResp> addFSUsersWithHttpInfo(FSUserGroupAddUsersReq body, Long fsUserGroupId) throws ApiException {
        com.squareup.okhttp.Call call = addFSUsersValidateBeforeCall(body, fsUserGroupId, null, null);
        Type localVarReturnType = new TypeToken<FSUserGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add users to file storage user group
     * @param body users info (required)
     * @param fsUserGroupId user group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFSUsersAsync(FSUserGroupAddUsersReq body, Long fsUserGroupId, final ApiCallback<FSUserGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFSUsersValidateBeforeCall(body, fsUserGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createFSUserGroup
     * @param body user group info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFSUserGroupCall(FSUserGroupCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/fs-user-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFSUserGroupValidateBeforeCall(FSUserGroupCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFSUserGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createFSUserGroupCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create file storage user group
     * @param body user group info (required)
     * @param clusterId cluster id (optional)
     * @return FSUserGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserGroupResp createFSUserGroup(FSUserGroupCreateReq body, String clusterId) throws ApiException {
        ApiResponse<FSUserGroupResp> resp = createFSUserGroupWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create file storage user group
     * @param body user group info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;FSUserGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserGroupResp> createFSUserGroupWithHttpInfo(FSUserGroupCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createFSUserGroupValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<FSUserGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create file storage user group
     * @param body user group info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFSUserGroupAsync(FSUserGroupCreateReq body, String clusterId, final ApiCallback<FSUserGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFSUserGroupValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFSUserGroup
     * @param fsUserGroupId user group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFSUserGroupCall(Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fs-user-groups/{fs_user_group_id}"
            .replaceAll("\\{" + "fs_user_group_id" + "\\}", apiClient.escapeString(fsUserGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFSUserGroupValidateBeforeCall(Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fsUserGroupId' is set
        if (fsUserGroupId == null) {
            throw new ApiException("Missing the required parameter 'fsUserGroupId' when calling deleteFSUserGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFSUserGroupCall(fsUserGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete file storage user group
     * @param fsUserGroupId user group id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFSUserGroup(Long fsUserGroupId) throws ApiException {
        deleteFSUserGroupWithHttpInfo(fsUserGroupId);
    }

    /**
     * 
     * delete file storage user group
     * @param fsUserGroupId user group id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFSUserGroupWithHttpInfo(Long fsUserGroupId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFSUserGroupValidateBeforeCall(fsUserGroupId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * delete file storage user group
     * @param fsUserGroupId user group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFSUserGroupAsync(Long fsUserGroupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFSUserGroupValidateBeforeCall(fsUserGroupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFSUserGroup
     * @param fsUserGroupId user group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFSUserGroupCall(Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fs-user-groups/{fs_user_group_id}"
            .replaceAll("\\{" + "fs_user_group_id" + "\\}", apiClient.escapeString(fsUserGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFSUserGroupValidateBeforeCall(Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fsUserGroupId' is set
        if (fsUserGroupId == null) {
            throw new ApiException("Missing the required parameter 'fsUserGroupId' when calling getFSUserGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getFSUserGroupCall(fsUserGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get file storage user group
     * @param fsUserGroupId user group id (required)
     * @return FSUserGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserGroupResp getFSUserGroup(Long fsUserGroupId) throws ApiException {
        ApiResponse<FSUserGroupResp> resp = getFSUserGroupWithHttpInfo(fsUserGroupId);
        return resp.getData();
    }

    /**
     * 
     * Get file storage user group
     * @param fsUserGroupId user group id (required)
     * @return ApiResponse&lt;FSUserGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserGroupResp> getFSUserGroupWithHttpInfo(Long fsUserGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getFSUserGroupValidateBeforeCall(fsUserGroupId, null, null);
        Type localVarReturnType = new TypeToken<FSUserGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get file storage user group
     * @param fsUserGroupId user group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFSUserGroupAsync(Long fsUserGroupId, final ApiCallback<FSUserGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFSUserGroupValidateBeforeCall(fsUserGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFSUserGroups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param type security type of file storage user group (optional)
     * @param fsUserId file storage user id (optional)
     * @param notDfsHdfsId id of dfs hdfs user groups not in (optional)
     * @param notDfsSmbShareId id of dfs smb share user groups not in (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listFSUserGroupsCall(Long limit, Long offset, String q, String sort, String clusterId, String type, Long fsUserId, Long notDfsHdfsId, Long notDfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fs-user-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (fsUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fs_user_id", fsUserId));
        if (notDfsHdfsId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("not_dfs_hdfs_id", notDfsHdfsId));
        if (notDfsSmbShareId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("not_dfs_smb_share_id", notDfsSmbShareId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFSUserGroupsValidateBeforeCall(Long limit, Long offset, String q, String sort, String clusterId, String type, Long fsUserId, Long notDfsHdfsId, Long notDfsSmbShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listFSUserGroupsCall(limit, offset, q, sort, clusterId, type, fsUserId, notDfsHdfsId, notDfsSmbShareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List file storage user groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param type security type of file storage user group (optional)
     * @param fsUserId file storage user id (optional)
     * @param notDfsHdfsId id of dfs hdfs user groups not in (optional)
     * @param notDfsSmbShareId id of dfs smb share user groups not in (optional)
     * @return FSUserGroupsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserGroupsResp listFSUserGroups(Long limit, Long offset, String q, String sort, String clusterId, String type, Long fsUserId, Long notDfsHdfsId, Long notDfsSmbShareId) throws ApiException {
        ApiResponse<FSUserGroupsResp> resp = listFSUserGroupsWithHttpInfo(limit, offset, q, sort, clusterId, type, fsUserId, notDfsHdfsId, notDfsSmbShareId);
        return resp.getData();
    }

    /**
     * 
     * List file storage user groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param type security type of file storage user group (optional)
     * @param fsUserId file storage user id (optional)
     * @param notDfsHdfsId id of dfs hdfs user groups not in (optional)
     * @param notDfsSmbShareId id of dfs smb share user groups not in (optional)
     * @return ApiResponse&lt;FSUserGroupsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserGroupsResp> listFSUserGroupsWithHttpInfo(Long limit, Long offset, String q, String sort, String clusterId, String type, Long fsUserId, Long notDfsHdfsId, Long notDfsSmbShareId) throws ApiException {
        com.squareup.okhttp.Call call = listFSUserGroupsValidateBeforeCall(limit, offset, q, sort, clusterId, type, fsUserId, notDfsHdfsId, notDfsSmbShareId, null, null);
        Type localVarReturnType = new TypeToken<FSUserGroupsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List file storage user groups
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param type security type of file storage user group (optional)
     * @param fsUserId file storage user id (optional)
     * @param notDfsHdfsId id of dfs hdfs user groups not in (optional)
     * @param notDfsSmbShareId id of dfs smb share user groups not in (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFSUserGroupsAsync(Long limit, Long offset, String q, String sort, String clusterId, String type, Long fsUserId, Long notDfsHdfsId, Long notDfsSmbShareId, final ApiCallback<FSUserGroupsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFSUserGroupsValidateBeforeCall(limit, offset, q, sort, clusterId, type, fsUserId, notDfsHdfsId, notDfsSmbShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserGroupsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeFSUsers
     * @param body users info (required)
     * @param fsUserGroupId user group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeFSUsersCall(FSUserGroupRemoveUsersReq body, Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/fs-user-groups/{fs_user_group_id}/fs-users"
            .replaceAll("\\{" + "fs_user_group_id" + "\\}", apiClient.escapeString(fsUserGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeFSUsersValidateBeforeCall(FSUserGroupRemoveUsersReq body, Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeFSUsers(Async)");
        }
        // verify the required parameter 'fsUserGroupId' is set
        if (fsUserGroupId == null) {
            throw new ApiException("Missing the required parameter 'fsUserGroupId' when calling removeFSUsers(Async)");
        }
        
        com.squareup.okhttp.Call call = removeFSUsersCall(body, fsUserGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove users from file storage user group
     * @param body users info (required)
     * @param fsUserGroupId user group id (required)
     * @return FSUserGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserGroupResp removeFSUsers(FSUserGroupRemoveUsersReq body, Long fsUserGroupId) throws ApiException {
        ApiResponse<FSUserGroupResp> resp = removeFSUsersWithHttpInfo(body, fsUserGroupId);
        return resp.getData();
    }

    /**
     * 
     * remove users from file storage user group
     * @param body users info (required)
     * @param fsUserGroupId user group id (required)
     * @return ApiResponse&lt;FSUserGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserGroupResp> removeFSUsersWithHttpInfo(FSUserGroupRemoveUsersReq body, Long fsUserGroupId) throws ApiException {
        com.squareup.okhttp.Call call = removeFSUsersValidateBeforeCall(body, fsUserGroupId, null, null);
        Type localVarReturnType = new TypeToken<FSUserGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove users from file storage user group
     * @param body users info (required)
     * @param fsUserGroupId user group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeFSUsersAsync(FSUserGroupRemoveUsersReq body, Long fsUserGroupId, final ApiCallback<FSUserGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeFSUsersValidateBeforeCall(body, fsUserGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFSUserGroup
     * @param body user group info (required)
     * @param fsUserGroupId user group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFSUserGroupCall(FSUserGroupUpdateReq body, Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/fs-user-groups/{fs_user_group_id}"
            .replaceAll("\\{" + "fs_user_group_id" + "\\}", apiClient.escapeString(fsUserGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFSUserGroupValidateBeforeCall(FSUserGroupUpdateReq body, Long fsUserGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFSUserGroup(Async)");
        }
        // verify the required parameter 'fsUserGroupId' is set
        if (fsUserGroupId == null) {
            throw new ApiException("Missing the required parameter 'fsUserGroupId' when calling updateFSUserGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFSUserGroupCall(body, fsUserGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update file storage user group
     * @param body user group info (required)
     * @param fsUserGroupId user group id (required)
     * @return FSUserGroupResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserGroupResp updateFSUserGroup(FSUserGroupUpdateReq body, Long fsUserGroupId) throws ApiException {
        ApiResponse<FSUserGroupResp> resp = updateFSUserGroupWithHttpInfo(body, fsUserGroupId);
        return resp.getData();
    }

    /**
     * 
     * Update file storage user group
     * @param body user group info (required)
     * @param fsUserGroupId user group id (required)
     * @return ApiResponse&lt;FSUserGroupResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserGroupResp> updateFSUserGroupWithHttpInfo(FSUserGroupUpdateReq body, Long fsUserGroupId) throws ApiException {
        com.squareup.okhttp.Call call = updateFSUserGroupValidateBeforeCall(body, fsUserGroupId, null, null);
        Type localVarReturnType = new TypeToken<FSUserGroupResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update file storage user group
     * @param body user group info (required)
     * @param fsUserGroupId user group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFSUserGroupAsync(FSUserGroupUpdateReq body, Long fsUserGroupId, final ApiCallback<FSUserGroupResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFSUserGroupValidateBeforeCall(body, fsUserGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserGroupResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
