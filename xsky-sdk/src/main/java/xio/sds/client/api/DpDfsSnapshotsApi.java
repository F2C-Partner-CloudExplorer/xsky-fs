/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DpDfsSnapshotCreateReq;
import xio.sds.client.model.DpDfsSnapshotResp;
import xio.sds.client.model.DpDfsSnapshotsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DpDfsSnapshotsApi {
    private ApiClient apiClient;

    public DpDfsSnapshotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DpDfsSnapshotsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDpDfsSnapshot
     * @param body dp dfs snapshot info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDpDfsSnapshotCall(DpDfsSnapshotCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dp-dfs-snapshots/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDpDfsSnapshotValidateBeforeCall(DpDfsSnapshotCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDpDfsSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = createDpDfsSnapshotCall(body, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dp dfs snapshot
     * @param body dp dfs snapshot info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return DpDfsSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpDfsSnapshotResp createDpDfsSnapshot(DpDfsSnapshotCreateReq body, Boolean allowPathCreate) throws ApiException {
        ApiResponse<DpDfsSnapshotResp> resp = createDpDfsSnapshotWithHttpInfo(body, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * Create dp dfs snapshot
     * @param body dp dfs snapshot info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return ApiResponse&lt;DpDfsSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpDfsSnapshotResp> createDpDfsSnapshotWithHttpInfo(DpDfsSnapshotCreateReq body, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = createDpDfsSnapshotValidateBeforeCall(body, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dp dfs snapshot
     * @param body dp dfs snapshot info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDpDfsSnapshotAsync(DpDfsSnapshotCreateReq body, Boolean allowPathCreate, final ApiCallback<DpDfsSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDpDfsSnapshotValidateBeforeCall(body, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDPDfsSnapshot
     * @param dpDfsSnapshotId dp dfs snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDPDfsSnapshotCall(Long dpDfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-dfs-snapshots/{dp_dfs_snapshot_id}"
            .replaceAll("\\{" + "dp_dfs_snapshot_id" + "\\}", apiClient.escapeString(dpDfsSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDPDfsSnapshotValidateBeforeCall(Long dpDfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dpDfsSnapshotId' is set
        if (dpDfsSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'dpDfsSnapshotId' when calling deleteDPDfsSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDPDfsSnapshotCall(dpDfsSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete a dp dfs snapshot
     * @param dpDfsSnapshotId dp dfs snapshot id (required)
     * @return DpDfsSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpDfsSnapshotResp deleteDPDfsSnapshot(Long dpDfsSnapshotId) throws ApiException {
        ApiResponse<DpDfsSnapshotResp> resp = deleteDPDfsSnapshotWithHttpInfo(dpDfsSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * Delete a dp dfs snapshot
     * @param dpDfsSnapshotId dp dfs snapshot id (required)
     * @return ApiResponse&lt;DpDfsSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpDfsSnapshotResp> deleteDPDfsSnapshotWithHttpInfo(Long dpDfsSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDPDfsSnapshotValidateBeforeCall(dpDfsSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a dp dfs snapshot
     * @param dpDfsSnapshotId dp dfs snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDPDfsSnapshotAsync(Long dpDfsSnapshotId, final ApiCallback<DpDfsSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDPDfsSnapshotValidateBeforeCall(dpDfsSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDpDfsSnapshot
     * @param dpDfsSnapshotId the dp dfs snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDpDfsSnapshotCall(Long dpDfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-dfs-snapshots/{dp_dfs_snapshot_id}"
            .replaceAll("\\{" + "dp_dfs_snapshot_id" + "\\}", apiClient.escapeString(dpDfsSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDpDfsSnapshotValidateBeforeCall(Long dpDfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dpDfsSnapshotId' is set
        if (dpDfsSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'dpDfsSnapshotId' when calling getDpDfsSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = getDpDfsSnapshotCall(dpDfsSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get dp dfs snapshot
     * @param dpDfsSnapshotId the dp dfs snapshot id (required)
     * @return DpDfsSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpDfsSnapshotResp getDpDfsSnapshot(Long dpDfsSnapshotId) throws ApiException {
        ApiResponse<DpDfsSnapshotResp> resp = getDpDfsSnapshotWithHttpInfo(dpDfsSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * get dp dfs snapshot
     * @param dpDfsSnapshotId the dp dfs snapshot id (required)
     * @return ApiResponse&lt;DpDfsSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpDfsSnapshotResp> getDpDfsSnapshotWithHttpInfo(Long dpDfsSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = getDpDfsSnapshotValidateBeforeCall(dpDfsSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get dp dfs snapshot
     * @param dpDfsSnapshotId the dp dfs snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDpDfsSnapshotAsync(Long dpDfsSnapshotId, final ApiCallback<DpDfsSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDpDfsSnapshotValidateBeforeCall(dpDfsSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDpDfsSnapshots
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param policyId related dp dfs snapshot policy id (optional)
     * @param pathId related dfs path id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDpDfsSnapshotsCall(Long limit, Long offset, String q, String sort, Long policyId, Long pathId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-dfs-snapshots/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (policyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("policy_id", policyId));
        if (pathId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path_id", pathId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDpDfsSnapshotsValidateBeforeCall(Long limit, Long offset, String q, String sort, Long policyId, Long pathId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDpDfsSnapshotsCall(limit, offset, q, sort, policyId, pathId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dp dfs snapshots
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param policyId related dp dfs snapshot policy id (optional)
     * @param pathId related dfs path id (optional)
     * @return DpDfsSnapshotsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpDfsSnapshotsResp listDpDfsSnapshots(Long limit, Long offset, String q, String sort, Long policyId, Long pathId) throws ApiException {
        ApiResponse<DpDfsSnapshotsResp> resp = listDpDfsSnapshotsWithHttpInfo(limit, offset, q, sort, policyId, pathId);
        return resp.getData();
    }

    /**
     * 
     * List dp dfs snapshots
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param policyId related dp dfs snapshot policy id (optional)
     * @param pathId related dfs path id (optional)
     * @return ApiResponse&lt;DpDfsSnapshotsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpDfsSnapshotsResp> listDpDfsSnapshotsWithHttpInfo(Long limit, Long offset, String q, String sort, Long policyId, Long pathId) throws ApiException {
        com.squareup.okhttp.Call call = listDpDfsSnapshotsValidateBeforeCall(limit, offset, q, sort, policyId, pathId, null, null);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dp dfs snapshots
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param policyId related dp dfs snapshot policy id (optional)
     * @param pathId related dfs path id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDpDfsSnapshotsAsync(Long limit, Long offset, String q, String sort, Long policyId, Long pathId, final ApiCallback<DpDfsSnapshotsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDpDfsSnapshotsValidateBeforeCall(limit, offset, q, sort, policyId, pathId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDpDfsSnapshotsByDfsPathName
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDpDfsSnapshotsByDfsPathNameCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-dfs-snapshots/_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDpDfsSnapshotsByDfsPathNameValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDpDfsSnapshotsByDfsPathNameCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dp dfs snapshots by name
     * @return DpDfsSnapshotsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpDfsSnapshotsResp listDpDfsSnapshotsByDfsPathName() throws ApiException {
        ApiResponse<DpDfsSnapshotsResp> resp = listDpDfsSnapshotsByDfsPathNameWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List dp dfs snapshots by name
     * @return ApiResponse&lt;DpDfsSnapshotsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpDfsSnapshotsResp> listDpDfsSnapshotsByDfsPathNameWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listDpDfsSnapshotsByDfsPathNameValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dp dfs snapshots by name
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDpDfsSnapshotsByDfsPathNameAsync(final ApiCallback<DpDfsSnapshotsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDpDfsSnapshotsByDfsPathNameValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpDfsSnapshotsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
