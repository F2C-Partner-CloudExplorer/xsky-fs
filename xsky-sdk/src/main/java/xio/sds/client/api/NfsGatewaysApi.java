/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.NFSGatewayActionReq;
import xio.sds.client.model.NFSGatewayBucketMapResp;
import xio.sds.client.model.NFSGatewayBucketMapUpdateReq;
import xio.sds.client.model.NFSGatewayBucketMapsResp;
import xio.sds.client.model.NFSGatewayCreateReq;
import xio.sds.client.model.NFSGatewayResp;
import xio.sds.client.model.NFSGatewaySamplesResp;
import xio.sds.client.model.NFSGatewayUpdateReq;
import xio.sds.client.model.NFSGatewaysResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NfsGatewaysApi {
    private ApiClient apiClient;

    public NfsGatewaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NfsGatewaysApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNFSGateway
     * @param body nfs gateway info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNFSGatewayCall(NFSGatewayCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNFSGatewayValidateBeforeCall(NFSGatewayCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createNFSGateway(Async)");
        }
        
        com.squareup.okhttp.Call call = createNFSGatewayCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * create nfs gateway
     * @param body nfs gateway info (required)
     * @param clusterId cluster id (optional)
     * @return NFSGatewayResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayResp createNFSGateway(NFSGatewayCreateReq body, String clusterId) throws ApiException {
        ApiResponse<NFSGatewayResp> resp = createNFSGatewayWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * create nfs gateway
     * @param body nfs gateway info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;NFSGatewayResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayResp> createNFSGatewayWithHttpInfo(NFSGatewayCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createNFSGatewayValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create nfs gateway
     * @param body nfs gateway info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNFSGatewayAsync(NFSGatewayCreateReq body, String clusterId, final ApiCallback<NFSGatewayResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNFSGatewayValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNFSGatewayBucketMap
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNFSGatewayBucketMapCall(Long gatewayId, Long bucketId, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}/buckets/{bucket_id}"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()))
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNFSGatewayBucketMapValidateBeforeCall(Long gatewayId, Long bucketId, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling createNFSGatewayBucketMap(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling createNFSGatewayBucketMap(Async)");
        }
        
        com.squareup.okhttp.Call call = createNFSGatewayBucketMapCall(gatewayId, bucketId, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add bucket to nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param clusterId cluster id (optional)
     * @return NFSGatewayBucketMapResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayBucketMapResp createNFSGatewayBucketMap(Long gatewayId, Long bucketId, String clusterId) throws ApiException {
        ApiResponse<NFSGatewayBucketMapResp> resp = createNFSGatewayBucketMapWithHttpInfo(gatewayId, bucketId, clusterId);
        return resp.getData();
    }

    /**
     * 
     * add bucket to nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;NFSGatewayBucketMapResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayBucketMapResp> createNFSGatewayBucketMapWithHttpInfo(Long gatewayId, Long bucketId, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createNFSGatewayBucketMapValidateBeforeCall(gatewayId, bucketId, clusterId, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayBucketMapResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add bucket to nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNFSGatewayBucketMapAsync(Long gatewayId, Long bucketId, String clusterId, final ApiCallback<NFSGatewayBucketMapResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNFSGatewayBucketMapValidateBeforeCall(gatewayId, bucketId, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayBucketMapResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNFSGateway
     * @param gatewayId nfs gateway id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNFSGatewayCall(Long gatewayId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNFSGatewayValidateBeforeCall(Long gatewayId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling deleteNFSGateway(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNFSGatewayCall(gatewayId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @param force force delete or not (optional)
     * @return NFSGatewayResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayResp deleteNFSGateway(Long gatewayId, Boolean force) throws ApiException {
        ApiResponse<NFSGatewayResp> resp = deleteNFSGatewayWithHttpInfo(gatewayId, force);
        return resp.getData();
    }

    /**
     * 
     * delete nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;NFSGatewayResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayResp> deleteNFSGatewayWithHttpInfo(Long gatewayId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteNFSGatewayValidateBeforeCall(gatewayId, force, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNFSGatewayAsync(Long gatewayId, Boolean force, final ApiCallback<NFSGatewayResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNFSGatewayValidateBeforeCall(gatewayId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNFSGatewayBucketMap
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param force force delete or no (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNFSGatewayBucketMapCall(Long gatewayId, Long bucketId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}/buckets/{bucket_id}"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()))
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNFSGatewayBucketMapValidateBeforeCall(Long gatewayId, Long bucketId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling deleteNFSGatewayBucketMap(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling deleteNFSGatewayBucketMap(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNFSGatewayBucketMapCall(gatewayId, bucketId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove bucket from nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param force force delete or no (optional)
     * @return NFSGatewayBucketMapResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayBucketMapResp deleteNFSGatewayBucketMap(Long gatewayId, Long bucketId, Boolean force) throws ApiException {
        ApiResponse<NFSGatewayBucketMapResp> resp = deleteNFSGatewayBucketMapWithHttpInfo(gatewayId, bucketId, force);
        return resp.getData();
    }

    /**
     * 
     * remove bucket from nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param force force delete or no (optional)
     * @return ApiResponse&lt;NFSGatewayBucketMapResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayBucketMapResp> deleteNFSGatewayBucketMapWithHttpInfo(Long gatewayId, Long bucketId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteNFSGatewayBucketMapValidateBeforeCall(gatewayId, bucketId, force, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayBucketMapResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove bucket from nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param force force delete or no (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNFSGatewayBucketMapAsync(Long gatewayId, Long bucketId, Boolean force, final ApiCallback<NFSGatewayBucketMapResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNFSGatewayBucketMapValidateBeforeCall(gatewayId, bucketId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayBucketMapResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for doNFSGateway
     * @param body nfs gateway action info (required)
     * @param gatewayId nfs gateway id (required)
     * @param force force stop or no (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call doNFSGatewayCall(NFSGatewayActionReq body, Long gatewayId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call doNFSGatewayValidateBeforeCall(NFSGatewayActionReq body, Long gatewayId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling doNFSGateway(Async)");
        }
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling doNFSGateway(Async)");
        }
        
        com.squareup.okhttp.Call call = doNFSGatewayCall(body, gatewayId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * start/stop nfs gateway
     * @param body nfs gateway action info (required)
     * @param gatewayId nfs gateway id (required)
     * @param force force stop or no (optional)
     * @return NFSGatewayResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayResp doNFSGateway(NFSGatewayActionReq body, Long gatewayId, Boolean force) throws ApiException {
        ApiResponse<NFSGatewayResp> resp = doNFSGatewayWithHttpInfo(body, gatewayId, force);
        return resp.getData();
    }

    /**
     * 
     * start/stop nfs gateway
     * @param body nfs gateway action info (required)
     * @param gatewayId nfs gateway id (required)
     * @param force force stop or no (optional)
     * @return ApiResponse&lt;NFSGatewayResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayResp> doNFSGatewayWithHttpInfo(NFSGatewayActionReq body, Long gatewayId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = doNFSGatewayValidateBeforeCall(body, gatewayId, force, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * start/stop nfs gateway
     * @param body nfs gateway action info (required)
     * @param gatewayId nfs gateway id (required)
     * @param force force stop or no (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call doNFSGatewayAsync(NFSGatewayActionReq body, Long gatewayId, Boolean force, final ApiCallback<NFSGatewayResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = doNFSGatewayValidateBeforeCall(body, gatewayId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNFSGateway
     * @param gatewayId nfs gateway id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNFSGatewayCall(Long gatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNFSGatewayValidateBeforeCall(Long gatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling getNFSGateway(Async)");
        }
        
        com.squareup.okhttp.Call call = getNFSGatewayCall(gatewayId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * show nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @return NFSGatewayResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayResp getNFSGateway(Long gatewayId) throws ApiException {
        ApiResponse<NFSGatewayResp> resp = getNFSGatewayWithHttpInfo(gatewayId);
        return resp.getData();
    }

    /**
     * 
     * show nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @return ApiResponse&lt;NFSGatewayResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayResp> getNFSGatewayWithHttpInfo(Long gatewayId) throws ApiException {
        com.squareup.okhttp.Call call = getNFSGatewayValidateBeforeCall(gatewayId, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * show nfs gateway
     * @param gatewayId nfs gateway id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNFSGatewayAsync(Long gatewayId, final ApiCallback<NFSGatewayResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNFSGatewayValidateBeforeCall(gatewayId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNFSGatewayBucketMap
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNFSGatewayBucketMapCall(Long gatewayId, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}/buckets/{bucket_id}"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()))
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNFSGatewayBucketMapValidateBeforeCall(Long gatewayId, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling getNFSGatewayBucketMap(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getNFSGatewayBucketMap(Async)");
        }
        
        com.squareup.okhttp.Call call = getNFSGatewayBucketMapCall(gatewayId, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get nfs gateway bucket map
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @return NFSGatewayBucketMapResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayBucketMapResp getNFSGatewayBucketMap(Long gatewayId, Long bucketId) throws ApiException {
        ApiResponse<NFSGatewayBucketMapResp> resp = getNFSGatewayBucketMapWithHttpInfo(gatewayId, bucketId);
        return resp.getData();
    }

    /**
     * 
     * get nfs gateway bucket map
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;NFSGatewayBucketMapResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayBucketMapResp> getNFSGatewayBucketMapWithHttpInfo(Long gatewayId, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = getNFSGatewayBucketMapValidateBeforeCall(gatewayId, bucketId, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayBucketMapResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get nfs gateway bucket map
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNFSGatewayBucketMapAsync(Long gatewayId, Long bucketId, final ApiCallback<NFSGatewayBucketMapResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNFSGatewayBucketMapValidateBeforeCall(gatewayId, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayBucketMapResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNFSGatewaySamples
     * @param gatewayId gateway id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNFSGatewaySamplesCall(Long gatewayId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}/samples"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNFSGatewaySamplesValidateBeforeCall(Long gatewayId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling getNFSGatewaySamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getNFSGatewaySamplesCall(gatewayId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get nfs gateway&#x27;s samples
     * @param gatewayId gateway id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return NFSGatewaySamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewaySamplesResp getNFSGatewaySamples(Long gatewayId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<NFSGatewaySamplesResp> resp = getNFSGatewaySamplesWithHttpInfo(gatewayId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * Get nfs gateway&#x27;s samples
     * @param gatewayId gateway id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;NFSGatewaySamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewaySamplesResp> getNFSGatewaySamplesWithHttpInfo(Long gatewayId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getNFSGatewaySamplesValidateBeforeCall(gatewayId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewaySamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get nfs gateway&#x27;s samples
     * @param gatewayId gateway id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNFSGatewaySamplesAsync(Long gatewayId, String durationBegin, String durationEnd, String period, final ApiCallback<NFSGatewaySamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNFSGatewaySamplesValidateBeforeCall(gatewayId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewaySamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNFSGatewayBucketMaps
     * @param gatewayId nfs gateway id (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNFSGatewayBucketMapsCall(Long gatewayId, Long limit, Long offset, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}/buckets"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNFSGatewayBucketMapsValidateBeforeCall(Long gatewayId, Long limit, Long offset, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling listNFSGatewayBucketMaps(Async)");
        }
        
        com.squareup.okhttp.Call call = listNFSGatewayBucketMapsCall(gatewayId, limit, offset, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List nfs gateway bucket maps
     * @param gatewayId nfs gateway id (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @return NFSGatewayBucketMapsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayBucketMapsResp listNFSGatewayBucketMaps(Long gatewayId, Long limit, Long offset, String clusterId) throws ApiException {
        ApiResponse<NFSGatewayBucketMapsResp> resp = listNFSGatewayBucketMapsWithHttpInfo(gatewayId, limit, offset, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List nfs gateway bucket maps
     * @param gatewayId nfs gateway id (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;NFSGatewayBucketMapsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayBucketMapsResp> listNFSGatewayBucketMapsWithHttpInfo(Long gatewayId, Long limit, Long offset, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listNFSGatewayBucketMapsValidateBeforeCall(gatewayId, limit, offset, clusterId, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayBucketMapsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List nfs gateway bucket maps
     * @param gatewayId nfs gateway id (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNFSGatewayBucketMapsAsync(Long gatewayId, Long limit, Long offset, String clusterId, final ApiCallback<NFSGatewayBucketMapsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNFSGatewayBucketMapsValidateBeforeCall(gatewayId, limit, offset, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayBucketMapsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNFSGateways
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param ospZoneId osp zone id (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNFSGatewaysCall(Long limit, Long offset, String q, String sort, Long ospZoneId, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (ospZoneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("osp_zone_id", ospZoneId));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNFSGatewaysValidateBeforeCall(Long limit, Long offset, String q, String sort, Long ospZoneId, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listNFSGatewaysCall(limit, offset, q, sort, ospZoneId, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List all nfs gateways
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param ospZoneId osp zone id (optional)
     * @param clusterId cluster id (optional)
     * @return NFSGatewaysResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewaysResp listNFSGateways(Long limit, Long offset, String q, String sort, Long ospZoneId, String clusterId) throws ApiException {
        ApiResponse<NFSGatewaysResp> resp = listNFSGatewaysWithHttpInfo(limit, offset, q, sort, ospZoneId, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List all nfs gateways
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param ospZoneId osp zone id (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;NFSGatewaysResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewaysResp> listNFSGatewaysWithHttpInfo(Long limit, Long offset, String q, String sort, Long ospZoneId, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listNFSGatewaysValidateBeforeCall(limit, offset, q, sort, ospZoneId, clusterId, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewaysResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all nfs gateways
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param ospZoneId osp zone id (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNFSGatewaysAsync(Long limit, Long offset, String q, String sort, Long ospZoneId, String clusterId, final ApiCallback<NFSGatewaysResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNFSGatewaysValidateBeforeCall(limit, offset, q, sort, ospZoneId, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewaysResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNFSGateway
     * @param body nfs gateway info (required)
     * @param gatewayId nfs gateway id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNFSGatewayCall(NFSGatewayUpdateReq body, Long gatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNFSGatewayValidateBeforeCall(NFSGatewayUpdateReq body, Long gatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNFSGateway(Async)");
        }
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling updateNFSGateway(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNFSGatewayCall(body, gatewayId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update nfs gateway
     * @param body nfs gateway info (required)
     * @param gatewayId nfs gateway id (required)
     * @return NFSGatewayResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayResp updateNFSGateway(NFSGatewayUpdateReq body, Long gatewayId) throws ApiException {
        ApiResponse<NFSGatewayResp> resp = updateNFSGatewayWithHttpInfo(body, gatewayId);
        return resp.getData();
    }

    /**
     * 
     * update nfs gateway
     * @param body nfs gateway info (required)
     * @param gatewayId nfs gateway id (required)
     * @return ApiResponse&lt;NFSGatewayResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayResp> updateNFSGatewayWithHttpInfo(NFSGatewayUpdateReq body, Long gatewayId) throws ApiException {
        com.squareup.okhttp.Call call = updateNFSGatewayValidateBeforeCall(body, gatewayId, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update nfs gateway
     * @param body nfs gateway info (required)
     * @param gatewayId nfs gateway id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNFSGatewayAsync(NFSGatewayUpdateReq body, Long gatewayId, final ApiCallback<NFSGatewayResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNFSGatewayValidateBeforeCall(body, gatewayId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNFSGatewayBucketMap
     * @param body nfs gateway bucket update info (required)
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param force force update bucket map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNFSGatewayBucketMapCall(NFSGatewayBucketMapUpdateReq body, Long gatewayId, Long bucketId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}/buckets/{bucket_id}"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()))
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNFSGatewayBucketMapValidateBeforeCall(NFSGatewayBucketMapUpdateReq body, Long gatewayId, Long bucketId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNFSGatewayBucketMap(Async)");
        }
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling updateNFSGatewayBucketMap(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling updateNFSGatewayBucketMap(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNFSGatewayBucketMapCall(body, gatewayId, bucketId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update nfs gateway bucket
     * @param body nfs gateway bucket update info (required)
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param force force update bucket map (optional)
     * @return NFSGatewayBucketMapResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayBucketMapResp updateNFSGatewayBucketMap(NFSGatewayBucketMapUpdateReq body, Long gatewayId, Long bucketId, Boolean force) throws ApiException {
        ApiResponse<NFSGatewayBucketMapResp> resp = updateNFSGatewayBucketMapWithHttpInfo(body, gatewayId, bucketId, force);
        return resp.getData();
    }

    /**
     * 
     * update nfs gateway bucket
     * @param body nfs gateway bucket update info (required)
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param force force update bucket map (optional)
     * @return ApiResponse&lt;NFSGatewayBucketMapResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayBucketMapResp> updateNFSGatewayBucketMapWithHttpInfo(NFSGatewayBucketMapUpdateReq body, Long gatewayId, Long bucketId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = updateNFSGatewayBucketMapValidateBeforeCall(body, gatewayId, bucketId, force, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayBucketMapResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update nfs gateway bucket
     * @param body nfs gateway bucket update info (required)
     * @param gatewayId nfs gateway id (required)
     * @param bucketId bucket id (required)
     * @param force force update bucket map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNFSGatewayBucketMapAsync(NFSGatewayBucketMapUpdateReq body, Long gatewayId, Long bucketId, Boolean force, final ApiCallback<NFSGatewayBucketMapResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNFSGatewayBucketMapValidateBeforeCall(body, gatewayId, bucketId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayBucketMapResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOspExportConfig
     * @param gatewayId nfs gateway id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOspExportConfigCall(Long gatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/nfs-gateways/{gateway_id}:update-osp-export-config"
            .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOspExportConfigValidateBeforeCall(Long gatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling updateOspExportConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOspExportConfigCall(gatewayId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update osp nfs gateway export config
     * @param gatewayId nfs gateway id (required)
     * @return NFSGatewayResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NFSGatewayResp updateOspExportConfig(Long gatewayId) throws ApiException {
        ApiResponse<NFSGatewayResp> resp = updateOspExportConfigWithHttpInfo(gatewayId);
        return resp.getData();
    }

    /**
     * 
     * update osp nfs gateway export config
     * @param gatewayId nfs gateway id (required)
     * @return ApiResponse&lt;NFSGatewayResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NFSGatewayResp> updateOspExportConfigWithHttpInfo(Long gatewayId) throws ApiException {
        com.squareup.okhttp.Call call = updateOspExportConfigValidateBeforeCall(gatewayId, null, null);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update osp nfs gateway export config
     * @param gatewayId nfs gateway id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOspExportConfigAsync(Long gatewayId, final ApiCallback<NFSGatewayResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOspExportConfigValidateBeforeCall(gatewayId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NFSGatewayResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
