/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsTrashFileJobResp;
import xio.sds.client.model.DfsTrashFilesResp;
import xio.sds.client.model.DfsTrashOpenReq;
import xio.sds.client.model.DfsTrashRemoveFileReq;
import xio.sds.client.model.DfsTrashResp;
import xio.sds.client.model.DfsTrashRestoreFileReq;
import xio.sds.client.model.DfsTrashUpdateReq;
import xio.sds.client.model.DfsTrashesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsTrashesApi {
    private ApiClient apiClient;

    public DfsTrashesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsTrashesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for closeDfsTrash
     * @param dfsTrashId trash id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call closeDfsTrashCall(Long dfsTrashId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/{dfs_trash_id}"
            .replaceAll("\\{" + "dfs_trash_id" + "\\}", apiClient.escapeString(dfsTrashId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call closeDfsTrashValidateBeforeCall(Long dfsTrashId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsTrashId' is set
        if (dfsTrashId == null) {
            throw new ApiException("Missing the required parameter 'dfsTrashId' when calling closeDfsTrash(Async)");
        }
        
        com.squareup.okhttp.Call call = closeDfsTrashCall(dfsTrashId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Close dfs trash
     * @param dfsTrashId trash id (required)
     * @return DfsTrashResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashResp closeDfsTrash(Long dfsTrashId) throws ApiException {
        ApiResponse<DfsTrashResp> resp = closeDfsTrashWithHttpInfo(dfsTrashId);
        return resp.getData();
    }

    /**
     * 
     * Close dfs trash
     * @param dfsTrashId trash id (required)
     * @return ApiResponse&lt;DfsTrashResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashResp> closeDfsTrashWithHttpInfo(Long dfsTrashId) throws ApiException {
        com.squareup.okhttp.Call call = closeDfsTrashValidateBeforeCall(dfsTrashId, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Close dfs trash
     * @param dfsTrashId trash id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call closeDfsTrashAsync(Long dfsTrashId, final ApiCallback<DfsTrashResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = closeDfsTrashValidateBeforeCall(dfsTrashId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for emptyDfsTrash
     * @param dfsTrashId trash id (required)
     * @param force force empty (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emptyDfsTrashCall(Long dfsTrashId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/{dfs_trash_id}:empty"
            .replaceAll("\\{" + "dfs_trash_id" + "\\}", apiClient.escapeString(dfsTrashId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emptyDfsTrashValidateBeforeCall(Long dfsTrashId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsTrashId' is set
        if (dfsTrashId == null) {
            throw new ApiException("Missing the required parameter 'dfsTrashId' when calling emptyDfsTrash(Async)");
        }
        
        com.squareup.okhttp.Call call = emptyDfsTrashCall(dfsTrashId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Empty dfs trash
     * @param dfsTrashId trash id (required)
     * @param force force empty (optional)
     * @return DfsTrashResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashResp emptyDfsTrash(Long dfsTrashId, Boolean force) throws ApiException {
        ApiResponse<DfsTrashResp> resp = emptyDfsTrashWithHttpInfo(dfsTrashId, force);
        return resp.getData();
    }

    /**
     * 
     * Empty dfs trash
     * @param dfsTrashId trash id (required)
     * @param force force empty (optional)
     * @return ApiResponse&lt;DfsTrashResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashResp> emptyDfsTrashWithHttpInfo(Long dfsTrashId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = emptyDfsTrashValidateBeforeCall(dfsTrashId, force, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Empty dfs trash
     * @param dfsTrashId trash id (required)
     * @param force force empty (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emptyDfsTrashAsync(Long dfsTrashId, Boolean force, final ApiCallback<DfsTrashResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emptyDfsTrashValidateBeforeCall(dfsTrashId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsTrash
     * @param dfsTrashId trash id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsTrashCall(Long dfsTrashId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/{dfs_trash_id}"
            .replaceAll("\\{" + "dfs_trash_id" + "\\}", apiClient.escapeString(dfsTrashId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsTrashValidateBeforeCall(Long dfsTrashId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsTrashId' is set
        if (dfsTrashId == null) {
            throw new ApiException("Missing the required parameter 'dfsTrashId' when calling getDfsTrash(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsTrashCall(dfsTrashId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dfs trash
     * @param dfsTrashId trash id (required)
     * @return DfsTrashResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashResp getDfsTrash(Long dfsTrashId) throws ApiException {
        ApiResponse<DfsTrashResp> resp = getDfsTrashWithHttpInfo(dfsTrashId);
        return resp.getData();
    }

    /**
     * 
     * Get dfs trash
     * @param dfsTrashId trash id (required)
     * @return ApiResponse&lt;DfsTrashResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashResp> getDfsTrashWithHttpInfo(Long dfsTrashId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsTrashValidateBeforeCall(dfsTrashId, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dfs trash
     * @param dfsTrashId trash id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsTrashAsync(Long dfsTrashId, final ApiCallback<DfsTrashResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsTrashValidateBeforeCall(dfsTrashId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsTrashFileJobs
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsTrashId trash id (optional)
     * @param path path (optional)
     * @param action action (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsTrashFileJobsCall(Long limit, Long offset, String clusterId, String dfsTrashId, String path, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/:list_trash_file_jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (dfsTrashId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_trash_id", dfsTrashId));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsTrashFileJobsValidateBeforeCall(Long limit, Long offset, String clusterId, String dfsTrashId, String path, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsTrashFileJobsCall(limit, offset, clusterId, dfsTrashId, path, action, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs trash file job
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsTrashId trash id (optional)
     * @param path path (optional)
     * @param action action (optional)
     * @return DfsTrashFileJobResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashFileJobResp listDfsTrashFileJobs(Long limit, Long offset, String clusterId, String dfsTrashId, String path, String action) throws ApiException {
        ApiResponse<DfsTrashFileJobResp> resp = listDfsTrashFileJobsWithHttpInfo(limit, offset, clusterId, dfsTrashId, path, action);
        return resp.getData();
    }

    /**
     * 
     * List dfs trash file job
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsTrashId trash id (optional)
     * @param path path (optional)
     * @param action action (optional)
     * @return ApiResponse&lt;DfsTrashFileJobResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashFileJobResp> listDfsTrashFileJobsWithHttpInfo(Long limit, Long offset, String clusterId, String dfsTrashId, String path, String action) throws ApiException {
        com.squareup.okhttp.Call call = listDfsTrashFileJobsValidateBeforeCall(limit, offset, clusterId, dfsTrashId, path, action, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashFileJobResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs trash file job
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param dfsTrashId trash id (optional)
     * @param path path (optional)
     * @param action action (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsTrashFileJobsAsync(Long limit, Long offset, String clusterId, String dfsTrashId, String path, String action, final ApiCallback<DfsTrashFileJobResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsTrashFileJobsValidateBeforeCall(limit, offset, clusterId, dfsTrashId, path, action, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashFileJobResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsTrashFiles
     * @param dfsTrashId trash id (required)
     * @param limit paging param (optional)
     * @param path parent path (optional)
     * @param start start file for list (optional)
     * @param prefix prefix to filter file or directory (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsTrashFilesCall(Long dfsTrashId, Long limit, String path, String start, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/{dfs_trash_id}:list_trash_files"
            .replaceAll("\\{" + "dfs_trash_id" + "\\}", apiClient.escapeString(dfsTrashId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prefix", prefix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsTrashFilesValidateBeforeCall(Long dfsTrashId, Long limit, String path, String start, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsTrashId' is set
        if (dfsTrashId == null) {
            throw new ApiException("Missing the required parameter 'dfsTrashId' when calling listDfsTrashFiles(Async)");
        }
        
        com.squareup.okhttp.Call call = listDfsTrashFilesCall(dfsTrashId, limit, path, start, prefix, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs trash files
     * @param dfsTrashId trash id (required)
     * @param limit paging param (optional)
     * @param path parent path (optional)
     * @param start start file for list (optional)
     * @param prefix prefix to filter file or directory (optional)
     * @return DfsTrashFilesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashFilesResp listDfsTrashFiles(Long dfsTrashId, Long limit, String path, String start, String prefix) throws ApiException {
        ApiResponse<DfsTrashFilesResp> resp = listDfsTrashFilesWithHttpInfo(dfsTrashId, limit, path, start, prefix);
        return resp.getData();
    }

    /**
     * 
     * List dfs trash files
     * @param dfsTrashId trash id (required)
     * @param limit paging param (optional)
     * @param path parent path (optional)
     * @param start start file for list (optional)
     * @param prefix prefix to filter file or directory (optional)
     * @return ApiResponse&lt;DfsTrashFilesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashFilesResp> listDfsTrashFilesWithHttpInfo(Long dfsTrashId, Long limit, String path, String start, String prefix) throws ApiException {
        com.squareup.okhttp.Call call = listDfsTrashFilesValidateBeforeCall(dfsTrashId, limit, path, start, prefix, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashFilesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs trash files
     * @param dfsTrashId trash id (required)
     * @param limit paging param (optional)
     * @param path parent path (optional)
     * @param start start file for list (optional)
     * @param prefix prefix to filter file or directory (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsTrashFilesAsync(Long dfsTrashId, Long limit, String path, String start, String prefix, final ApiCallback<DfsTrashFilesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsTrashFilesValidateBeforeCall(dfsTrashId, limit, path, start, prefix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashFilesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsTrashes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param status status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsTrashesCall(Long limit, Long offset, String q, String sort, String clusterId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsTrashesValidateBeforeCall(Long limit, Long offset, String q, String sort, String clusterId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsTrashesCall(limit, offset, q, sort, clusterId, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs trashes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param status status (optional)
     * @return DfsTrashesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashesResp listDfsTrashes(Long limit, Long offset, String q, String sort, String clusterId, String status) throws ApiException {
        ApiResponse<DfsTrashesResp> resp = listDfsTrashesWithHttpInfo(limit, offset, q, sort, clusterId, status);
        return resp.getData();
    }

    /**
     * 
     * List dfs trashes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param status status (optional)
     * @return ApiResponse&lt;DfsTrashesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashesResp> listDfsTrashesWithHttpInfo(Long limit, Long offset, String q, String sort, String clusterId, String status) throws ApiException {
        com.squareup.okhttp.Call call = listDfsTrashesValidateBeforeCall(limit, offset, q, sort, clusterId, status, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs trashes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param status status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsTrashesAsync(Long limit, Long offset, String q, String sort, String clusterId, String status, final ApiCallback<DfsTrashesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsTrashesValidateBeforeCall(limit, offset, q, sort, clusterId, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openDfsTrash
     * @param body trash info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openDfsTrashCall(DfsTrashOpenReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openDfsTrashValidateBeforeCall(DfsTrashOpenReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling openDfsTrash(Async)");
        }
        
        com.squareup.okhttp.Call call = openDfsTrashCall(body, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dfs trash
     * @param body trash info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return DfsTrashResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashResp openDfsTrash(DfsTrashOpenReq body, Boolean allowPathCreate) throws ApiException {
        ApiResponse<DfsTrashResp> resp = openDfsTrashWithHttpInfo(body, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * Create dfs trash
     * @param body trash info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return ApiResponse&lt;DfsTrashResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashResp> openDfsTrashWithHttpInfo(DfsTrashOpenReq body, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = openDfsTrashValidateBeforeCall(body, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dfs trash
     * @param body trash info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openDfsTrashAsync(DfsTrashOpenReq body, Boolean allowPathCreate, final ApiCallback<DfsTrashResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openDfsTrashValidateBeforeCall(body, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeDfsTrashFile
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeDfsTrashFileCall(DfsTrashRemoveFileReq body, Long dfsTrashId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/{dfs_trash_id}:remove-file"
            .replaceAll("\\{" + "dfs_trash_id" + "\\}", apiClient.escapeString(dfsTrashId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeDfsTrashFileValidateBeforeCall(DfsTrashRemoveFileReq body, Long dfsTrashId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeDfsTrashFile(Async)");
        }
        // verify the required parameter 'dfsTrashId' is set
        if (dfsTrashId == null) {
            throw new ApiException("Missing the required parameter 'dfsTrashId' when calling removeDfsTrashFile(Async)");
        }
        
        com.squareup.okhttp.Call call = removeDfsTrashFileCall(body, dfsTrashId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Remove dfs trash file
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @return DfsTrashFileJobResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashFileJobResp removeDfsTrashFile(DfsTrashRemoveFileReq body, Long dfsTrashId) throws ApiException {
        ApiResponse<DfsTrashFileJobResp> resp = removeDfsTrashFileWithHttpInfo(body, dfsTrashId);
        return resp.getData();
    }

    /**
     * 
     * Remove dfs trash file
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @return ApiResponse&lt;DfsTrashFileJobResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashFileJobResp> removeDfsTrashFileWithHttpInfo(DfsTrashRemoveFileReq body, Long dfsTrashId) throws ApiException {
        com.squareup.okhttp.Call call = removeDfsTrashFileValidateBeforeCall(body, dfsTrashId, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashFileJobResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove dfs trash file
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeDfsTrashFileAsync(DfsTrashRemoveFileReq body, Long dfsTrashId, final ApiCallback<DfsTrashFileJobResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeDfsTrashFileValidateBeforeCall(body, dfsTrashId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashFileJobResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restoreDfsTrashFile
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @param force force restore (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restoreDfsTrashFileCall(DfsTrashRestoreFileReq body, Long dfsTrashId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/{dfs_trash_id}:restore-file"
            .replaceAll("\\{" + "dfs_trash_id" + "\\}", apiClient.escapeString(dfsTrashId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restoreDfsTrashFileValidateBeforeCall(DfsTrashRestoreFileReq body, Long dfsTrashId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling restoreDfsTrashFile(Async)");
        }
        // verify the required parameter 'dfsTrashId' is set
        if (dfsTrashId == null) {
            throw new ApiException("Missing the required parameter 'dfsTrashId' when calling restoreDfsTrashFile(Async)");
        }
        
        com.squareup.okhttp.Call call = restoreDfsTrashFileCall(body, dfsTrashId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Restore dfs trash file
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @param force force restore (optional)
     * @return DfsTrashFileJobResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashFileJobResp restoreDfsTrashFile(DfsTrashRestoreFileReq body, Long dfsTrashId, Boolean force) throws ApiException {
        ApiResponse<DfsTrashFileJobResp> resp = restoreDfsTrashFileWithHttpInfo(body, dfsTrashId, force);
        return resp.getData();
    }

    /**
     * 
     * Restore dfs trash file
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @param force force restore (optional)
     * @return ApiResponse&lt;DfsTrashFileJobResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashFileJobResp> restoreDfsTrashFileWithHttpInfo(DfsTrashRestoreFileReq body, Long dfsTrashId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = restoreDfsTrashFileValidateBeforeCall(body, dfsTrashId, force, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashFileJobResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restore dfs trash file
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @param force force restore (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restoreDfsTrashFileAsync(DfsTrashRestoreFileReq body, Long dfsTrashId, Boolean force, final ApiCallback<DfsTrashFileJobResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restoreDfsTrashFileValidateBeforeCall(body, dfsTrashId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashFileJobResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchDfsTrashFiles
     * @param dfsTrashId trash id (required)
     * @param limit paging param (optional)
     * @param path subdirectory of trash path (optional)
     * @param start start file for list (optional)
     * @param prefix prefix to filter file or directory (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchDfsTrashFilesCall(Long dfsTrashId, Long limit, String path, String start, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/{dfs_trash_id}:search_trash_files"
            .replaceAll("\\{" + "dfs_trash_id" + "\\}", apiClient.escapeString(dfsTrashId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prefix", prefix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchDfsTrashFilesValidateBeforeCall(Long dfsTrashId, Long limit, String path, String start, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsTrashId' is set
        if (dfsTrashId == null) {
            throw new ApiException("Missing the required parameter 'dfsTrashId' when calling searchDfsTrashFiles(Async)");
        }
        
        com.squareup.okhttp.Call call = searchDfsTrashFilesCall(dfsTrashId, limit, path, start, prefix, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Search dfs trash files
     * @param dfsTrashId trash id (required)
     * @param limit paging param (optional)
     * @param path subdirectory of trash path (optional)
     * @param start start file for list (optional)
     * @param prefix prefix to filter file or directory (optional)
     * @return DfsTrashFilesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashFilesResp searchDfsTrashFiles(Long dfsTrashId, Long limit, String path, String start, String prefix) throws ApiException {
        ApiResponse<DfsTrashFilesResp> resp = searchDfsTrashFilesWithHttpInfo(dfsTrashId, limit, path, start, prefix);
        return resp.getData();
    }

    /**
     * 
     * Search dfs trash files
     * @param dfsTrashId trash id (required)
     * @param limit paging param (optional)
     * @param path subdirectory of trash path (optional)
     * @param start start file for list (optional)
     * @param prefix prefix to filter file or directory (optional)
     * @return ApiResponse&lt;DfsTrashFilesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashFilesResp> searchDfsTrashFilesWithHttpInfo(Long dfsTrashId, Long limit, String path, String start, String prefix) throws ApiException {
        com.squareup.okhttp.Call call = searchDfsTrashFilesValidateBeforeCall(dfsTrashId, limit, path, start, prefix, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashFilesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search dfs trash files
     * @param dfsTrashId trash id (required)
     * @param limit paging param (optional)
     * @param path subdirectory of trash path (optional)
     * @param start start file for list (optional)
     * @param prefix prefix to filter file or directory (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchDfsTrashFilesAsync(Long dfsTrashId, Long limit, String path, String start, String prefix, final ApiCallback<DfsTrashFilesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchDfsTrashFilesValidateBeforeCall(dfsTrashId, limit, path, start, prefix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashFilesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsTrash
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsTrashCall(DfsTrashUpdateReq body, Long dfsTrashId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-trashes/{dfs_trash_id}"
            .replaceAll("\\{" + "dfs_trash_id" + "\\}", apiClient.escapeString(dfsTrashId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsTrashValidateBeforeCall(DfsTrashUpdateReq body, Long dfsTrashId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsTrash(Async)");
        }
        // verify the required parameter 'dfsTrashId' is set
        if (dfsTrashId == null) {
            throw new ApiException("Missing the required parameter 'dfsTrashId' when calling updateDfsTrash(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsTrashCall(body, dfsTrashId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs trash
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @return DfsTrashResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsTrashResp updateDfsTrash(DfsTrashUpdateReq body, Long dfsTrashId) throws ApiException {
        ApiResponse<DfsTrashResp> resp = updateDfsTrashWithHttpInfo(body, dfsTrashId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs trash
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @return ApiResponse&lt;DfsTrashResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsTrashResp> updateDfsTrashWithHttpInfo(DfsTrashUpdateReq body, Long dfsTrashId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsTrashValidateBeforeCall(body, dfsTrashId, null, null);
        Type localVarReturnType = new TypeToken<DfsTrashResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs trash
     * @param body trash info (required)
     * @param dfsTrashId trash id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsTrashAsync(DfsTrashUpdateReq body, Long dfsTrashId, final ApiCallback<DfsTrashResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsTrashValidateBeforeCall(body, dfsTrashId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsTrashResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
