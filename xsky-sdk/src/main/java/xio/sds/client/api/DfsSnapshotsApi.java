/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DfsSnapShotsOverviewPageResp;
import xio.sds.client.model.DfsSnapshotCreateReq;
import xio.sds.client.model.DfsSnapshotResp;
import xio.sds.client.model.DfsSnapshotRollbackReq;
import xio.sds.client.model.DfsSnapshotUpdateReq;
import xio.sds.client.model.DfsSnapshotsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DfsSnapshotsApi {
    private ApiClient apiClient;

    public DfsSnapshotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DfsSnapshotsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDfsSnapshot
     * @param body dfs snapshot info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDfsSnapshotCall(DfsSnapshotCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-snapshots/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDfsSnapshotValidateBeforeCall(DfsSnapshotCreateReq body, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDfsSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = createDfsSnapshotCall(body, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dfs snapshot
     * @param body dfs snapshot info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return DfsSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSnapshotResp createDfsSnapshot(DfsSnapshotCreateReq body, Boolean allowPathCreate) throws ApiException {
        ApiResponse<DfsSnapshotResp> resp = createDfsSnapshotWithHttpInfo(body, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * Create dfs snapshot
     * @param body dfs snapshot info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @return ApiResponse&lt;DfsSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSnapshotResp> createDfsSnapshotWithHttpInfo(DfsSnapshotCreateReq body, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = createDfsSnapshotValidateBeforeCall(body, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dfs snapshot
     * @param body dfs snapshot info (required)
     * @param allowPathCreate allow create path when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDfsSnapshotAsync(DfsSnapshotCreateReq body, Boolean allowPathCreate, final ApiCallback<DfsSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDfsSnapshotValidateBeforeCall(body, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDfsSnapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDfsSnapshotCall(Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-snapshots/{dfs_snapshot_id}"
            .replaceAll("\\{" + "dfs_snapshot_id" + "\\}", apiClient.escapeString(dfsSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDfsSnapshotValidateBeforeCall(Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsSnapshotId' is set
        if (dfsSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'dfsSnapshotId' when calling deleteDfsSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDfsSnapshotCall(dfsSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete a dfs snapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @return DfsSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSnapshotResp deleteDfsSnapshot(Long dfsSnapshotId) throws ApiException {
        ApiResponse<DfsSnapshotResp> resp = deleteDfsSnapshotWithHttpInfo(dfsSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * Delete a dfs snapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @return ApiResponse&lt;DfsSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSnapshotResp> deleteDfsSnapshotWithHttpInfo(Long dfsSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDfsSnapshotValidateBeforeCall(dfsSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a dfs snapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDfsSnapshotAsync(Long dfsSnapshotId, final ApiCallback<DfsSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDfsSnapshotValidateBeforeCall(dfsSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsSnapshot
     * @param dfsSnapshotId the dfs snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsSnapshotCall(Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-snapshots/{dfs_snapshot_id}"
            .replaceAll("\\{" + "dfs_snapshot_id" + "\\}", apiClient.escapeString(dfsSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsSnapshotValidateBeforeCall(Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsSnapshotId' is set
        if (dfsSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'dfsSnapshotId' when calling getDfsSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = getDfsSnapshotCall(dfsSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get dfs snapshot
     * @param dfsSnapshotId the dfs snapshot id (required)
     * @return DfsSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSnapshotResp getDfsSnapshot(Long dfsSnapshotId) throws ApiException {
        ApiResponse<DfsSnapshotResp> resp = getDfsSnapshotWithHttpInfo(dfsSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * get dfs snapshot
     * @param dfsSnapshotId the dfs snapshot id (required)
     * @return ApiResponse&lt;DfsSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSnapshotResp> getDfsSnapshotWithHttpInfo(Long dfsSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = getDfsSnapshotValidateBeforeCall(dfsSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get dfs snapshot
     * @param dfsSnapshotId the dfs snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsSnapshotAsync(Long dfsSnapshotId, final ApiCallback<DfsSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsSnapshotValidateBeforeCall(dfsSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDfsSnapshotsOverViewPage
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDfsSnapshotsOverViewPageCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-snapshots/overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDfsSnapshotsOverViewPageValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getDfsSnapshotsOverViewPageCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get dfs snapshots overview page
     * @return DfsSnapShotsOverviewPageResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSnapShotsOverviewPageResp getDfsSnapshotsOverViewPage() throws ApiException {
        ApiResponse<DfsSnapShotsOverviewPageResp> resp = getDfsSnapshotsOverViewPageWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * get dfs snapshots overview page
     * @return ApiResponse&lt;DfsSnapShotsOverviewPageResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSnapShotsOverviewPageResp> getDfsSnapshotsOverViewPageWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getDfsSnapshotsOverViewPageValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<DfsSnapShotsOverviewPageResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get dfs snapshots overview page
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDfsSnapshotsOverViewPageAsync(final ApiCallback<DfsSnapShotsOverviewPageResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDfsSnapshotsOverViewPageValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSnapShotsOverviewPageResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDfsSnapshots
     * @param clusterId cluster id (optional)
     * @param dfsPathId related dfs path id (optional)
     * @param dpDfsSnapshotId dp dfs snapshot id (optional)
     * @param path related dfs path (optional)
     * @param name name of dfs snapshot (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDfsSnapshotsCall(String clusterId, Long dfsPathId, Long dpDfsSnapshotId, String path, String name, Long limit, Long offset, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-snapshots/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (dfsPathId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_path_id", dfsPathId));
        if (dpDfsSnapshotId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dp_dfs_snapshot_id", dpDfsSnapshotId));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDfsSnapshotsValidateBeforeCall(String clusterId, Long dfsPathId, Long dpDfsSnapshotId, String path, String name, Long limit, Long offset, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDfsSnapshotsCall(clusterId, dfsPathId, dpDfsSnapshotId, path, name, limit, offset, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dfs snapshots
     * @param clusterId cluster id (optional)
     * @param dfsPathId related dfs path id (optional)
     * @param dpDfsSnapshotId dp dfs snapshot id (optional)
     * @param path related dfs path (optional)
     * @param name name of dfs snapshot (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return DfsSnapshotsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSnapshotsResp listDfsSnapshots(String clusterId, Long dfsPathId, Long dpDfsSnapshotId, String path, String name, Long limit, Long offset, String q, String sort) throws ApiException {
        ApiResponse<DfsSnapshotsResp> resp = listDfsSnapshotsWithHttpInfo(clusterId, dfsPathId, dpDfsSnapshotId, path, name, limit, offset, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List dfs snapshots
     * @param clusterId cluster id (optional)
     * @param dfsPathId related dfs path id (optional)
     * @param dpDfsSnapshotId dp dfs snapshot id (optional)
     * @param path related dfs path (optional)
     * @param name name of dfs snapshot (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;DfsSnapshotsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSnapshotsResp> listDfsSnapshotsWithHttpInfo(String clusterId, Long dfsPathId, Long dpDfsSnapshotId, String path, String name, Long limit, Long offset, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listDfsSnapshotsValidateBeforeCall(clusterId, dfsPathId, dpDfsSnapshotId, path, name, limit, offset, q, sort, null, null);
        Type localVarReturnType = new TypeToken<DfsSnapshotsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dfs snapshots
     * @param clusterId cluster id (optional)
     * @param dfsPathId related dfs path id (optional)
     * @param dpDfsSnapshotId dp dfs snapshot id (optional)
     * @param path related dfs path (optional)
     * @param name name of dfs snapshot (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDfsSnapshotsAsync(String clusterId, Long dfsPathId, Long dpDfsSnapshotId, String path, String name, Long limit, Long offset, String q, String sort, final ApiCallback<DfsSnapshotsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDfsSnapshotsValidateBeforeCall(clusterId, dfsPathId, dpDfsSnapshotId, path, name, limit, offset, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSnapshotsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lockDfsSnapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lockDfsSnapshotCall(Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-snapshots/{dfs_snapshot_id}:lock"
            .replaceAll("\\{" + "dfs_snapshot_id" + "\\}", apiClient.escapeString(dfsSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lockDfsSnapshotValidateBeforeCall(Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsSnapshotId' is set
        if (dfsSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'dfsSnapshotId' when calling lockDfsSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = lockDfsSnapshotCall(dfsSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Lock dfs snapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @return DfsSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSnapshotResp lockDfsSnapshot(Long dfsSnapshotId) throws ApiException {
        ApiResponse<DfsSnapshotResp> resp = lockDfsSnapshotWithHttpInfo(dfsSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * Lock dfs snapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @return ApiResponse&lt;DfsSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSnapshotResp> lockDfsSnapshotWithHttpInfo(Long dfsSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = lockDfsSnapshotValidateBeforeCall(dfsSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lock dfs snapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lockDfsSnapshotAsync(Long dfsSnapshotId, final ApiCallback<DfsSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lockDfsSnapshotValidateBeforeCall(dfsSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rollbackDfsSnapshot
     * @param body snapshot rollback info (required)
     * @param dfsSnapshotId dfs snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rollbackDfsSnapshotCall(DfsSnapshotRollbackReq body, Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-snapshots/{dfs_snapshot_id}:rollback"
            .replaceAll("\\{" + "dfs_snapshot_id" + "\\}", apiClient.escapeString(dfsSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rollbackDfsSnapshotValidateBeforeCall(DfsSnapshotRollbackReq body, Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rollbackDfsSnapshot(Async)");
        }
        // verify the required parameter 'dfsSnapshotId' is set
        if (dfsSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'dfsSnapshotId' when calling rollbackDfsSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = rollbackDfsSnapshotCall(body, dfsSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Rollback dfs snapshot
     * @param body snapshot rollback info (required)
     * @param dfsSnapshotId dfs snapshot id (required)
     * @return DfsSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSnapshotResp rollbackDfsSnapshot(DfsSnapshotRollbackReq body, Long dfsSnapshotId) throws ApiException {
        ApiResponse<DfsSnapshotResp> resp = rollbackDfsSnapshotWithHttpInfo(body, dfsSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * Rollback dfs snapshot
     * @param body snapshot rollback info (required)
     * @param dfsSnapshotId dfs snapshot id (required)
     * @return ApiResponse&lt;DfsSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSnapshotResp> rollbackDfsSnapshotWithHttpInfo(DfsSnapshotRollbackReq body, Long dfsSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = rollbackDfsSnapshotValidateBeforeCall(body, dfsSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rollback dfs snapshot
     * @param body snapshot rollback info (required)
     * @param dfsSnapshotId dfs snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rollbackDfsSnapshotAsync(DfsSnapshotRollbackReq body, Long dfsSnapshotId, final ApiCallback<DfsSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rollbackDfsSnapshotValidateBeforeCall(body, dfsSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unlockDfsSnapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unlockDfsSnapshotCall(Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-snapshots/{dfs_snapshot_id}:unlock"
            .replaceAll("\\{" + "dfs_snapshot_id" + "\\}", apiClient.escapeString(dfsSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unlockDfsSnapshotValidateBeforeCall(Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dfsSnapshotId' is set
        if (dfsSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'dfsSnapshotId' when calling unlockDfsSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = unlockDfsSnapshotCall(dfsSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unlock dfs snapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @return DfsSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSnapshotResp unlockDfsSnapshot(Long dfsSnapshotId) throws ApiException {
        ApiResponse<DfsSnapshotResp> resp = unlockDfsSnapshotWithHttpInfo(dfsSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * Unlock dfs snapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @return ApiResponse&lt;DfsSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSnapshotResp> unlockDfsSnapshotWithHttpInfo(Long dfsSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = unlockDfsSnapshotValidateBeforeCall(dfsSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unlock dfs snapshot
     * @param dfsSnapshotId dfs snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unlockDfsSnapshotAsync(Long dfsSnapshotId, final ApiCallback<DfsSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unlockDfsSnapshotValidateBeforeCall(dfsSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDfsSnapshot
     * @param body dfs snapshot info (required)
     * @param dfsSnapshotId dfs snapshot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDfsSnapshotCall(DfsSnapshotUpdateReq body, Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dfs-snapshots/{dfs_snapshot_id}"
            .replaceAll("\\{" + "dfs_snapshot_id" + "\\}", apiClient.escapeString(dfsSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDfsSnapshotValidateBeforeCall(DfsSnapshotUpdateReq body, Long dfsSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDfsSnapshot(Async)");
        }
        // verify the required parameter 'dfsSnapshotId' is set
        if (dfsSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'dfsSnapshotId' when calling updateDfsSnapshot(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDfsSnapshotCall(body, dfsSnapshotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dfs snapshot
     * @param body dfs snapshot info (required)
     * @param dfsSnapshotId dfs snapshot id (required)
     * @return DfsSnapshotResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DfsSnapshotResp updateDfsSnapshot(DfsSnapshotUpdateReq body, Long dfsSnapshotId) throws ApiException {
        ApiResponse<DfsSnapshotResp> resp = updateDfsSnapshotWithHttpInfo(body, dfsSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * Update dfs snapshot
     * @param body dfs snapshot info (required)
     * @param dfsSnapshotId dfs snapshot id (required)
     * @return ApiResponse&lt;DfsSnapshotResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DfsSnapshotResp> updateDfsSnapshotWithHttpInfo(DfsSnapshotUpdateReq body, Long dfsSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = updateDfsSnapshotValidateBeforeCall(body, dfsSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dfs snapshot
     * @param body dfs snapshot info (required)
     * @param dfsSnapshotId dfs snapshot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDfsSnapshotAsync(DfsSnapshotUpdateReq body, Long dfsSnapshotId, final ApiCallback<DfsSnapshotResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDfsSnapshotValidateBeforeCall(body, dfsSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DfsSnapshotResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
