/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.MultiVolumesSamplesResp;
import xio.sds.client.model.UpdateVolumeStatReq;
import xio.sds.client.model.VolumeAsyncReplicationProtectionReq;
import xio.sds.client.model.VolumeBackupProtectionReq;
import xio.sds.client.model.VolumeCrcSetReq;
import xio.sds.client.model.VolumeCreateReq;
import xio.sds.client.model.VolumeMigrateReq;
import xio.sds.client.model.VolumeReplicationSetReq;
import xio.sds.client.model.VolumeResp;
import xio.sds.client.model.VolumeSamplesResp;
import xio.sds.client.model.VolumeSnapshotProtectionReq;
import xio.sds.client.model.VolumeUpdateReq;
import xio.sds.client.model.VolumeUpdateVolumeNameReq;
import xio.sds.client.model.VolumesResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlockVolumesApi {
    private ApiClient apiClient;

    public BlockVolumesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlockVolumesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for batchGetBlockVolumeSamples
     * @param ids volume ids; example: id1,id2,id3 (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call batchGetBlockVolumeSamplesCall(String ids, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/samples";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call batchGetBlockVolumeSamplesValidateBeforeCall(String ids, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling batchGetBlockVolumeSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = batchGetBlockVolumeSamplesCall(ids, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get samples of multiple block volumes
     * @param ids volume ids; example: id1,id2,id3 (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return MultiVolumesSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiVolumesSamplesResp batchGetBlockVolumeSamples(String ids, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<MultiVolumesSamplesResp> resp = batchGetBlockVolumeSamplesWithHttpInfo(ids, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * Get samples of multiple block volumes
     * @param ids volume ids; example: id1,id2,id3 (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;MultiVolumesSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiVolumesSamplesResp> batchGetBlockVolumeSamplesWithHttpInfo(String ids, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = batchGetBlockVolumeSamplesValidateBeforeCall(ids, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<MultiVolumesSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get samples of multiple block volumes
     * @param ids volume ids; example: id1,id2,id3 (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call batchGetBlockVolumeSamplesAsync(String ids, String durationBegin, String durationEnd, String period, final ApiCallback<MultiVolumesSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = batchGetBlockVolumeSamplesValidateBeforeCall(ids, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiVolumesSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBlockVolume
     * @param body volume info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBlockVolumeCall(VolumeCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBlockVolumeValidateBeforeCall(VolumeCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBlockVolume(Async)");
        }
        
        com.squareup.okhttp.Call call = createBlockVolumeCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create block volume
     * @param body volume info (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp createBlockVolume(VolumeCreateReq body) throws ApiException {
        ApiResponse<VolumeResp> resp = createBlockVolumeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Create block volume
     * @param body volume info (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> createBlockVolumeWithHttpInfo(VolumeCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createBlockVolumeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create block volume
     * @param body volume info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBlockVolumeAsync(VolumeCreateReq body, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBlockVolumeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBlockVolume
     * @param blockVolumeId volume id (required)
     * @param bypassTrash bypass trash or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBlockVolumeCall(Long blockVolumeId, Boolean bypassTrash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bypassTrash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bypass_trash", bypassTrash));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBlockVolumeValidateBeforeCall(Long blockVolumeId, Boolean bypassTrash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling deleteBlockVolume(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBlockVolumeCall(blockVolumeId, bypassTrash, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete block volume
     * @param blockVolumeId volume id (required)
     * @param bypassTrash bypass trash or not (optional)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp deleteBlockVolume(Long blockVolumeId, Boolean bypassTrash) throws ApiException {
        ApiResponse<VolumeResp> resp = deleteBlockVolumeWithHttpInfo(blockVolumeId, bypassTrash);
        return resp.getData();
    }

    /**
     * 
     * Delete block volume
     * @param blockVolumeId volume id (required)
     * @param bypassTrash bypass trash or not (optional)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> deleteBlockVolumeWithHttpInfo(Long blockVolumeId, Boolean bypassTrash) throws ApiException {
        com.squareup.okhttp.Call call = deleteBlockVolumeValidateBeforeCall(blockVolumeId, bypassTrash, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete block volume
     * @param blockVolumeId volume id (required)
     * @param bypassTrash bypass trash or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBlockVolumeAsync(Long blockVolumeId, Boolean bypassTrash, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBlockVolumeValidateBeforeCall(blockVolumeId, bypassTrash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBlockVolume
     * @param blockVolumeId block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlockVolumeCall(Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlockVolumeValidateBeforeCall(Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling getBlockVolume(Async)");
        }
        
        com.squareup.okhttp.Call call = getBlockVolumeCall(blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a block volume
     * @param blockVolumeId block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp getBlockVolume(Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = getBlockVolumeWithHttpInfo(blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * get a block volume
     * @param blockVolumeId block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> getBlockVolumeWithHttpInfo(Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = getBlockVolumeValidateBeforeCall(blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a block volume
     * @param blockVolumeId block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlockVolumeAsync(Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlockVolumeValidateBeforeCall(blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBlockVolumeSamples
     * @param blockVolumeId block volume id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlockVolumeSamplesCall(Long blockVolumeId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}/samples"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlockVolumeSamplesValidateBeforeCall(Long blockVolumeId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling getBlockVolumeSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getBlockVolumeSamplesCall(blockVolumeId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a block volume&#x27;s Samples
     * @param blockVolumeId block volume id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return VolumeSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeSamplesResp getBlockVolumeSamples(Long blockVolumeId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<VolumeSamplesResp> resp = getBlockVolumeSamplesWithHttpInfo(blockVolumeId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get a block volume&#x27;s Samples
     * @param blockVolumeId block volume id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;VolumeSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeSamplesResp> getBlockVolumeSamplesWithHttpInfo(Long blockVolumeId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getBlockVolumeSamplesValidateBeforeCall(blockVolumeId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<VolumeSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a block volume&#x27;s Samples
     * @param blockVolumeId block volume id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlockVolumeSamplesAsync(Long blockVolumeId, String durationBegin, String durationEnd, String period, final ApiCallback<VolumeSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlockVolumeSamplesValidateBeforeCall(blockVolumeId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBlockVolumes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param poolId The id of the pool volumes belong to (optional)
     * @param poolName The pool_name of the pool volumes belong to (optional)
     * @param clusterId cluster id (optional)
     * @param blockSnapshotId related snapshot id (optional)
     * @param name name of volume (optional)
     * @param namePrefix name prefix of volume (optional)
     * @param volumeName volume_name of volume (optional)
     * @param uid uid of volume (optional)
     * @param clientGroupId related client group id (optional)
     * @param mappingGroupId related mapping group id (optional)
     * @param excludeMappingGroupId exclude mapping group id, with access path id (optional)
     * @param accessPathId related access path id (optional)
     * @param passive passive or not (optional)
     * @param recycled recycled or not (optional)
     * @param status filter with status (optional)
     * @param withNotUsed list with not used volumes, can be used with access path id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param all show all volumes (optional)
     * @param dpBlockBackupPolicyId show volumes of specific dp block backup policy (optional)
     * @param dpBlockAsyncReplicationPolicyId show volumes of specific dp block async replication policy (optional)
     * @param couldHaveIo show volumes without volume that cannot have io (optional)
     * @param rbdClientId rbd client id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBlockVolumesCall(Long limit, Long offset, Long poolId, String poolName, String clusterId, Long blockSnapshotId, String name, String namePrefix, String volumeName, String uid, Long clientGroupId, Long mappingGroupId, Long excludeMappingGroupId, Long accessPathId, Boolean passive, Boolean recycled, String status, Boolean withNotUsed, String q, String sort, Boolean all, Long dpBlockBackupPolicyId, Long dpBlockAsyncReplicationPolicyId, Boolean couldHaveIo, Long rbdClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (poolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pool_id", poolId));
        if (poolName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pool_name", poolName));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (blockSnapshotId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("block_snapshot_id", blockSnapshotId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (namePrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name_prefix", namePrefix));
        if (volumeName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("volume_name", volumeName));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));
        if (clientGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_group_id", clientGroupId));
        if (mappingGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mapping_group_id", mappingGroupId));
        if (excludeMappingGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_mapping_group_id", excludeMappingGroupId));
        if (accessPathId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_path_id", accessPathId));
        if (passive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passive", passive));
        if (recycled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recycled", recycled));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (withNotUsed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_not_used", withNotUsed));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (all != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
        if (dpBlockBackupPolicyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dp_block_backup_policy_id", dpBlockBackupPolicyId));
        if (dpBlockAsyncReplicationPolicyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dp_block_async_replication_policy_id", dpBlockAsyncReplicationPolicyId));
        if (couldHaveIo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("could_have_io", couldHaveIo));
        if (rbdClientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rbd_client_id", rbdClientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBlockVolumesValidateBeforeCall(Long limit, Long offset, Long poolId, String poolName, String clusterId, Long blockSnapshotId, String name, String namePrefix, String volumeName, String uid, Long clientGroupId, Long mappingGroupId, Long excludeMappingGroupId, Long accessPathId, Boolean passive, Boolean recycled, String status, Boolean withNotUsed, String q, String sort, Boolean all, Long dpBlockBackupPolicyId, Long dpBlockAsyncReplicationPolicyId, Boolean couldHaveIo, Long rbdClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listBlockVolumesCall(limit, offset, poolId, poolName, clusterId, blockSnapshotId, name, namePrefix, volumeName, uid, clientGroupId, mappingGroupId, excludeMappingGroupId, accessPathId, passive, recycled, status, withNotUsed, q, sort, all, dpBlockBackupPolicyId, dpBlockAsyncReplicationPolicyId, couldHaveIo, rbdClientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List block volumes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param poolId The id of the pool volumes belong to (optional)
     * @param poolName The pool_name of the pool volumes belong to (optional)
     * @param clusterId cluster id (optional)
     * @param blockSnapshotId related snapshot id (optional)
     * @param name name of volume (optional)
     * @param namePrefix name prefix of volume (optional)
     * @param volumeName volume_name of volume (optional)
     * @param uid uid of volume (optional)
     * @param clientGroupId related client group id (optional)
     * @param mappingGroupId related mapping group id (optional)
     * @param excludeMappingGroupId exclude mapping group id, with access path id (optional)
     * @param accessPathId related access path id (optional)
     * @param passive passive or not (optional)
     * @param recycled recycled or not (optional)
     * @param status filter with status (optional)
     * @param withNotUsed list with not used volumes, can be used with access path id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param all show all volumes (optional)
     * @param dpBlockBackupPolicyId show volumes of specific dp block backup policy (optional)
     * @param dpBlockAsyncReplicationPolicyId show volumes of specific dp block async replication policy (optional)
     * @param couldHaveIo show volumes without volume that cannot have io (optional)
     * @param rbdClientId rbd client id (optional)
     * @return VolumesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumesResp listBlockVolumes(Long limit, Long offset, Long poolId, String poolName, String clusterId, Long blockSnapshotId, String name, String namePrefix, String volumeName, String uid, Long clientGroupId, Long mappingGroupId, Long excludeMappingGroupId, Long accessPathId, Boolean passive, Boolean recycled, String status, Boolean withNotUsed, String q, String sort, Boolean all, Long dpBlockBackupPolicyId, Long dpBlockAsyncReplicationPolicyId, Boolean couldHaveIo, Long rbdClientId) throws ApiException {
        ApiResponse<VolumesResp> resp = listBlockVolumesWithHttpInfo(limit, offset, poolId, poolName, clusterId, blockSnapshotId, name, namePrefix, volumeName, uid, clientGroupId, mappingGroupId, excludeMappingGroupId, accessPathId, passive, recycled, status, withNotUsed, q, sort, all, dpBlockBackupPolicyId, dpBlockAsyncReplicationPolicyId, couldHaveIo, rbdClientId);
        return resp.getData();
    }

    /**
     * 
     * List block volumes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param poolId The id of the pool volumes belong to (optional)
     * @param poolName The pool_name of the pool volumes belong to (optional)
     * @param clusterId cluster id (optional)
     * @param blockSnapshotId related snapshot id (optional)
     * @param name name of volume (optional)
     * @param namePrefix name prefix of volume (optional)
     * @param volumeName volume_name of volume (optional)
     * @param uid uid of volume (optional)
     * @param clientGroupId related client group id (optional)
     * @param mappingGroupId related mapping group id (optional)
     * @param excludeMappingGroupId exclude mapping group id, with access path id (optional)
     * @param accessPathId related access path id (optional)
     * @param passive passive or not (optional)
     * @param recycled recycled or not (optional)
     * @param status filter with status (optional)
     * @param withNotUsed list with not used volumes, can be used with access path id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param all show all volumes (optional)
     * @param dpBlockBackupPolicyId show volumes of specific dp block backup policy (optional)
     * @param dpBlockAsyncReplicationPolicyId show volumes of specific dp block async replication policy (optional)
     * @param couldHaveIo show volumes without volume that cannot have io (optional)
     * @param rbdClientId rbd client id (optional)
     * @return ApiResponse&lt;VolumesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumesResp> listBlockVolumesWithHttpInfo(Long limit, Long offset, Long poolId, String poolName, String clusterId, Long blockSnapshotId, String name, String namePrefix, String volumeName, String uid, Long clientGroupId, Long mappingGroupId, Long excludeMappingGroupId, Long accessPathId, Boolean passive, Boolean recycled, String status, Boolean withNotUsed, String q, String sort, Boolean all, Long dpBlockBackupPolicyId, Long dpBlockAsyncReplicationPolicyId, Boolean couldHaveIo, Long rbdClientId) throws ApiException {
        com.squareup.okhttp.Call call = listBlockVolumesValidateBeforeCall(limit, offset, poolId, poolName, clusterId, blockSnapshotId, name, namePrefix, volumeName, uid, clientGroupId, mappingGroupId, excludeMappingGroupId, accessPathId, passive, recycled, status, withNotUsed, q, sort, all, dpBlockBackupPolicyId, dpBlockAsyncReplicationPolicyId, couldHaveIo, rbdClientId, null, null);
        Type localVarReturnType = new TypeToken<VolumesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List block volumes
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param poolId The id of the pool volumes belong to (optional)
     * @param poolName The pool_name of the pool volumes belong to (optional)
     * @param clusterId cluster id (optional)
     * @param blockSnapshotId related snapshot id (optional)
     * @param name name of volume (optional)
     * @param namePrefix name prefix of volume (optional)
     * @param volumeName volume_name of volume (optional)
     * @param uid uid of volume (optional)
     * @param clientGroupId related client group id (optional)
     * @param mappingGroupId related mapping group id (optional)
     * @param excludeMappingGroupId exclude mapping group id, with access path id (optional)
     * @param accessPathId related access path id (optional)
     * @param passive passive or not (optional)
     * @param recycled recycled or not (optional)
     * @param status filter with status (optional)
     * @param withNotUsed list with not used volumes, can be used with access path id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param all show all volumes (optional)
     * @param dpBlockBackupPolicyId show volumes of specific dp block backup policy (optional)
     * @param dpBlockAsyncReplicationPolicyId show volumes of specific dp block async replication policy (optional)
     * @param couldHaveIo show volumes without volume that cannot have io (optional)
     * @param rbdClientId rbd client id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBlockVolumesAsync(Long limit, Long offset, Long poolId, String poolName, String clusterId, Long blockSnapshotId, String name, String namePrefix, String volumeName, String uid, Long clientGroupId, Long mappingGroupId, Long excludeMappingGroupId, Long accessPathId, Boolean passive, Boolean recycled, String status, Boolean withNotUsed, String q, String sort, Boolean all, Long dpBlockBackupPolicyId, Long dpBlockAsyncReplicationPolicyId, Boolean couldHaveIo, Long rbdClientId, final ApiCallback<VolumesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBlockVolumesValidateBeforeCall(limit, offset, poolId, poolName, clusterId, blockSnapshotId, name, namePrefix, volumeName, uid, clientGroupId, mappingGroupId, excludeMappingGroupId, accessPathId, passive, recycled, status, withNotUsed, q, sort, all, dpBlockBackupPolicyId, dpBlockAsyncReplicationPolicyId, couldHaveIo, rbdClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for migrateBlockVolume
     * @param body volume migration info (required)
     * @param blockVolumeId the block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call migrateBlockVolumeCall(VolumeMigrateReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:migrate"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call migrateBlockVolumeValidateBeforeCall(VolumeMigrateReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling migrateBlockVolume(Async)");
        }
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling migrateBlockVolume(Async)");
        }
        
        com.squareup.okhttp.Call call = migrateBlockVolumeCall(body, blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body volume migration info (required)
     * @param blockVolumeId the block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp migrateBlockVolume(VolumeMigrateReq body, Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = migrateBlockVolumeWithHttpInfo(body, blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body volume migration info (required)
     * @param blockVolumeId the block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> migrateBlockVolumeWithHttpInfo(VolumeMigrateReq body, Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = migrateBlockVolumeValidateBeforeCall(body, blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body volume migration info (required)
     * @param blockVolumeId the block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call migrateBlockVolumeAsync(VolumeMigrateReq body, Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = migrateBlockVolumeValidateBeforeCall(body, blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rebuildBlockVolumeReplication
     * @param blockVolumeId block volume id (required)
     * @param force force rebuild or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rebuildBlockVolumeReplicationCall(Long blockVolumeId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:rebuild-replication"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rebuildBlockVolumeReplicationValidateBeforeCall(Long blockVolumeId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling rebuildBlockVolumeReplication(Async)");
        }
        
        com.squareup.okhttp.Call call = rebuildBlockVolumeReplicationCall(blockVolumeId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Rebuild block volume replication
     * @param blockVolumeId block volume id (required)
     * @param force force rebuild or not (optional)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp rebuildBlockVolumeReplication(Long blockVolumeId, Boolean force) throws ApiException {
        ApiResponse<VolumeResp> resp = rebuildBlockVolumeReplicationWithHttpInfo(blockVolumeId, force);
        return resp.getData();
    }

    /**
     * 
     * Rebuild block volume replication
     * @param blockVolumeId block volume id (required)
     * @param force force rebuild or not (optional)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> rebuildBlockVolumeReplicationWithHttpInfo(Long blockVolumeId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = rebuildBlockVolumeReplicationValidateBeforeCall(blockVolumeId, force, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rebuild block volume replication
     * @param blockVolumeId block volume id (required)
     * @param force force rebuild or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rebuildBlockVolumeReplicationAsync(Long blockVolumeId, Boolean force, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rebuildBlockVolumeReplicationValidateBeforeCall(blockVolumeId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAsyncReplicationProtection
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAsyncReplicationProtectionCall(VolumeAsyncReplicationProtectionReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:set-async-replication-protection"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAsyncReplicationProtectionValidateBeforeCall(VolumeAsyncReplicationProtectionReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setAsyncReplicationProtection(Async)");
        }
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling setAsyncReplicationProtection(Async)");
        }
        
        com.squareup.okhttp.Call call = setAsyncReplicationProtectionCall(body, blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set async replication protection for a block volume
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp setAsyncReplicationProtection(VolumeAsyncReplicationProtectionReq body, Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = setAsyncReplicationProtectionWithHttpInfo(body, blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * Set async replication protection for a block volume
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> setAsyncReplicationProtectionWithHttpInfo(VolumeAsyncReplicationProtectionReq body, Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = setAsyncReplicationProtectionValidateBeforeCall(body, blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set async replication protection for a block volume
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAsyncReplicationProtectionAsync(VolumeAsyncReplicationProtectionReq body, Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAsyncReplicationProtectionValidateBeforeCall(body, blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBackupProtection
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBackupProtectionCall(VolumeBackupProtectionReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:set-backup-protection"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBackupProtectionValidateBeforeCall(VolumeBackupProtectionReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setBackupProtection(Async)");
        }
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling setBackupProtection(Async)");
        }
        
        com.squareup.okhttp.Call call = setBackupProtectionCall(body, blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set backup protection for a block volume
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp setBackupProtection(VolumeBackupProtectionReq body, Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = setBackupProtectionWithHttpInfo(body, blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * Set backup protection for a block volume
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> setBackupProtectionWithHttpInfo(VolumeBackupProtectionReq body, Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = setBackupProtectionValidateBeforeCall(body, blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set backup protection for a block volume
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBackupProtectionAsync(VolumeBackupProtectionReq body, Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBackupProtectionValidateBeforeCall(body, blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBlockVolumeCrc
     * @param body volume crc info (required)
     * @param blockVolumeId block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBlockVolumeCrcCall(VolumeCrcSetReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:set-crc"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBlockVolumeCrcValidateBeforeCall(VolumeCrcSetReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setBlockVolumeCrc(Async)");
        }
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling setBlockVolumeCrc(Async)");
        }
        
        com.squareup.okhttp.Call call = setBlockVolumeCrcCall(body, blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set block volume crc
     * @param body volume crc info (required)
     * @param blockVolumeId block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp setBlockVolumeCrc(VolumeCrcSetReq body, Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = setBlockVolumeCrcWithHttpInfo(body, blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * Set block volume crc
     * @param body volume crc info (required)
     * @param blockVolumeId block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> setBlockVolumeCrcWithHttpInfo(VolumeCrcSetReq body, Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = setBlockVolumeCrcValidateBeforeCall(body, blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set block volume crc
     * @param body volume crc info (required)
     * @param blockVolumeId block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBlockVolumeCrcAsync(VolumeCrcSetReq body, Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBlockVolumeCrcValidateBeforeCall(body, blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBlockVolumeReplication
     * @param body volume replication info (required)
     * @param blockVolumeId block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBlockVolumeReplicationCall(VolumeReplicationSetReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:set-replication"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBlockVolumeReplicationValidateBeforeCall(VolumeReplicationSetReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setBlockVolumeReplication(Async)");
        }
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling setBlockVolumeReplication(Async)");
        }
        
        com.squareup.okhttp.Call call = setBlockVolumeReplicationCall(body, blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set block volume replication
     * @param body volume replication info (required)
     * @param blockVolumeId block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp setBlockVolumeReplication(VolumeReplicationSetReq body, Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = setBlockVolumeReplicationWithHttpInfo(body, blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * Set block volume replication
     * @param body volume replication info (required)
     * @param blockVolumeId block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> setBlockVolumeReplicationWithHttpInfo(VolumeReplicationSetReq body, Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = setBlockVolumeReplicationValidateBeforeCall(body, blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set block volume replication
     * @param body volume replication info (required)
     * @param blockVolumeId block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBlockVolumeReplicationAsync(VolumeReplicationSetReq body, Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBlockVolumeReplicationValidateBeforeCall(body, blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setSnapshotProtection
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSnapshotProtectionCall(VolumeSnapshotProtectionReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:set-snapshot-protection"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setSnapshotProtectionValidateBeforeCall(VolumeSnapshotProtectionReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setSnapshotProtection(Async)");
        }
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling setSnapshotProtection(Async)");
        }
        
        com.squareup.okhttp.Call call = setSnapshotProtectionCall(body, blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set snapshot protection for a block volume
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp setSnapshotProtection(VolumeSnapshotProtectionReq body, Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = setSnapshotProtectionWithHttpInfo(body, blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * Set snapshot protection for a block volume
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> setSnapshotProtectionWithHttpInfo(VolumeSnapshotProtectionReq body, Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = setSnapshotProtectionValidateBeforeCall(body, blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set snapshot protection for a block volume
     * @param body request info (required)
     * @param blockVolumeId the block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSnapshotProtectionAsync(VolumeSnapshotProtectionReq body, Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSnapshotProtectionValidateBeforeCall(body, blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suspendBlockVolumeReplication
     * @param blockVolumeId block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suspendBlockVolumeReplicationCall(Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:suspend-replication"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suspendBlockVolumeReplicationValidateBeforeCall(Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling suspendBlockVolumeReplication(Async)");
        }
        
        com.squareup.okhttp.Call call = suspendBlockVolumeReplicationCall(blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Suspend block volume replication
     * @param blockVolumeId block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp suspendBlockVolumeReplication(Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = suspendBlockVolumeReplicationWithHttpInfo(blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * Suspend block volume replication
     * @param blockVolumeId block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> suspendBlockVolumeReplicationWithHttpInfo(Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = suspendBlockVolumeReplicationValidateBeforeCall(blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Suspend block volume replication
     * @param blockVolumeId block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suspendBlockVolumeReplicationAsync(Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suspendBlockVolumeReplicationValidateBeforeCall(blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsetAsyncReplicationProtection
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @param reserveVolume reserve replicated volume or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsetAsyncReplicationProtectionCall(Long blockVolumeId, Boolean force, Boolean reserveVolume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:unset-async-replication-protection"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (reserveVolume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reserve_volume", reserveVolume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsetAsyncReplicationProtectionValidateBeforeCall(Long blockVolumeId, Boolean force, Boolean reserveVolume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling unsetAsyncReplicationProtection(Async)");
        }
        
        com.squareup.okhttp.Call call = unsetAsyncReplicationProtectionCall(blockVolumeId, force, reserveVolume, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unset async replication protection for a block volume
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @param reserveVolume reserve replicated volume or not (optional)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp unsetAsyncReplicationProtection(Long blockVolumeId, Boolean force, Boolean reserveVolume) throws ApiException {
        ApiResponse<VolumeResp> resp = unsetAsyncReplicationProtectionWithHttpInfo(blockVolumeId, force, reserveVolume);
        return resp.getData();
    }

    /**
     * 
     * Unset async replication protection for a block volume
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @param reserveVolume reserve replicated volume or not (optional)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> unsetAsyncReplicationProtectionWithHttpInfo(Long blockVolumeId, Boolean force, Boolean reserveVolume) throws ApiException {
        com.squareup.okhttp.Call call = unsetAsyncReplicationProtectionValidateBeforeCall(blockVolumeId, force, reserveVolume, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unset async replication protection for a block volume
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @param reserveVolume reserve replicated volume or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsetAsyncReplicationProtectionAsync(Long blockVolumeId, Boolean force, Boolean reserveVolume, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsetAsyncReplicationProtectionValidateBeforeCall(blockVolumeId, force, reserveVolume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsetBackupProtection
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsetBackupProtectionCall(Long blockVolumeId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:unset-backup-protection"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsetBackupProtectionValidateBeforeCall(Long blockVolumeId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling unsetBackupProtection(Async)");
        }
        
        com.squareup.okhttp.Call call = unsetBackupProtectionCall(blockVolumeId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unset backup protection for a block volume
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp unsetBackupProtection(Long blockVolumeId, Boolean force) throws ApiException {
        ApiResponse<VolumeResp> resp = unsetBackupProtectionWithHttpInfo(blockVolumeId, force);
        return resp.getData();
    }

    /**
     * 
     * Unset backup protection for a block volume
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> unsetBackupProtectionWithHttpInfo(Long blockVolumeId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = unsetBackupProtectionValidateBeforeCall(blockVolumeId, force, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unset backup protection for a block volume
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsetBackupProtectionAsync(Long blockVolumeId, Boolean force, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsetBackupProtectionValidateBeforeCall(blockVolumeId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsetBlockVolumeCrc
     * @param body volume crc info (required)
     * @param blockVolumeId block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsetBlockVolumeCrcCall(VolumeCrcSetReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:unset-crc"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsetBlockVolumeCrcValidateBeforeCall(VolumeCrcSetReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling unsetBlockVolumeCrc(Async)");
        }
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling unsetBlockVolumeCrc(Async)");
        }
        
        com.squareup.okhttp.Call call = unsetBlockVolumeCrcCall(body, blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unset block volume crc
     * @param body volume crc info (required)
     * @param blockVolumeId block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp unsetBlockVolumeCrc(VolumeCrcSetReq body, Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = unsetBlockVolumeCrcWithHttpInfo(body, blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * Unset block volume crc
     * @param body volume crc info (required)
     * @param blockVolumeId block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> unsetBlockVolumeCrcWithHttpInfo(VolumeCrcSetReq body, Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = unsetBlockVolumeCrcValidateBeforeCall(body, blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unset block volume crc
     * @param body volume crc info (required)
     * @param blockVolumeId block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsetBlockVolumeCrcAsync(VolumeCrcSetReq body, Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsetBlockVolumeCrcValidateBeforeCall(body, blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsetBlockVolumeReplication
     * @param blockVolumeId block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsetBlockVolumeReplicationCall(Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:unset-replication"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsetBlockVolumeReplicationValidateBeforeCall(Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling unsetBlockVolumeReplication(Async)");
        }
        
        com.squareup.okhttp.Call call = unsetBlockVolumeReplicationCall(blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unset block volume replication
     * @param blockVolumeId block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp unsetBlockVolumeReplication(Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = unsetBlockVolumeReplicationWithHttpInfo(blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * Unset block volume replication
     * @param blockVolumeId block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> unsetBlockVolumeReplicationWithHttpInfo(Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = unsetBlockVolumeReplicationValidateBeforeCall(blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unset block volume replication
     * @param blockVolumeId block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsetBlockVolumeReplicationAsync(Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsetBlockVolumeReplicationValidateBeforeCall(blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsetSnapshotProtection
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsetSnapshotProtectionCall(Long blockVolumeId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:unset-snapshot-protection"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsetSnapshotProtectionValidateBeforeCall(Long blockVolumeId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling unsetSnapshotProtection(Async)");
        }
        
        com.squareup.okhttp.Call call = unsetSnapshotProtectionCall(blockVolumeId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unset snapshot protection for a block volume
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp unsetSnapshotProtection(Long blockVolumeId, Boolean force) throws ApiException {
        ApiResponse<VolumeResp> resp = unsetSnapshotProtectionWithHttpInfo(blockVolumeId, force);
        return resp.getData();
    }

    /**
     * 
     * Unset snapshot protection for a block volume
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> unsetSnapshotProtectionWithHttpInfo(Long blockVolumeId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = unsetSnapshotProtectionValidateBeforeCall(blockVolumeId, force, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unset snapshot protection for a block volume
     * @param blockVolumeId the block volume id (required)
     * @param force force unset or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsetSnapshotProtectionAsync(Long blockVolumeId, Boolean force, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsetSnapshotProtectionValidateBeforeCall(blockVolumeId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBlockVolume
     * @param body volume info (required)
     * @param blockVolumeId the block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBlockVolumeCall(VolumeUpdateReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBlockVolumeValidateBeforeCall(VolumeUpdateReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBlockVolume(Async)");
        }
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling updateBlockVolume(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBlockVolumeCall(body, blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update block volume info
     * @param body volume info (required)
     * @param blockVolumeId the block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp updateBlockVolume(VolumeUpdateReq body, Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = updateBlockVolumeWithHttpInfo(body, blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * Update block volume info
     * @param body volume info (required)
     * @param blockVolumeId the block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> updateBlockVolumeWithHttpInfo(VolumeUpdateReq body, Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = updateBlockVolumeValidateBeforeCall(body, blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update block volume info
     * @param body volume info (required)
     * @param blockVolumeId the block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBlockVolumeAsync(VolumeUpdateReq body, Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBlockVolumeValidateBeforeCall(body, blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBlockVolumeVolumeName
     * @param body volume volume_name (required)
     * @param blockVolumeId the block volume id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBlockVolumeVolumeNameCall(VolumeUpdateVolumeNameReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/{block_volume_id}:update-volume-name"
            .replaceAll("\\{" + "block_volume_id" + "\\}", apiClient.escapeString(blockVolumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBlockVolumeVolumeNameValidateBeforeCall(VolumeUpdateVolumeNameReq body, Long blockVolumeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBlockVolumeVolumeName(Async)");
        }
        // verify the required parameter 'blockVolumeId' is set
        if (blockVolumeId == null) {
            throw new ApiException("Missing the required parameter 'blockVolumeId' when calling updateBlockVolumeVolumeName(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBlockVolumeVolumeNameCall(body, blockVolumeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update block volume volume_name
     * @param body volume volume_name (required)
     * @param blockVolumeId the block volume id (required)
     * @return VolumeResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolumeResp updateBlockVolumeVolumeName(VolumeUpdateVolumeNameReq body, Long blockVolumeId) throws ApiException {
        ApiResponse<VolumeResp> resp = updateBlockVolumeVolumeNameWithHttpInfo(body, blockVolumeId);
        return resp.getData();
    }

    /**
     * 
     * Update block volume volume_name
     * @param body volume volume_name (required)
     * @param blockVolumeId the block volume id (required)
     * @return ApiResponse&lt;VolumeResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolumeResp> updateBlockVolumeVolumeNameWithHttpInfo(VolumeUpdateVolumeNameReq body, Long blockVolumeId) throws ApiException {
        com.squareup.okhttp.Call call = updateBlockVolumeVolumeNameValidateBeforeCall(body, blockVolumeId, null, null);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update block volume volume_name
     * @param body volume volume_name (required)
     * @param blockVolumeId the block volume id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBlockVolumeVolumeNameAsync(VolumeUpdateVolumeNameReq body, Long blockVolumeId, final ApiCallback<VolumeResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBlockVolumeVolumeNameValidateBeforeCall(body, blockVolumeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolumeResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateVolumeStat
     * @param body volume stat (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVolumeStatCall(UpdateVolumeStatReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/block-volumes/:update-stat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVolumeStatValidateBeforeCall(UpdateVolumeStatReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateVolumeStat(Async)");
        }
        
        com.squareup.okhttp.Call call = updateVolumeStatCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update volume stat from other cluster
     * @param body volume stat (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateVolumeStat(UpdateVolumeStatReq body) throws ApiException {
        updateVolumeStatWithHttpInfo(body);
    }

    /**
     * 
     * update volume stat from other cluster
     * @param body volume stat (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateVolumeStatWithHttpInfo(UpdateVolumeStatReq body) throws ApiException {
        com.squareup.okhttp.Call call = updateVolumeStatValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * update volume stat from other cluster
     * @param body volume stat (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVolumeStatAsync(UpdateVolumeStatReq body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVolumeStatValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
