/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.AlertRuleResourceBlacklistResp;
import xio.sds.client.model.AlertRuleResp;
import xio.sds.client.model.AlertRuleSchemaResp;
import xio.sds.client.model.AlertRuleUpdateReq;
import xio.sds.client.model.AlertRulesResp;
import xio.sds.client.model.UpdateAlertRuleResourceBlacklistReq;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertRulesApi {
    private ApiClient apiClient;

    public AlertRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertRulesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAlertRuleResourceBlacklist
     * @param body resource blacklist (required)
     * @param ruleId the id of alert rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAlertRuleResourceBlacklistCall(UpdateAlertRuleResourceBlacklistReq body, Long ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/alert-rules/{rule_id}/blacklist"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAlertRuleResourceBlacklistValidateBeforeCall(UpdateAlertRuleResourceBlacklistReq body, Long ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAlertRuleResourceBlacklist(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling createAlertRuleResourceBlacklist(Async)");
        }
        
        com.squareup.okhttp.Call call = createAlertRuleResourceBlacklistCall(body, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * create resource blacklist of alert rule
     * @param body resource blacklist (required)
     * @param ruleId the id of alert rule (required)
     * @return AlertRuleResourceBlacklistResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertRuleResourceBlacklistResp createAlertRuleResourceBlacklist(UpdateAlertRuleResourceBlacklistReq body, Long ruleId) throws ApiException {
        ApiResponse<AlertRuleResourceBlacklistResp> resp = createAlertRuleResourceBlacklistWithHttpInfo(body, ruleId);
        return resp.getData();
    }

    /**
     * 
     * create resource blacklist of alert rule
     * @param body resource blacklist (required)
     * @param ruleId the id of alert rule (required)
     * @return ApiResponse&lt;AlertRuleResourceBlacklistResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertRuleResourceBlacklistResp> createAlertRuleResourceBlacklistWithHttpInfo(UpdateAlertRuleResourceBlacklistReq body, Long ruleId) throws ApiException {
        com.squareup.okhttp.Call call = createAlertRuleResourceBlacklistValidateBeforeCall(body, ruleId, null, null);
        Type localVarReturnType = new TypeToken<AlertRuleResourceBlacklistResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create resource blacklist of alert rule
     * @param body resource blacklist (required)
     * @param ruleId the id of alert rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAlertRuleResourceBlacklistAsync(UpdateAlertRuleResourceBlacklistReq body, Long ruleId, final ApiCallback<AlertRuleResourceBlacklistResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAlertRuleResourceBlacklistValidateBeforeCall(body, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertRuleResourceBlacklistResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAlertRule
     * @param ruleId the id of alert rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAlertRuleCall(Long ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-rules/{rule_id}"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAlertRuleValidateBeforeCall(Long ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteAlertRule(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAlertRuleCall(ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete alert rule
     * @param ruleId the id of alert rule (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAlertRule(Long ruleId) throws ApiException {
        deleteAlertRuleWithHttpInfo(ruleId);
    }

    /**
     * 
     * delete alert rule
     * @param ruleId the id of alert rule (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAlertRuleWithHttpInfo(Long ruleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAlertRuleValidateBeforeCall(ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * delete alert rule
     * @param ruleId the id of alert rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAlertRuleAsync(Long ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAlertRuleValidateBeforeCall(ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAlertRuleResourceBlacklist
     * @param body resource blacklist (required)
     * @param ruleId the id of alert rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAlertRuleResourceBlacklistCall(UpdateAlertRuleResourceBlacklistReq body, Long ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/alert-rules/{rule_id}/blacklist"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAlertRuleResourceBlacklistValidateBeforeCall(UpdateAlertRuleResourceBlacklistReq body, Long ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteAlertRuleResourceBlacklist(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteAlertRuleResourceBlacklist(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAlertRuleResourceBlacklistCall(body, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete resource blacklist of alert rule
     * @param body resource blacklist (required)
     * @param ruleId the id of alert rule (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAlertRuleResourceBlacklist(UpdateAlertRuleResourceBlacklistReq body, Long ruleId) throws ApiException {
        deleteAlertRuleResourceBlacklistWithHttpInfo(body, ruleId);
    }

    /**
     * 
     * delete resource blacklist of alert rule
     * @param body resource blacklist (required)
     * @param ruleId the id of alert rule (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAlertRuleResourceBlacklistWithHttpInfo(UpdateAlertRuleResourceBlacklistReq body, Long ruleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAlertRuleResourceBlacklistValidateBeforeCall(body, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * delete resource blacklist of alert rule
     * @param body resource blacklist (required)
     * @param ruleId the id of alert rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAlertRuleResourceBlacklistAsync(UpdateAlertRuleResourceBlacklistReq body, Long ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAlertRuleResourceBlacklistValidateBeforeCall(body, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAlertRule
     * @param ruleId the id of alert rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlertRuleCall(Long ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-rules/{rule_id}"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlertRuleValidateBeforeCall(Long ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getAlertRule(Async)");
        }
        
        com.squareup.okhttp.Call call = getAlertRuleCall(ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get alert rule
     * @param ruleId the id of alert rule (required)
     * @return AlertRuleResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertRuleResp getAlertRule(Long ruleId) throws ApiException {
        ApiResponse<AlertRuleResp> resp = getAlertRuleWithHttpInfo(ruleId);
        return resp.getData();
    }

    /**
     * 
     * get alert rule
     * @param ruleId the id of alert rule (required)
     * @return ApiResponse&lt;AlertRuleResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertRuleResp> getAlertRuleWithHttpInfo(Long ruleId) throws ApiException {
        com.squareup.okhttp.Call call = getAlertRuleValidateBeforeCall(ruleId, null, null);
        Type localVarReturnType = new TypeToken<AlertRuleResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get alert rule
     * @param ruleId the id of alert rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlertRuleAsync(Long ruleId, final ApiCallback<AlertRuleResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlertRuleValidateBeforeCall(ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertRuleResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAlertRuleSchema
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlertRuleSchemaCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-rules/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlertRuleSchemaValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAlertRuleSchemaCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get alert rule schema
     * @return AlertRuleSchemaResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertRuleSchemaResp getAlertRuleSchema() throws ApiException {
        ApiResponse<AlertRuleSchemaResp> resp = getAlertRuleSchemaWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * get alert rule schema
     * @return ApiResponse&lt;AlertRuleSchemaResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertRuleSchemaResp> getAlertRuleSchemaWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAlertRuleSchemaValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AlertRuleSchemaResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get alert rule schema
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlertRuleSchemaAsync(final ApiCallback<AlertRuleSchemaResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlertRuleSchemaValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertRuleSchemaResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAlertRulesReport
     * @param resourceType resource type of alert rule (optional)
     * @param groupName group name of alert rule (optional)
     * @param level level of alert rule (optional)
     * @param enabled enabled or not (optional)
     * @param basicType basic type of alert rule (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlertRulesReportCall(String resourceType, String groupName, String level, Boolean enabled, String basicType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-rules/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (groupName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group_name", groupName));
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));
        if (enabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enabled", enabled));
        if (basicType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("basic_type", basicType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlertRulesReportValidateBeforeCall(String resourceType, String groupName, String level, Boolean enabled, String basicType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAlertRulesReportCall(resourceType, groupName, level, enabled, basicType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get report of alert rules
     * @param resourceType resource type of alert rule (optional)
     * @param groupName group name of alert rule (optional)
     * @param level level of alert rule (optional)
     * @param enabled enabled or not (optional)
     * @param basicType basic type of alert rule (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAlertRulesReport(String resourceType, String groupName, String level, Boolean enabled, String basicType) throws ApiException {
        getAlertRulesReportWithHttpInfo(resourceType, groupName, level, enabled, basicType);
    }

    /**
     * 
     * Get report of alert rules
     * @param resourceType resource type of alert rule (optional)
     * @param groupName group name of alert rule (optional)
     * @param level level of alert rule (optional)
     * @param enabled enabled or not (optional)
     * @param basicType basic type of alert rule (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAlertRulesReportWithHttpInfo(String resourceType, String groupName, String level, Boolean enabled, String basicType) throws ApiException {
        com.squareup.okhttp.Call call = getAlertRulesReportValidateBeforeCall(resourceType, groupName, level, enabled, basicType, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Get report of alert rules
     * @param resourceType resource type of alert rule (optional)
     * @param groupName group name of alert rule (optional)
     * @param level level of alert rule (optional)
     * @param enabled enabled or not (optional)
     * @param basicType basic type of alert rule (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlertRulesReportAsync(String resourceType, String groupName, String level, Boolean enabled, String basicType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlertRulesReportValidateBeforeCall(resourceType, groupName, level, enabled, basicType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listAlertRuleResourceBlacklist
     * @param ruleId the id of alert rule (required)
     * @param blacklist filter resource in blacklist or not (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAlertRuleResourceBlacklistCall(Long ruleId, String blacklist, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-rules/{rule_id}/blacklist"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (blacklist != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("blacklist", blacklist));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAlertRuleResourceBlacklistValidateBeforeCall(Long ruleId, String blacklist, Long limit, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling listAlertRuleResourceBlacklist(Async)");
        }
        // verify the required parameter 'blacklist' is set
        if (blacklist == null) {
            throw new ApiException("Missing the required parameter 'blacklist' when calling listAlertRuleResourceBlacklist(Async)");
        }
        
        com.squareup.okhttp.Call call = listAlertRuleResourceBlacklistCall(ruleId, blacklist, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List all blacklist of alert rule
     * @param ruleId the id of alert rule (required)
     * @param blacklist filter resource in blacklist or not (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @return AlertRuleResourceBlacklistResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertRuleResourceBlacklistResp listAlertRuleResourceBlacklist(Long ruleId, String blacklist, Long limit, Long offset) throws ApiException {
        ApiResponse<AlertRuleResourceBlacklistResp> resp = listAlertRuleResourceBlacklistWithHttpInfo(ruleId, blacklist, limit, offset);
        return resp.getData();
    }

    /**
     * 
     * List all blacklist of alert rule
     * @param ruleId the id of alert rule (required)
     * @param blacklist filter resource in blacklist or not (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @return ApiResponse&lt;AlertRuleResourceBlacklistResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertRuleResourceBlacklistResp> listAlertRuleResourceBlacklistWithHttpInfo(Long ruleId, String blacklist, Long limit, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = listAlertRuleResourceBlacklistValidateBeforeCall(ruleId, blacklist, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<AlertRuleResourceBlacklistResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all blacklist of alert rule
     * @param ruleId the id of alert rule (required)
     * @param blacklist filter resource in blacklist or not (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAlertRuleResourceBlacklistAsync(Long ruleId, String blacklist, Long limit, Long offset, final ApiCallback<AlertRuleResourceBlacklistResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAlertRuleResourceBlacklistValidateBeforeCall(ruleId, blacklist, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertRuleResourceBlacklistResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAlertRules
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param alertGroupId alert group id (optional)
     * @param resourceType resource type of alert rule (optional)
     * @param groupName group name of alert rule (optional)
     * @param level level of alert rule (optional)
     * @param enabled enabled or not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param basicType basic type of alert rule (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAlertRulesCall(Long limit, Long offset, Long alertGroupId, String resourceType, String groupName, String level, Boolean enabled, String q, String sort, String basicType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/alert-rules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (alertGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alert_group_id", alertGroupId));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resource_type", resourceType));
        if (groupName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group_name", groupName));
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));
        if (enabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enabled", enabled));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (basicType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("basic_type", basicType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAlertRulesValidateBeforeCall(Long limit, Long offset, Long alertGroupId, String resourceType, String groupName, String level, Boolean enabled, String q, String sort, String basicType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listAlertRulesCall(limit, offset, alertGroupId, resourceType, groupName, level, enabled, q, sort, basicType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List all alert rules
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param alertGroupId alert group id (optional)
     * @param resourceType resource type of alert rule (optional)
     * @param groupName group name of alert rule (optional)
     * @param level level of alert rule (optional)
     * @param enabled enabled or not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param basicType basic type of alert rule (optional)
     * @return AlertRulesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertRulesResp listAlertRules(Long limit, Long offset, Long alertGroupId, String resourceType, String groupName, String level, Boolean enabled, String q, String sort, String basicType) throws ApiException {
        ApiResponse<AlertRulesResp> resp = listAlertRulesWithHttpInfo(limit, offset, alertGroupId, resourceType, groupName, level, enabled, q, sort, basicType);
        return resp.getData();
    }

    /**
     * 
     * List all alert rules
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param alertGroupId alert group id (optional)
     * @param resourceType resource type of alert rule (optional)
     * @param groupName group name of alert rule (optional)
     * @param level level of alert rule (optional)
     * @param enabled enabled or not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param basicType basic type of alert rule (optional)
     * @return ApiResponse&lt;AlertRulesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertRulesResp> listAlertRulesWithHttpInfo(Long limit, Long offset, Long alertGroupId, String resourceType, String groupName, String level, Boolean enabled, String q, String sort, String basicType) throws ApiException {
        com.squareup.okhttp.Call call = listAlertRulesValidateBeforeCall(limit, offset, alertGroupId, resourceType, groupName, level, enabled, q, sort, basicType, null, null);
        Type localVarReturnType = new TypeToken<AlertRulesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alert rules
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param alertGroupId alert group id (optional)
     * @param resourceType resource type of alert rule (optional)
     * @param groupName group name of alert rule (optional)
     * @param level level of alert rule (optional)
     * @param enabled enabled or not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param basicType basic type of alert rule (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAlertRulesAsync(Long limit, Long offset, Long alertGroupId, String resourceType, String groupName, String level, Boolean enabled, String q, String sort, String basicType, final ApiCallback<AlertRulesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAlertRulesValidateBeforeCall(limit, offset, alertGroupId, resourceType, groupName, level, enabled, q, sort, basicType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertRulesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAlertRule
     * @param body alert rule (required)
     * @param ruleId the id of alert rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAlertRuleCall(AlertRuleUpdateReq body, Long ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/alert-rules/{rule_id}"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAlertRuleValidateBeforeCall(AlertRuleUpdateReq body, Long ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAlertRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateAlertRule(Async)");
        }
        
        com.squareup.okhttp.Call call = updateAlertRuleCall(body, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set alert rule
     * @param body alert rule (required)
     * @param ruleId the id of alert rule (required)
     * @return AlertRuleResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertRuleResp updateAlertRule(AlertRuleUpdateReq body, Long ruleId) throws ApiException {
        ApiResponse<AlertRuleResp> resp = updateAlertRuleWithHttpInfo(body, ruleId);
        return resp.getData();
    }

    /**
     * 
     * set alert rule
     * @param body alert rule (required)
     * @param ruleId the id of alert rule (required)
     * @return ApiResponse&lt;AlertRuleResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertRuleResp> updateAlertRuleWithHttpInfo(AlertRuleUpdateReq body, Long ruleId) throws ApiException {
        com.squareup.okhttp.Call call = updateAlertRuleValidateBeforeCall(body, ruleId, null, null);
        Type localVarReturnType = new TypeToken<AlertRuleResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * set alert rule
     * @param body alert rule (required)
     * @param ruleId the id of alert rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAlertRuleAsync(AlertRuleUpdateReq body, Long ruleId, final ApiCallback<AlertRuleResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAlertRuleValidateBeforeCall(body, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertRuleResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
