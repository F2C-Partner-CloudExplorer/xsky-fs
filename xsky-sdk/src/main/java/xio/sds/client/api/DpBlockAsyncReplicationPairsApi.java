/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.DpBlockAsyncReplicationPairCreateReq;
import xio.sds.client.model.DpBlockAsyncReplicationPairResp;
import xio.sds.client.model.DpBlockAsyncReplicationPairUpdateReq;
import xio.sds.client.model.DpBlockAsyncReplicationPairsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DpBlockAsyncReplicationPairsApi {
    private ApiClient apiClient;

    public DpBlockAsyncReplicationPairsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DpBlockAsyncReplicationPairsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for asyncFailoverDpBlockAsyncReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call asyncFailoverDpBlockAsyncReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/{pair_id}:async-failover"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call asyncFailoverDpBlockAsyncReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling asyncFailoverDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = asyncFailoverDpBlockAsyncReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * switch the roles of the pair
     * @param pairId resource id (required)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp asyncFailoverDpBlockAsyncReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = asyncFailoverDpBlockAsyncReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * switch the roles of the pair
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> asyncFailoverDpBlockAsyncReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = asyncFailoverDpBlockAsyncReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * switch the roles of the pair
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call asyncFailoverDpBlockAsyncReplicationPairAsync(Long pairId, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = asyncFailoverDpBlockAsyncReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDpBlockAsyncReplicationPair
     * @param body pair info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDpBlockAsyncReplicationPairCall(DpBlockAsyncReplicationPairCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDpBlockAsyncReplicationPairValidateBeforeCall(DpBlockAsyncReplicationPairCreateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = createDpBlockAsyncReplicationPairCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create dp block async replication pair
     * @param body pair info (required)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp createDpBlockAsyncReplicationPair(DpBlockAsyncReplicationPairCreateReq body) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = createDpBlockAsyncReplicationPairWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Create dp block async replication pair
     * @param body pair info (required)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> createDpBlockAsyncReplicationPairWithHttpInfo(DpBlockAsyncReplicationPairCreateReq body) throws ApiException {
        com.squareup.okhttp.Call call = createDpBlockAsyncReplicationPairValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create dp block async replication pair
     * @param body pair info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDpBlockAsyncReplicationPairAsync(DpBlockAsyncReplicationPairCreateReq body, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDpBlockAsyncReplicationPairValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDpBlockAsyncReplicationPair
     * @param pairId resource id (required)
     * @param reserveVolume reserve replicated volume or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDpBlockAsyncReplicationPairCall(Long pairId, Boolean reserveVolume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/{pair_id}"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reserveVolume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reserve_volume", reserveVolume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDpBlockAsyncReplicationPairValidateBeforeCall(Long pairId, Boolean reserveVolume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling deleteDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDpBlockAsyncReplicationPairCall(pairId, reserveVolume, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete dp block async replication pair
     * @param pairId resource id (required)
     * @param reserveVolume reserve replicated volume or not (optional)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp deleteDpBlockAsyncReplicationPair(Long pairId, Boolean reserveVolume) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = deleteDpBlockAsyncReplicationPairWithHttpInfo(pairId, reserveVolume);
        return resp.getData();
    }

    /**
     * 
     * Delete dp block async replication pair
     * @param pairId resource id (required)
     * @param reserveVolume reserve replicated volume or not (optional)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> deleteDpBlockAsyncReplicationPairWithHttpInfo(Long pairId, Boolean reserveVolume) throws ApiException {
        com.squareup.okhttp.Call call = deleteDpBlockAsyncReplicationPairValidateBeforeCall(pairId, reserveVolume, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete dp block async replication pair
     * @param pairId resource id (required)
     * @param reserveVolume reserve replicated volume or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDpBlockAsyncReplicationPairAsync(Long pairId, Boolean reserveVolume, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDpBlockAsyncReplicationPairValidateBeforeCall(pairId, reserveVolume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for failbackDpBlockAsyncReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call failbackDpBlockAsyncReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/{pair_id}:failback"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call failbackDpBlockAsyncReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling failbackDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = failbackDpBlockAsyncReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * switch the roles of the pair to synced
     * @param pairId resource id (required)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp failbackDpBlockAsyncReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = failbackDpBlockAsyncReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * switch the roles of the pair to synced
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> failbackDpBlockAsyncReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = failbackDpBlockAsyncReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * switch the roles of the pair to synced
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call failbackDpBlockAsyncReplicationPairAsync(Long pairId, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = failbackDpBlockAsyncReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDpBlockAsyncReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDpBlockAsyncReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/{pair_id}"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDpBlockAsyncReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling getDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = getDpBlockAsyncReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get dp block async replication pair
     * @param pairId resource id (required)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp getDpBlockAsyncReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = getDpBlockAsyncReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * Get dp block async replication pair
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> getDpBlockAsyncReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = getDpBlockAsyncReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dp block async replication pair
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDpBlockAsyncReplicationPairAsync(Long pairId, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDpBlockAsyncReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDpBlockAsyncReplicationPair
     * @param blockVolumeId show volume snapshot replication pairs of specific block volume (optional)
     * @param dpBlockAsyncReplicationPolicyId show volume snapshot replication pairs of specific block async replication policy (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDpBlockAsyncReplicationPairCall(Long blockVolumeId, Long dpBlockAsyncReplicationPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (blockVolumeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("block_volume_id", blockVolumeId));
        if (dpBlockAsyncReplicationPolicyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dp_block_async_replication_policy_id", dpBlockAsyncReplicationPolicyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDpBlockAsyncReplicationPairValidateBeforeCall(Long blockVolumeId, Long dpBlockAsyncReplicationPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDpBlockAsyncReplicationPairCall(blockVolumeId, dpBlockAsyncReplicationPolicyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List dp block async replication pairs
     * @param blockVolumeId show volume snapshot replication pairs of specific block volume (optional)
     * @param dpBlockAsyncReplicationPolicyId show volume snapshot replication pairs of specific block async replication policy (optional)
     * @return DpBlockAsyncReplicationPairsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairsResp listDpBlockAsyncReplicationPair(Long blockVolumeId, Long dpBlockAsyncReplicationPolicyId) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairsResp> resp = listDpBlockAsyncReplicationPairWithHttpInfo(blockVolumeId, dpBlockAsyncReplicationPolicyId);
        return resp.getData();
    }

    /**
     * 
     * List dp block async replication pairs
     * @param blockVolumeId show volume snapshot replication pairs of specific block volume (optional)
     * @param dpBlockAsyncReplicationPolicyId show volume snapshot replication pairs of specific block async replication policy (optional)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairsResp> listDpBlockAsyncReplicationPairWithHttpInfo(Long blockVolumeId, Long dpBlockAsyncReplicationPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = listDpBlockAsyncReplicationPairValidateBeforeCall(blockVolumeId, dpBlockAsyncReplicationPolicyId, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List dp block async replication pairs
     * @param blockVolumeId show volume snapshot replication pairs of specific block volume (optional)
     * @param dpBlockAsyncReplicationPolicyId show volume snapshot replication pairs of specific block async replication policy (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDpBlockAsyncReplicationPairAsync(Long blockVolumeId, Long dpBlockAsyncReplicationPolicyId, final ApiCallback<DpBlockAsyncReplicationPairsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDpBlockAsyncReplicationPairValidateBeforeCall(blockVolumeId, dpBlockAsyncReplicationPolicyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pauseDpBlockAsyncReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pauseDpBlockAsyncReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/{pair_id}:pause"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pauseDpBlockAsyncReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling pauseDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = pauseDpBlockAsyncReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * pause periodic sync
     * @param pairId resource id (required)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp pauseDpBlockAsyncReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = pauseDpBlockAsyncReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * pause periodic sync
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> pauseDpBlockAsyncReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = pauseDpBlockAsyncReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * pause periodic sync
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pauseDpBlockAsyncReplicationPairAsync(Long pairId, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pauseDpBlockAsyncReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resumeDpBlockAsyncReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resumeDpBlockAsyncReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/{pair_id}:resume"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resumeDpBlockAsyncReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling resumeDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = resumeDpBlockAsyncReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * resume periodic sync
     * @param pairId resource id (required)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp resumeDpBlockAsyncReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = resumeDpBlockAsyncReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * resume periodic sync
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> resumeDpBlockAsyncReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = resumeDpBlockAsyncReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * resume periodic sync
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resumeDpBlockAsyncReplicationPairAsync(Long pairId, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resumeDpBlockAsyncReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rollbackDpBlockAsyncReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rollbackDpBlockAsyncReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/{pair_id}:rollback"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rollbackDpBlockAsyncReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling rollbackDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = rollbackDpBlockAsyncReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * rollback volume snapshot pair to previous snapshot
     * @param pairId resource id (required)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp rollbackDpBlockAsyncReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = rollbackDpBlockAsyncReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * rollback volume snapshot pair to previous snapshot
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> rollbackDpBlockAsyncReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = rollbackDpBlockAsyncReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * rollback volume snapshot pair to previous snapshot
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rollbackDpBlockAsyncReplicationPairAsync(Long pairId, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rollbackDpBlockAsyncReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for syncDpBlockAsyncReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncDpBlockAsyncReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/{pair_id}:sync"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncDpBlockAsyncReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling syncDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = syncDpBlockAsyncReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * sync pair
     * @param pairId resource id (required)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp syncDpBlockAsyncReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = syncDpBlockAsyncReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * sync pair
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> syncDpBlockAsyncReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = syncDpBlockAsyncReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * sync pair
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncDpBlockAsyncReplicationPairAsync(Long pairId, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncDpBlockAsyncReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for syncFailoverDpBlockAsyncReplicationPair
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncFailoverDpBlockAsyncReplicationPairCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/{pair_id}:sync-failover"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncFailoverDpBlockAsyncReplicationPairValidateBeforeCall(Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling syncFailoverDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = syncFailoverDpBlockAsyncReplicationPairCall(pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * switch the roles of the pair
     * @param pairId resource id (required)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp syncFailoverDpBlockAsyncReplicationPair(Long pairId) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = syncFailoverDpBlockAsyncReplicationPairWithHttpInfo(pairId);
        return resp.getData();
    }

    /**
     * 
     * switch the roles of the pair
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> syncFailoverDpBlockAsyncReplicationPairWithHttpInfo(Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = syncFailoverDpBlockAsyncReplicationPairValidateBeforeCall(pairId, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * switch the roles of the pair
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncFailoverDpBlockAsyncReplicationPairAsync(Long pairId, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncFailoverDpBlockAsyncReplicationPairValidateBeforeCall(pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDpBlockAsyncReplicationPair
     * @param body pair info (required)
     * @param pairId resource id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDpBlockAsyncReplicationPairCall(DpBlockAsyncReplicationPairUpdateReq body, Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/dp-block-async-replication-pairs/{pair_id}"
            .replaceAll("\\{" + "pair_id" + "\\}", apiClient.escapeString(pairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDpBlockAsyncReplicationPairValidateBeforeCall(DpBlockAsyncReplicationPairUpdateReq body, Long pairId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDpBlockAsyncReplicationPair(Async)");
        }
        // verify the required parameter 'pairId' is set
        if (pairId == null) {
            throw new ApiException("Missing the required parameter 'pairId' when calling updateDpBlockAsyncReplicationPair(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDpBlockAsyncReplicationPairCall(body, pairId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update dp block async replication pair
     * @param body pair info (required)
     * @param pairId resource id (required)
     * @return DpBlockAsyncReplicationPairResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DpBlockAsyncReplicationPairResp updateDpBlockAsyncReplicationPair(DpBlockAsyncReplicationPairUpdateReq body, Long pairId) throws ApiException {
        ApiResponse<DpBlockAsyncReplicationPairResp> resp = updateDpBlockAsyncReplicationPairWithHttpInfo(body, pairId);
        return resp.getData();
    }

    /**
     * 
     * Update dp block async replication pair
     * @param body pair info (required)
     * @param pairId resource id (required)
     * @return ApiResponse&lt;DpBlockAsyncReplicationPairResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DpBlockAsyncReplicationPairResp> updateDpBlockAsyncReplicationPairWithHttpInfo(DpBlockAsyncReplicationPairUpdateReq body, Long pairId) throws ApiException {
        com.squareup.okhttp.Call call = updateDpBlockAsyncReplicationPairValidateBeforeCall(body, pairId, null, null);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update dp block async replication pair
     * @param body pair info (required)
     * @param pairId resource id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDpBlockAsyncReplicationPairAsync(DpBlockAsyncReplicationPairUpdateReq body, Long pairId, final ApiCallback<DpBlockAsyncReplicationPairResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDpBlockAsyncReplicationPairValidateBeforeCall(body, pairId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DpBlockAsyncReplicationPairResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
