/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.ECPoolUpdateCrushRuleReq;
import xio.sds.client.model.EmptyPoolInitializeReq;
import xio.sds.client.model.OsdsAddReq;
import xio.sds.client.model.OsdsRemoveReq;
import xio.sds.client.model.OspDataBackendPoolsOperateReq;
import xio.sds.client.model.OspPoolOutsideReq;
import xio.sds.client.model.OspPoolOutsideResp;
import xio.sds.client.model.PoolCapacityReq;
import xio.sds.client.model.PoolCapacityResp;
import xio.sds.client.model.PoolCreateReq;
import xio.sds.client.model.PoolFullCheckReq;
import xio.sds.client.model.PoolFullCheckResp;
import xio.sds.client.model.PoolGCPolicyPlan;
import xio.sds.client.model.PoolPredictionsResp;
import xio.sds.client.model.PoolResp;
import xio.sds.client.model.PoolSamplesResp;
import xio.sds.client.model.PoolTopologyResp;
import xio.sds.client.model.PoolUpdateReq;
import xio.sds.client.model.PoolsResp;
import xio.sds.client.model.TaskIDResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PoolsApi {
    private ApiClient apiClient;

    public PoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PoolsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addOsdsToPool
     * @param body osd infos (required)
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOsdsToPoolCall(OsdsAddReq body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}/osds"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOsdsToPoolValidateBeforeCall(OsdsAddReq body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOsdsToPool(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling addOsdsToPool(Async)");
        }
        
        com.squareup.okhttp.Call call = addOsdsToPoolCall(body, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Add osds to pool
     * @param body osd infos (required)
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp addOsdsToPool(OsdsAddReq body, Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = addOsdsToPoolWithHttpInfo(body, poolId);
        return resp.getData();
    }

    /**
     * 
     * Add osds to pool
     * @param body osd infos (required)
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> addOsdsToPoolWithHttpInfo(OsdsAddReq body, Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = addOsdsToPoolValidateBeforeCall(body, poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add osds to pool
     * @param body osd infos (required)
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOsdsToPoolAsync(OsdsAddReq body, Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOsdsToPoolValidateBeforeCall(body, poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addPoolToOutsideBackend
     * @param body pool info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPoolToOutsideBackendCall(OspPoolOutsideReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools:add-to-outside-backend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPoolToOutsideBackendValidateBeforeCall(OspPoolOutsideReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPoolToOutsideBackend(Async)");
        }
        
        com.squareup.okhttp.Call call = addPoolToOutsideBackendCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Add pool to outside databackend
     * @param body pool info (required)
     * @return OspPoolOutsideResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OspPoolOutsideResp addPoolToOutsideBackend(OspPoolOutsideReq body) throws ApiException {
        ApiResponse<OspPoolOutsideResp> resp = addPoolToOutsideBackendWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Add pool to outside databackend
     * @param body pool info (required)
     * @return ApiResponse&lt;OspPoolOutsideResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OspPoolOutsideResp> addPoolToOutsideBackendWithHttpInfo(OspPoolOutsideReq body) throws ApiException {
        com.squareup.okhttp.Call call = addPoolToOutsideBackendValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OspPoolOutsideResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add pool to outside databackend
     * @param body pool info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPoolToOutsideBackendAsync(OspPoolOutsideReq body, final ApiCallback<OspPoolOutsideResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPoolToOutsideBackendValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OspPoolOutsideResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addPoolsToOspDataBackend
     * @param body pool info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPoolsToOspDataBackendCall(OspDataBackendPoolsOperateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/:add-pools-to-osp-data-backend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPoolsToOspDataBackendValidateBeforeCall(OspDataBackendPoolsOperateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPoolsToOspDataBackend(Async)");
        }
        
        com.squareup.okhttp.Call call = addPoolsToOspDataBackendCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Adds pools to osp data backend
     * @param body pool info (required)
     * @return TaskIDResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIDResp addPoolsToOspDataBackend(OspDataBackendPoolsOperateReq body) throws ApiException {
        ApiResponse<TaskIDResp> resp = addPoolsToOspDataBackendWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Adds pools to osp data backend
     * @param body pool info (required)
     * @return ApiResponse&lt;TaskIDResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIDResp> addPoolsToOspDataBackendWithHttpInfo(OspDataBackendPoolsOperateReq body) throws ApiException {
        com.squareup.okhttp.Call call = addPoolsToOspDataBackendValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<TaskIDResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds pools to osp data backend
     * @param body pool info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPoolsToOspDataBackendAsync(OspDataBackendPoolsOperateReq body, final ApiCallback<TaskIDResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPoolsToOspDataBackendValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIDResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for calcCapacity
     * @param body pool info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call calcCapacityCall(PoolCapacityReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/:calc-capacity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calcCapacityValidateBeforeCall(PoolCapacityReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling calcCapacity(Async)");
        }
        
        com.squareup.okhttp.Call call = calcCapacityCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * calculate pool capacity
     * @param body pool info (required)
     * @return PoolCapacityResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolCapacityResp calcCapacity(PoolCapacityReq body) throws ApiException {
        ApiResponse<PoolCapacityResp> resp = calcCapacityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * calculate pool capacity
     * @param body pool info (required)
     * @return ApiResponse&lt;PoolCapacityResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolCapacityResp> calcCapacityWithHttpInfo(PoolCapacityReq body) throws ApiException {
        com.squareup.okhttp.Call call = calcCapacityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PoolCapacityResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * calculate pool capacity
     * @param body pool info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calcCapacityAsync(PoolCapacityReq body, final ApiCallback<PoolCapacityResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calcCapacityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolCapacityResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkFull
     * @param body pool ids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkFullCall(PoolFullCheckReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/:check-full";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkFullValidateBeforeCall(PoolFullCheckReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling checkFull(Async)");
        }
        
        com.squareup.okhttp.Call call = checkFullCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * checks if pools are full
     * @param body pool ids (required)
     * @return PoolFullCheckResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolFullCheckResp checkFull(PoolFullCheckReq body) throws ApiException {
        ApiResponse<PoolFullCheckResp> resp = checkFullWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * checks if pools are full
     * @param body pool ids (required)
     * @return ApiResponse&lt;PoolFullCheckResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolFullCheckResp> checkFullWithHttpInfo(PoolFullCheckReq body) throws ApiException {
        com.squareup.okhttp.Call call = checkFullValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PoolFullCheckResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * checks if pools are full
     * @param body pool ids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkFullAsync(PoolFullCheckReq body, final ApiCallback<PoolFullCheckResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkFullValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolFullCheckResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPool
     * @param body the pool info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPoolCall(PoolCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPoolValidateBeforeCall(PoolCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPool(Async)");
        }
        
        com.squareup.okhttp.Call call = createPoolCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create pool
     * @param body the pool info (required)
     * @param clusterId cluster id (optional)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp createPool(PoolCreateReq body, String clusterId) throws ApiException {
        ApiResponse<PoolResp> resp = createPoolWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create pool
     * @param body the pool info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> createPoolWithHttpInfo(PoolCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createPoolValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create pool
     * @param body the pool info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPoolAsync(PoolCreateReq body, String clusterId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPoolValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePool
     * @param poolId pool id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePoolCall(Long poolId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePoolValidateBeforeCall(Long poolId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling deletePool(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePoolCall(poolId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete pool
     * @param poolId pool id (required)
     * @param force force delete or not (optional)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp deletePool(Long poolId, Boolean force) throws ApiException {
        ApiResponse<PoolResp> resp = deletePoolWithHttpInfo(poolId, force);
        return resp.getData();
    }

    /**
     * 
     * Delete pool
     * @param poolId pool id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> deletePoolWithHttpInfo(Long poolId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deletePoolValidateBeforeCall(poolId, force, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete pool
     * @param poolId pool id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePoolAsync(Long poolId, Boolean force, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePoolValidateBeforeCall(poolId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for disablePoolDeviceTypeCheck
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disablePoolDeviceTypeCheckCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}:disable-device-type-check"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disablePoolDeviceTypeCheckValidateBeforeCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling disablePoolDeviceTypeCheck(Async)");
        }
        
        com.squareup.okhttp.Call call = disablePoolDeviceTypeCheckCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Disable device type check when add osd
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp disablePoolDeviceTypeCheck(Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = disablePoolDeviceTypeCheckWithHttpInfo(poolId);
        return resp.getData();
    }

    /**
     * 
     * Disable device type check when add osd
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> disablePoolDeviceTypeCheckWithHttpInfo(Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = disablePoolDeviceTypeCheckValidateBeforeCall(poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disable device type check when add osd
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disablePoolDeviceTypeCheckAsync(Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disablePoolDeviceTypeCheckValidateBeforeCall(poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for disablePoolNuma
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disablePoolNumaCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}:disable-numa"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disablePoolNumaValidateBeforeCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling disablePoolNuma(Async)");
        }
        
        com.squareup.okhttp.Call call = disablePoolNumaCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Disable pool numa
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp disablePoolNuma(Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = disablePoolNumaWithHttpInfo(poolId);
        return resp.getData();
    }

    /**
     * 
     * Disable pool numa
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> disablePoolNumaWithHttpInfo(Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = disablePoolNumaValidateBeforeCall(poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disable pool numa
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disablePoolNumaAsync(Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disablePoolNumaValidateBeforeCall(poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for enablePoolDeviceTypeCheck
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enablePoolDeviceTypeCheckCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}:enable-device-type-check"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enablePoolDeviceTypeCheckValidateBeforeCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling enablePoolDeviceTypeCheck(Async)");
        }
        
        com.squareup.okhttp.Call call = enablePoolDeviceTypeCheckCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Enable device type check when add osd
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp enablePoolDeviceTypeCheck(Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = enablePoolDeviceTypeCheckWithHttpInfo(poolId);
        return resp.getData();
    }

    /**
     * 
     * Enable device type check when add osd
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> enablePoolDeviceTypeCheckWithHttpInfo(Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = enablePoolDeviceTypeCheckValidateBeforeCall(poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enable device type check when add osd
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enablePoolDeviceTypeCheckAsync(Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enablePoolDeviceTypeCheckValidateBeforeCall(poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for enablePoolNuma
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enablePoolNumaCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}:enable-numa"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enablePoolNumaValidateBeforeCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling enablePoolNuma(Async)");
        }
        
        com.squareup.okhttp.Call call = enablePoolNumaCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Enable pool numa
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp enablePoolNuma(Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = enablePoolNumaWithHttpInfo(poolId);
        return resp.getData();
    }

    /**
     * 
     * Enable pool numa
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> enablePoolNumaWithHttpInfo(Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = enablePoolNumaValidateBeforeCall(poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enable pool numa
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enablePoolNumaAsync(Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enablePoolNumaValidateBeforeCall(poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPool
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPoolCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPoolValidateBeforeCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling getPool(Async)");
        }
        
        com.squareup.okhttp.Call call = getPoolCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get pool
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp getPool(Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = getPoolWithHttpInfo(poolId);
        return resp.getData();
    }

    /**
     * 
     * get pool
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> getPoolWithHttpInfo(Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = getPoolValidateBeforeCall(poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get pool
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPoolAsync(Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPoolValidateBeforeCall(poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPoolPredictions
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPoolPredictionsCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}/predictions"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPoolPredictionsValidateBeforeCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling getPoolPredictions(Async)");
        }
        
        com.squareup.okhttp.Call call = getPoolPredictionsCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get a pool&#x27;s prediction
     * @param poolId pool id (required)
     * @return PoolPredictionsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolPredictionsResp getPoolPredictions(Long poolId) throws ApiException {
        ApiResponse<PoolPredictionsResp> resp = getPoolPredictionsWithHttpInfo(poolId);
        return resp.getData();
    }

    /**
     * 
     * get a pool&#x27;s prediction
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolPredictionsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolPredictionsResp> getPoolPredictionsWithHttpInfo(Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = getPoolPredictionsValidateBeforeCall(poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolPredictionsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a pool&#x27;s prediction
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPoolPredictionsAsync(Long poolId, final ApiCallback<PoolPredictionsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPoolPredictionsValidateBeforeCall(poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolPredictionsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPoolSamples
     * @param poolId pool id (required)
     * @param clientIo merge client io stat for tier pool (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPoolSamplesCall(Long poolId, Boolean clientIo, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}/samples"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientIo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_io", clientIo));
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPoolSamplesValidateBeforeCall(Long poolId, Boolean clientIo, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling getPoolSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getPoolSamplesCall(poolId, clientIo, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get pool&#x27;s samples
     * @param poolId pool id (required)
     * @param clientIo merge client io stat for tier pool (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return PoolSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolSamplesResp getPoolSamples(Long poolId, Boolean clientIo, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<PoolSamplesResp> resp = getPoolSamplesWithHttpInfo(poolId, clientIo, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get pool&#x27;s samples
     * @param poolId pool id (required)
     * @param clientIo merge client io stat for tier pool (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;PoolSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolSamplesResp> getPoolSamplesWithHttpInfo(Long poolId, Boolean clientIo, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getPoolSamplesValidateBeforeCall(poolId, clientIo, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<PoolSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get pool&#x27;s samples
     * @param poolId pool id (required)
     * @param clientIo merge client io stat for tier pool (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPoolSamplesAsync(Long poolId, Boolean clientIo, String durationBegin, String durationEnd, String period, final ApiCallback<PoolSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPoolSamplesValidateBeforeCall(poolId, clientIo, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPoolTopology
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPoolTopologyCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}/topology"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPoolTopologyValidateBeforeCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling getPoolTopology(Async)");
        }
        
        com.squareup.okhttp.Call call = getPoolTopologyCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get pool topology
     * @param poolId pool id (required)
     * @return PoolTopologyResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolTopologyResp getPoolTopology(Long poolId) throws ApiException {
        ApiResponse<PoolTopologyResp> resp = getPoolTopologyWithHttpInfo(poolId);
        return resp.getData();
    }

    /**
     * 
     * get pool topology
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolTopologyResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolTopologyResp> getPoolTopologyWithHttpInfo(Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = getPoolTopologyValidateBeforeCall(poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolTopologyResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get pool topology
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPoolTopologyAsync(Long poolId, final ApiCallback<PoolTopologyResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPoolTopologyValidateBeforeCall(poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolTopologyResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for initializeEmptyPool
     * @param body the pool info (required)
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call initializeEmptyPoolCall(EmptyPoolInitializeReq body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}:initialize"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call initializeEmptyPoolValidateBeforeCall(EmptyPoolInitializeReq body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling initializeEmptyPool(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling initializeEmptyPool(Async)");
        }
        
        com.squareup.okhttp.Call call = initializeEmptyPoolCall(body, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * initialize an empty pool
     * @param body the pool info (required)
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp initializeEmptyPool(EmptyPoolInitializeReq body, Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = initializeEmptyPoolWithHttpInfo(body, poolId);
        return resp.getData();
    }

    /**
     * 
     * initialize an empty pool
     * @param body the pool info (required)
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> initializeEmptyPoolWithHttpInfo(EmptyPoolInitializeReq body, Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = initializeEmptyPoolValidateBeforeCall(body, poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * initialize an empty pool
     * @param body the pool info (required)
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call initializeEmptyPoolAsync(EmptyPoolInitializeReq body, Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = initializeEmptyPoolValidateBeforeCall(body, poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPools
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param all show all pools (optional)
     * @param protectionDomainId protection domain id (optional)
     * @param clusterId cluster id (optional)
     * @param compoundOsdOnly filter pool with only compound osds (optional)
     * @param osdGroupId osd group id (optional)
     * @param poolType filter pool by type (optional)
     * @param poolRole filter pool by role (optional)
     * @param poolMode filter pool by pool_mode (optional)
     * @param stretched filter stretched pool (optional)
     * @param withCompound with compound pool (optional)
     * @param isCache list cache pool (optional)
     * @param osPolicyId filter data pool by object storage policy id (optional)
     * @param storageClassId filter data pool by os storage class id (optional)
     * @param storageClassPoolType storage class pool type(active inactive) to query (optional)
     * @param ospDataBackendId osp data backend id (optional)
     * @param ospClusterId osp cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param poolIds filter pool by ids (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPoolsCall(Long limit, Long offset, Boolean all, Long protectionDomainId, String clusterId, Boolean compoundOsdOnly, Long osdGroupId, String poolType, String poolRole, String poolMode, Boolean stretched, Boolean withCompound, Boolean isCache, Long osPolicyId, Long storageClassId, String storageClassPoolType, Long ospDataBackendId, String ospClusterId, String q, String sort, Long poolIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (all != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("all", all));
        if (protectionDomainId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("protection_domain_id", protectionDomainId));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (compoundOsdOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compound_osd_only", compoundOsdOnly));
        if (osdGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("osd_group_id", osdGroupId));
        if (poolType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pool_type", poolType));
        if (poolRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pool_role", poolRole));
        if (poolMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pool_mode", poolMode));
        if (stretched != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stretched", stretched));
        if (withCompound != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_compound", withCompound));
        if (isCache != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_cache", isCache));
        if (osPolicyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("os_policy_id", osPolicyId));
        if (storageClassId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage_class_id", storageClassId));
        if (storageClassPoolType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage_class_pool_type", storageClassPoolType));
        if (ospDataBackendId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("osp_data_backend_id", ospDataBackendId));
        if (ospClusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("osp_cluster_id", ospClusterId));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (poolIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pool_ids", poolIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPoolsValidateBeforeCall(Long limit, Long offset, Boolean all, Long protectionDomainId, String clusterId, Boolean compoundOsdOnly, Long osdGroupId, String poolType, String poolRole, String poolMode, Boolean stretched, Boolean withCompound, Boolean isCache, Long osPolicyId, Long storageClassId, String storageClassPoolType, Long ospDataBackendId, String ospClusterId, String q, String sort, Long poolIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listPoolsCall(limit, offset, all, protectionDomainId, clusterId, compoundOsdOnly, osdGroupId, poolType, poolRole, poolMode, stretched, withCompound, isCache, osPolicyId, storageClassId, storageClassPoolType, ospDataBackendId, ospClusterId, q, sort, poolIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List pools
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param all show all pools (optional)
     * @param protectionDomainId protection domain id (optional)
     * @param clusterId cluster id (optional)
     * @param compoundOsdOnly filter pool with only compound osds (optional)
     * @param osdGroupId osd group id (optional)
     * @param poolType filter pool by type (optional)
     * @param poolRole filter pool by role (optional)
     * @param poolMode filter pool by pool_mode (optional)
     * @param stretched filter stretched pool (optional)
     * @param withCompound with compound pool (optional)
     * @param isCache list cache pool (optional)
     * @param osPolicyId filter data pool by object storage policy id (optional)
     * @param storageClassId filter data pool by os storage class id (optional)
     * @param storageClassPoolType storage class pool type(active inactive) to query (optional)
     * @param ospDataBackendId osp data backend id (optional)
     * @param ospClusterId osp cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param poolIds filter pool by ids (optional)
     * @return PoolsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolsResp listPools(Long limit, Long offset, Boolean all, Long protectionDomainId, String clusterId, Boolean compoundOsdOnly, Long osdGroupId, String poolType, String poolRole, String poolMode, Boolean stretched, Boolean withCompound, Boolean isCache, Long osPolicyId, Long storageClassId, String storageClassPoolType, Long ospDataBackendId, String ospClusterId, String q, String sort, Long poolIds) throws ApiException {
        ApiResponse<PoolsResp> resp = listPoolsWithHttpInfo(limit, offset, all, protectionDomainId, clusterId, compoundOsdOnly, osdGroupId, poolType, poolRole, poolMode, stretched, withCompound, isCache, osPolicyId, storageClassId, storageClassPoolType, ospDataBackendId, ospClusterId, q, sort, poolIds);
        return resp.getData();
    }

    /**
     * 
     * List pools
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param all show all pools (optional)
     * @param protectionDomainId protection domain id (optional)
     * @param clusterId cluster id (optional)
     * @param compoundOsdOnly filter pool with only compound osds (optional)
     * @param osdGroupId osd group id (optional)
     * @param poolType filter pool by type (optional)
     * @param poolRole filter pool by role (optional)
     * @param poolMode filter pool by pool_mode (optional)
     * @param stretched filter stretched pool (optional)
     * @param withCompound with compound pool (optional)
     * @param isCache list cache pool (optional)
     * @param osPolicyId filter data pool by object storage policy id (optional)
     * @param storageClassId filter data pool by os storage class id (optional)
     * @param storageClassPoolType storage class pool type(active inactive) to query (optional)
     * @param ospDataBackendId osp data backend id (optional)
     * @param ospClusterId osp cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param poolIds filter pool by ids (optional)
     * @return ApiResponse&lt;PoolsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolsResp> listPoolsWithHttpInfo(Long limit, Long offset, Boolean all, Long protectionDomainId, String clusterId, Boolean compoundOsdOnly, Long osdGroupId, String poolType, String poolRole, String poolMode, Boolean stretched, Boolean withCompound, Boolean isCache, Long osPolicyId, Long storageClassId, String storageClassPoolType, Long ospDataBackendId, String ospClusterId, String q, String sort, Long poolIds) throws ApiException {
        com.squareup.okhttp.Call call = listPoolsValidateBeforeCall(limit, offset, all, protectionDomainId, clusterId, compoundOsdOnly, osdGroupId, poolType, poolRole, poolMode, stretched, withCompound, isCache, osPolicyId, storageClassId, storageClassPoolType, ospDataBackendId, ospClusterId, q, sort, poolIds, null, null);
        Type localVarReturnType = new TypeToken<PoolsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List pools
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param all show all pools (optional)
     * @param protectionDomainId protection domain id (optional)
     * @param clusterId cluster id (optional)
     * @param compoundOsdOnly filter pool with only compound osds (optional)
     * @param osdGroupId osd group id (optional)
     * @param poolType filter pool by type (optional)
     * @param poolRole filter pool by role (optional)
     * @param poolMode filter pool by pool_mode (optional)
     * @param stretched filter stretched pool (optional)
     * @param withCompound with compound pool (optional)
     * @param isCache list cache pool (optional)
     * @param osPolicyId filter data pool by object storage policy id (optional)
     * @param storageClassId filter data pool by os storage class id (optional)
     * @param storageClassPoolType storage class pool type(active inactive) to query (optional)
     * @param ospDataBackendId osp data backend id (optional)
     * @param ospClusterId osp cluster id (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param poolIds filter pool by ids (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPoolsAsync(Long limit, Long offset, Boolean all, Long protectionDomainId, String clusterId, Boolean compoundOsdOnly, Long osdGroupId, String poolType, String poolRole, String poolMode, Boolean stretched, Boolean withCompound, Boolean isCache, Long osPolicyId, Long storageClassId, String storageClassPoolType, Long ospDataBackendId, String ospClusterId, String q, String sort, Long poolIds, final ApiCallback<PoolsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPoolsValidateBeforeCall(limit, offset, all, protectionDomainId, clusterId, compoundOsdOnly, osdGroupId, poolType, poolRole, poolMode, stretched, withCompound, isCache, osPolicyId, storageClassId, storageClassPoolType, ospDataBackendId, ospClusterId, q, sort, poolIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeFromOutsideBackend
     * @param body pool info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeFromOutsideBackendCall(OspPoolOutsideReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools:remove-from-outside-backend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeFromOutsideBackendValidateBeforeCall(OspPoolOutsideReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeFromOutsideBackend(Async)");
        }
        
        com.squareup.okhttp.Call call = removeFromOutsideBackendCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Remove pools from outside backend
     * @param body pool info (required)
     * @return OspPoolOutsideResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OspPoolOutsideResp removeFromOutsideBackend(OspPoolOutsideReq body) throws ApiException {
        ApiResponse<OspPoolOutsideResp> resp = removeFromOutsideBackendWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Remove pools from outside backend
     * @param body pool info (required)
     * @return ApiResponse&lt;OspPoolOutsideResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OspPoolOutsideResp> removeFromOutsideBackendWithHttpInfo(OspPoolOutsideReq body) throws ApiException {
        com.squareup.okhttp.Call call = removeFromOutsideBackendValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OspPoolOutsideResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove pools from outside backend
     * @param body pool info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeFromOutsideBackendAsync(OspPoolOutsideReq body, final ApiCallback<OspPoolOutsideResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeFromOutsideBackendValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OspPoolOutsideResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeOsdsFromPool
     * @param body osd infos (required)
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeOsdsFromPoolCall(OsdsRemoveReq body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}/osds"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeOsdsFromPoolValidateBeforeCall(OsdsRemoveReq body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeOsdsFromPool(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling removeOsdsFromPool(Async)");
        }
        
        com.squareup.okhttp.Call call = removeOsdsFromPoolCall(body, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Remove multiple osds from a pool
     * @param body osd infos (required)
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp removeOsdsFromPool(OsdsRemoveReq body, Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = removeOsdsFromPoolWithHttpInfo(body, poolId);
        return resp.getData();
    }

    /**
     * 
     * Remove multiple osds from a pool
     * @param body osd infos (required)
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> removeOsdsFromPoolWithHttpInfo(OsdsRemoveReq body, Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = removeOsdsFromPoolValidateBeforeCall(body, poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove multiple osds from a pool
     * @param body osd infos (required)
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeOsdsFromPoolAsync(OsdsRemoveReq body, Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeOsdsFromPoolValidateBeforeCall(body, poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removePoolsFromOspDataBackend
     * @param body pool info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removePoolsFromOspDataBackendCall(OspDataBackendPoolsOperateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/:remove-pools-from-osp-data-backend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removePoolsFromOspDataBackendValidateBeforeCall(OspDataBackendPoolsOperateReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removePoolsFromOspDataBackend(Async)");
        }
        
        com.squareup.okhttp.Call call = removePoolsFromOspDataBackendCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Remove pools from osp data backend
     * @param body pool info (required)
     * @return TaskIDResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIDResp removePoolsFromOspDataBackend(OspDataBackendPoolsOperateReq body) throws ApiException {
        ApiResponse<TaskIDResp> resp = removePoolsFromOspDataBackendWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Remove pools from osp data backend
     * @param body pool info (required)
     * @return ApiResponse&lt;TaskIDResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIDResp> removePoolsFromOspDataBackendWithHttpInfo(OspDataBackendPoolsOperateReq body) throws ApiException {
        com.squareup.okhttp.Call call = removePoolsFromOspDataBackendValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<TaskIDResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove pools from osp data backend
     * @param body pool info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removePoolsFromOspDataBackendAsync(OspDataBackendPoolsOperateReq body, final ApiCallback<TaskIDResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removePoolsFromOspDataBackendValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIDResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reweightPool
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reweightPoolCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}:reweight"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reweightPoolValidateBeforeCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling reweightPool(Async)");
        }
        
        com.squareup.okhttp.Call call = reweightPoolCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Reweight a pool
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp reweightPool(Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = reweightPoolWithHttpInfo(poolId);
        return resp.getData();
    }

    /**
     * 
     * Reweight a pool
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> reweightPoolWithHttpInfo(Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = reweightPoolValidateBeforeCall(poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reweight a pool
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reweightPoolAsync(Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reweightPoolValidateBeforeCall(poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for switchPoolRole
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call switchPoolRoleCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}:switch-role"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call switchPoolRoleValidateBeforeCall(Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling switchPoolRole(Async)");
        }
        
        com.squareup.okhttp.Call call = switchPoolRoleCall(poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Switch pool role to compound
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp switchPoolRole(Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = switchPoolRoleWithHttpInfo(poolId);
        return resp.getData();
    }

    /**
     * 
     * Switch pool role to compound
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> switchPoolRoleWithHttpInfo(Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = switchPoolRoleValidateBeforeCall(poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Switch pool role to compound
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call switchPoolRoleAsync(Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = switchPoolRoleValidateBeforeCall(poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateECPoolCrushRule
     * @param body crush rule info (required)
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateECPoolCrushRuleCall(ECPoolUpdateCrushRuleReq body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}:update-ec-crush-rule"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateECPoolCrushRuleValidateBeforeCall(ECPoolUpdateCrushRuleReq body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateECPoolCrushRule(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling updateECPoolCrushRule(Async)");
        }
        
        com.squareup.okhttp.Call call = updateECPoolCrushRuleCall(body, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update crush rule with EC pool
     * @param body crush rule info (required)
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp updateECPoolCrushRule(ECPoolUpdateCrushRuleReq body, Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = updateECPoolCrushRuleWithHttpInfo(body, poolId);
        return resp.getData();
    }

    /**
     * 
     * update crush rule with EC pool
     * @param body crush rule info (required)
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> updateECPoolCrushRuleWithHttpInfo(ECPoolUpdateCrushRuleReq body, Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = updateECPoolCrushRuleValidateBeforeCall(body, poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update crush rule with EC pool
     * @param body crush rule info (required)
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateECPoolCrushRuleAsync(ECPoolUpdateCrushRuleReq body, Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateECPoolCrushRuleValidateBeforeCall(body, poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePool
     * @param body pool info (required)
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePoolCall(PoolUpdateReq body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePoolValidateBeforeCall(PoolUpdateReq body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePool(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling updatePool(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePoolCall(body, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update pool info
     * @param body pool info (required)
     * @param poolId pool id (required)
     * @return PoolResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolResp updatePool(PoolUpdateReq body, Long poolId) throws ApiException {
        ApiResponse<PoolResp> resp = updatePoolWithHttpInfo(body, poolId);
        return resp.getData();
    }

    /**
     * 
     * update pool info
     * @param body pool info (required)
     * @param poolId pool id (required)
     * @return ApiResponse&lt;PoolResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolResp> updatePoolWithHttpInfo(PoolUpdateReq body, Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = updatePoolValidateBeforeCall(body, poolId, null, null);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update pool info
     * @param body pool info (required)
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePoolAsync(PoolUpdateReq body, Long poolId, final ApiCallback<PoolResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePoolValidateBeforeCall(body, poolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePoolGCPolicyPlan
     * @param body pool gc policy plan (required)
     * @param poolId pool id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePoolGCPolicyPlanCall(PoolGCPolicyPlan body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/pools/{pool_id}:update-gc-policy-plan"
            .replaceAll("\\{" + "pool_id" + "\\}", apiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePoolGCPolicyPlanValidateBeforeCall(PoolGCPolicyPlan body, Long poolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePoolGCPolicyPlan(Async)");
        }
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling updatePoolGCPolicyPlan(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePoolGCPolicyPlanCall(body, poolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update pool gc policy plan
     * @param body pool gc policy plan (required)
     * @param poolId pool id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePoolGCPolicyPlan(PoolGCPolicyPlan body, Long poolId) throws ApiException {
        updatePoolGCPolicyPlanWithHttpInfo(body, poolId);
    }

    /**
     * 
     * update pool gc policy plan
     * @param body pool gc policy plan (required)
     * @param poolId pool id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePoolGCPolicyPlanWithHttpInfo(PoolGCPolicyPlan body, Long poolId) throws ApiException {
        com.squareup.okhttp.Call call = updatePoolGCPolicyPlanValidateBeforeCall(body, poolId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * update pool gc policy plan
     * @param body pool gc policy plan (required)
     * @param poolId pool id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePoolGCPolicyPlanAsync(PoolGCPolicyPlan body, Long poolId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePoolGCPolicyPlanValidateBeforeCall(body, poolId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
