/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.FSUserCreateReq;
import xio.sds.client.model.FSUserResp;
import xio.sds.client.model.FSUserUpdateReq;
import xio.sds.client.model.FSUserUpdateSecondaryGroupsReq;
import xio.sds.client.model.FSUserVerifyReq;
import xio.sds.client.model.FSUsersResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FsUsersApi {
    private ApiClient apiClient;

    public FsUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FsUsersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createFSUser
     * @param body user info (required)
     * @param clusterId cluster id (optional)
     * @param allowPathCreate allow create path for s3 when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFSUserCall(FSUserCreateReq body, String clusterId, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/fs-users/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFSUserValidateBeforeCall(FSUserCreateReq body, String clusterId, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFSUser(Async)");
        }
        
        com.squareup.okhttp.Call call = createFSUserCall(body, clusterId, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * create file storage user
     * @param body user info (required)
     * @param clusterId cluster id (optional)
     * @param allowPathCreate allow create path for s3 when not existed (optional)
     * @return FSUserResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserResp createFSUser(FSUserCreateReq body, String clusterId, Boolean allowPathCreate) throws ApiException {
        ApiResponse<FSUserResp> resp = createFSUserWithHttpInfo(body, clusterId, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * create file storage user
     * @param body user info (required)
     * @param clusterId cluster id (optional)
     * @param allowPathCreate allow create path for s3 when not existed (optional)
     * @return ApiResponse&lt;FSUserResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserResp> createFSUserWithHttpInfo(FSUserCreateReq body, String clusterId, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = createFSUserValidateBeforeCall(body, clusterId, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<FSUserResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create file storage user
     * @param body user info (required)
     * @param clusterId cluster id (optional)
     * @param allowPathCreate allow create path for s3 when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFSUserAsync(FSUserCreateReq body, String clusterId, Boolean allowPathCreate, final ApiCallback<FSUserResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFSUserValidateBeforeCall(body, clusterId, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFSUser
     * @param fsUserId user id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFSUserCall(Long fsUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fs-users/{fs_user_id}"
            .replaceAll("\\{" + "fs_user_id" + "\\}", apiClient.escapeString(fsUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFSUserValidateBeforeCall(Long fsUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fsUserId' is set
        if (fsUserId == null) {
            throw new ApiException("Missing the required parameter 'fsUserId' when calling deleteFSUser(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFSUserCall(fsUserId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete file storage user
     * @param fsUserId user id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFSUser(Long fsUserId) throws ApiException {
        deleteFSUserWithHttpInfo(fsUserId);
    }

    /**
     * 
     * delete file storage user
     * @param fsUserId user id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFSUserWithHttpInfo(Long fsUserId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFSUserValidateBeforeCall(fsUserId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * delete file storage user
     * @param fsUserId user id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFSUserAsync(Long fsUserId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFSUserValidateBeforeCall(fsUserId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFSUser
     * @param fsUserId user id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFSUserCall(Long fsUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fs-users/{fs_user_id}"
            .replaceAll("\\{" + "fs_user_id" + "\\}", apiClient.escapeString(fsUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFSUserValidateBeforeCall(Long fsUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fsUserId' is set
        if (fsUserId == null) {
            throw new ApiException("Missing the required parameter 'fsUserId' when calling getFSUser(Async)");
        }
        
        com.squareup.okhttp.Call call = getFSUserCall(fsUserId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get file storage user
     * @param fsUserId user id (required)
     * @return FSUserResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserResp getFSUser(Long fsUserId) throws ApiException {
        ApiResponse<FSUserResp> resp = getFSUserWithHttpInfo(fsUserId);
        return resp.getData();
    }

    /**
     * 
     * get file storage user
     * @param fsUserId user id (required)
     * @return ApiResponse&lt;FSUserResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserResp> getFSUserWithHttpInfo(Long fsUserId) throws ApiException {
        com.squareup.okhttp.Call call = getFSUserValidateBeforeCall(fsUserId, null, null);
        Type localVarReturnType = new TypeToken<FSUserResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get file storage user
     * @param fsUserId user id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFSUserAsync(Long fsUserId, final ApiCallback<FSUserResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFSUserValidateBeforeCall(fsUserId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFSUsers
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param security security of file storage users (optional)
     * @param fsUserGroupId file storage user group id (optional)
     * @param notFsUserGroupId file storage user group id (optional)
     * @param notDfsSmbShareId id of dfs smb share users not in (optional)
     * @param notDfsHdfsId id of dfs hdfs users not in (optional)
     * @param notDfsFtpShare value must be true, means available add to ftp share (optional)
     * @param dfsGatewayGroupId dfs gateway group id, used with not_dfs_ftp_share (optional)
     * @param s3Enabled is s3 enabled (optional)
     * @param userId user id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listFSUsersCall(Long limit, Long offset, String q, String sort, String clusterId, String security, Long fsUserGroupId, Long notFsUserGroupId, Long notDfsSmbShareId, Long notDfsHdfsId, Boolean notDfsFtpShare, Long dfsGatewayGroupId, Boolean s3Enabled, Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fs-users/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (security != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("security", security));
        if (fsUserGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fs_user_group_id", fsUserGroupId));
        if (notFsUserGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("not_fs_user_group_id", notFsUserGroupId));
        if (notDfsSmbShareId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("not_dfs_smb_share_id", notDfsSmbShareId));
        if (notDfsHdfsId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("not_dfs_hdfs_id", notDfsHdfsId));
        if (notDfsFtpShare != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("not_dfs_ftp_share", notDfsFtpShare));
        if (dfsGatewayGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dfs_gateway_group_id", dfsGatewayGroupId));
        if (s3Enabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("s3_enabled", s3Enabled));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFSUsersValidateBeforeCall(Long limit, Long offset, String q, String sort, String clusterId, String security, Long fsUserGroupId, Long notFsUserGroupId, Long notDfsSmbShareId, Long notDfsHdfsId, Boolean notDfsFtpShare, Long dfsGatewayGroupId, Boolean s3Enabled, Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listFSUsersCall(limit, offset, q, sort, clusterId, security, fsUserGroupId, notFsUserGroupId, notDfsSmbShareId, notDfsHdfsId, notDfsFtpShare, dfsGatewayGroupId, s3Enabled, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List file storage users
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param security security of file storage users (optional)
     * @param fsUserGroupId file storage user group id (optional)
     * @param notFsUserGroupId file storage user group id (optional)
     * @param notDfsSmbShareId id of dfs smb share users not in (optional)
     * @param notDfsHdfsId id of dfs hdfs users not in (optional)
     * @param notDfsFtpShare value must be true, means available add to ftp share (optional)
     * @param dfsGatewayGroupId dfs gateway group id, used with not_dfs_ftp_share (optional)
     * @param s3Enabled is s3 enabled (optional)
     * @param userId user id (optional)
     * @return FSUsersResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUsersResp listFSUsers(Long limit, Long offset, String q, String sort, String clusterId, String security, Long fsUserGroupId, Long notFsUserGroupId, Long notDfsSmbShareId, Long notDfsHdfsId, Boolean notDfsFtpShare, Long dfsGatewayGroupId, Boolean s3Enabled, Long userId) throws ApiException {
        ApiResponse<FSUsersResp> resp = listFSUsersWithHttpInfo(limit, offset, q, sort, clusterId, security, fsUserGroupId, notFsUserGroupId, notDfsSmbShareId, notDfsHdfsId, notDfsFtpShare, dfsGatewayGroupId, s3Enabled, userId);
        return resp.getData();
    }

    /**
     * 
     * List file storage users
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param security security of file storage users (optional)
     * @param fsUserGroupId file storage user group id (optional)
     * @param notFsUserGroupId file storage user group id (optional)
     * @param notDfsSmbShareId id of dfs smb share users not in (optional)
     * @param notDfsHdfsId id of dfs hdfs users not in (optional)
     * @param notDfsFtpShare value must be true, means available add to ftp share (optional)
     * @param dfsGatewayGroupId dfs gateway group id, used with not_dfs_ftp_share (optional)
     * @param s3Enabled is s3 enabled (optional)
     * @param userId user id (optional)
     * @return ApiResponse&lt;FSUsersResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUsersResp> listFSUsersWithHttpInfo(Long limit, Long offset, String q, String sort, String clusterId, String security, Long fsUserGroupId, Long notFsUserGroupId, Long notDfsSmbShareId, Long notDfsHdfsId, Boolean notDfsFtpShare, Long dfsGatewayGroupId, Boolean s3Enabled, Long userId) throws ApiException {
        com.squareup.okhttp.Call call = listFSUsersValidateBeforeCall(limit, offset, q, sort, clusterId, security, fsUserGroupId, notFsUserGroupId, notDfsSmbShareId, notDfsHdfsId, notDfsFtpShare, dfsGatewayGroupId, s3Enabled, userId, null, null);
        Type localVarReturnType = new TypeToken<FSUsersResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List file storage users
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param clusterId cluster id (optional)
     * @param security security of file storage users (optional)
     * @param fsUserGroupId file storage user group id (optional)
     * @param notFsUserGroupId file storage user group id (optional)
     * @param notDfsSmbShareId id of dfs smb share users not in (optional)
     * @param notDfsHdfsId id of dfs hdfs users not in (optional)
     * @param notDfsFtpShare value must be true, means available add to ftp share (optional)
     * @param dfsGatewayGroupId dfs gateway group id, used with not_dfs_ftp_share (optional)
     * @param s3Enabled is s3 enabled (optional)
     * @param userId user id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFSUsersAsync(Long limit, Long offset, String q, String sort, String clusterId, String security, Long fsUserGroupId, Long notFsUserGroupId, Long notDfsSmbShareId, Long notDfsHdfsId, Boolean notDfsFtpShare, Long dfsGatewayGroupId, Boolean s3Enabled, Long userId, final ApiCallback<FSUsersResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFSUsersValidateBeforeCall(limit, offset, q, sort, clusterId, security, fsUserGroupId, notFsUserGroupId, notDfsSmbShareId, notDfsHdfsId, notDfsFtpShare, dfsGatewayGroupId, s3Enabled, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUsersResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFSUser
     * @param body user info (required)
     * @param fsUserId user id (required)
     * @param allowPathCreate allow create path for s3 when not existed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFSUserCall(FSUserUpdateReq body, Long fsUserId, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/fs-users/{fs_user_id}"
            .replaceAll("\\{" + "fs_user_id" + "\\}", apiClient.escapeString(fsUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowPathCreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow_path_create", allowPathCreate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFSUserValidateBeforeCall(FSUserUpdateReq body, Long fsUserId, Boolean allowPathCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFSUser(Async)");
        }
        // verify the required parameter 'fsUserId' is set
        if (fsUserId == null) {
            throw new ApiException("Missing the required parameter 'fsUserId' when calling updateFSUser(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFSUserCall(body, fsUserId, allowPathCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update file storage user
     * @param body user info (required)
     * @param fsUserId user id (required)
     * @param allowPathCreate allow create path for s3 when not existed (optional)
     * @return FSUserResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserResp updateFSUser(FSUserUpdateReq body, Long fsUserId, Boolean allowPathCreate) throws ApiException {
        ApiResponse<FSUserResp> resp = updateFSUserWithHttpInfo(body, fsUserId, allowPathCreate);
        return resp.getData();
    }

    /**
     * 
     * update file storage user
     * @param body user info (required)
     * @param fsUserId user id (required)
     * @param allowPathCreate allow create path for s3 when not existed (optional)
     * @return ApiResponse&lt;FSUserResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserResp> updateFSUserWithHttpInfo(FSUserUpdateReq body, Long fsUserId, Boolean allowPathCreate) throws ApiException {
        com.squareup.okhttp.Call call = updateFSUserValidateBeforeCall(body, fsUserId, allowPathCreate, null, null);
        Type localVarReturnType = new TypeToken<FSUserResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update file storage user
     * @param body user info (required)
     * @param fsUserId user id (required)
     * @param allowPathCreate allow create path for s3 when not existed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFSUserAsync(FSUserUpdateReq body, Long fsUserId, Boolean allowPathCreate, final ApiCallback<FSUserResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFSUserValidateBeforeCall(body, fsUserId, allowPathCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFSUserSecondaryGroups
     * @param body user info (required)
     * @param fsUserId user id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFSUserSecondaryGroupsCall(FSUserUpdateSecondaryGroupsReq body, Long fsUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/fs-users/{fs_user_id}/:update-secondary-groups"
            .replaceAll("\\{" + "fs_user_id" + "\\}", apiClient.escapeString(fsUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFSUserSecondaryGroupsValidateBeforeCall(FSUserUpdateSecondaryGroupsReq body, Long fsUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFSUserSecondaryGroups(Async)");
        }
        // verify the required parameter 'fsUserId' is set
        if (fsUserId == null) {
            throw new ApiException("Missing the required parameter 'fsUserId' when calling updateFSUserSecondaryGroups(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFSUserSecondaryGroupsCall(body, fsUserId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update file storage user secondary group and primary group
     * @param body user info (required)
     * @param fsUserId user id (required)
     * @return FSUserResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserResp updateFSUserSecondaryGroups(FSUserUpdateSecondaryGroupsReq body, Long fsUserId) throws ApiException {
        ApiResponse<FSUserResp> resp = updateFSUserSecondaryGroupsWithHttpInfo(body, fsUserId);
        return resp.getData();
    }

    /**
     * 
     * update file storage user secondary group and primary group
     * @param body user info (required)
     * @param fsUserId user id (required)
     * @return ApiResponse&lt;FSUserResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserResp> updateFSUserSecondaryGroupsWithHttpInfo(FSUserUpdateSecondaryGroupsReq body, Long fsUserId) throws ApiException {
        com.squareup.okhttp.Call call = updateFSUserSecondaryGroupsValidateBeforeCall(body, fsUserId, null, null);
        Type localVarReturnType = new TypeToken<FSUserResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update file storage user secondary group and primary group
     * @param body user info (required)
     * @param fsUserId user id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFSUserSecondaryGroupsAsync(FSUserUpdateSecondaryGroupsReq body, Long fsUserId, final ApiCallback<FSUserResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFSUserSecondaryGroupsValidateBeforeCall(body, fsUserId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for verifyFSUser
     * @param body the identity credential (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verifyFSUserCall(FSUserVerifyReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/fs-users/:verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verifyFSUserValidateBeforeCall(FSUserVerifyReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling verifyFSUser(Async)");
        }
        
        com.squareup.okhttp.Call call = verifyFSUserCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * verify fs user password
     * @param body the identity credential (required)
     * @return FSUserResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FSUserResp verifyFSUser(FSUserVerifyReq body) throws ApiException {
        ApiResponse<FSUserResp> resp = verifyFSUserWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * verify fs user password
     * @param body the identity credential (required)
     * @return ApiResponse&lt;FSUserResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FSUserResp> verifyFSUserWithHttpInfo(FSUserVerifyReq body) throws ApiException {
        com.squareup.okhttp.Call call = verifyFSUserValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<FSUserResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * verify fs user password
     * @param body the identity credential (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyFSUserAsync(FSUserVerifyReq body, final ApiCallback<FSUserResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyFSUserValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FSUserResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
