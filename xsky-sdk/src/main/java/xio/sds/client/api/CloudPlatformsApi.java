/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.CloudPlatformCreateReq;
import xio.sds.client.model.CloudPlatformResp;
import xio.sds.client.model.CloudPlatformUpdateReq;
import xio.sds.client.model.CloudPlatformsResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudPlatformsApi {
    private ApiClient apiClient;

    public CloudPlatformsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudPlatformsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createCloudPlatform
     * @param body cloud platform info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCloudPlatformCall(CloudPlatformCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cloud-platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCloudPlatformValidateBeforeCall(CloudPlatformCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCloudPlatform(Async)");
        }
        
        com.squareup.okhttp.Call call = createCloudPlatformCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create cloud platform
     * @param body cloud platform info (required)
     * @param clusterId cluster id (optional)
     * @return CloudPlatformResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudPlatformResp createCloudPlatform(CloudPlatformCreateReq body, String clusterId) throws ApiException {
        ApiResponse<CloudPlatformResp> resp = createCloudPlatformWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create cloud platform
     * @param body cloud platform info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;CloudPlatformResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudPlatformResp> createCloudPlatformWithHttpInfo(CloudPlatformCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createCloudPlatformValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<CloudPlatformResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create cloud platform
     * @param body cloud platform info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCloudPlatformAsync(CloudPlatformCreateReq body, String clusterId, final ApiCallback<CloudPlatformResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCloudPlatformValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudPlatformResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCloudPlatform
     * @param cloudPlatformId cloud platform id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCloudPlatformCall(Long cloudPlatformId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/cloud-platforms/{cloud_platform_id}"
            .replaceAll("\\{" + "cloud_platform_id" + "\\}", apiClient.escapeString(cloudPlatformId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCloudPlatformValidateBeforeCall(Long cloudPlatformId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'cloudPlatformId' is set
        if (cloudPlatformId == null) {
            throw new ApiException("Missing the required parameter 'cloudPlatformId' when calling deleteCloudPlatform(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteCloudPlatformCall(cloudPlatformId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete cloud platform
     * @param cloudPlatformId cloud platform id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCloudPlatform(Long cloudPlatformId) throws ApiException {
        deleteCloudPlatformWithHttpInfo(cloudPlatformId);
    }

    /**
     * 
     * Delete cloud platform
     * @param cloudPlatformId cloud platform id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCloudPlatformWithHttpInfo(Long cloudPlatformId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCloudPlatformValidateBeforeCall(cloudPlatformId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete cloud platform
     * @param cloudPlatformId cloud platform id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCloudPlatformAsync(Long cloudPlatformId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCloudPlatformValidateBeforeCall(cloudPlatformId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCloudPlatform
     * @param cloudPlatformId cloud platform id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCloudPlatformCall(Long cloudPlatformId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/cloud-platforms/{cloud_platform_id}"
            .replaceAll("\\{" + "cloud_platform_id" + "\\}", apiClient.escapeString(cloudPlatformId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCloudPlatformValidateBeforeCall(Long cloudPlatformId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'cloudPlatformId' is set
        if (cloudPlatformId == null) {
            throw new ApiException("Missing the required parameter 'cloudPlatformId' when calling getCloudPlatform(Async)");
        }
        
        com.squareup.okhttp.Call call = getCloudPlatformCall(cloudPlatformId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get a cloud platform
     * @param cloudPlatformId cloud platform id (required)
     * @return CloudPlatformResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudPlatformResp getCloudPlatform(Long cloudPlatformId) throws ApiException {
        ApiResponse<CloudPlatformResp> resp = getCloudPlatformWithHttpInfo(cloudPlatformId);
        return resp.getData();
    }

    /**
     * 
     * Get a cloud platform
     * @param cloudPlatformId cloud platform id (required)
     * @return ApiResponse&lt;CloudPlatformResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudPlatformResp> getCloudPlatformWithHttpInfo(Long cloudPlatformId) throws ApiException {
        com.squareup.okhttp.Call call = getCloudPlatformValidateBeforeCall(cloudPlatformId, null, null);
        Type localVarReturnType = new TypeToken<CloudPlatformResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a cloud platform
     * @param cloudPlatformId cloud platform id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCloudPlatformAsync(Long cloudPlatformId, final ApiCallback<CloudPlatformResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCloudPlatformValidateBeforeCall(cloudPlatformId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudPlatformResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCloudPlatforms
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCloudPlatformsCall(Long limit, Long offset, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/cloud-platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCloudPlatformsValidateBeforeCall(Long limit, Long offset, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listCloudPlatformsCall(limit, offset, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List cloud platforms
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @return CloudPlatformsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudPlatformsResp listCloudPlatforms(Long limit, Long offset, String clusterId) throws ApiException {
        ApiResponse<CloudPlatformsResp> resp = listCloudPlatformsWithHttpInfo(limit, offset, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List cloud platforms
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;CloudPlatformsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudPlatformsResp> listCloudPlatformsWithHttpInfo(Long limit, Long offset, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listCloudPlatformsValidateBeforeCall(limit, offset, clusterId, null, null);
        Type localVarReturnType = new TypeToken<CloudPlatformsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List cloud platforms
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCloudPlatformsAsync(Long limit, Long offset, String clusterId, final ApiCallback<CloudPlatformsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCloudPlatformsValidateBeforeCall(limit, offset, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudPlatformsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for syncCloudPlatform
     * @param cloudPlatformId cloud platform id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncCloudPlatformCall(Long cloudPlatformId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/cloud-platforms/{cloud_platform_id}:sync"
            .replaceAll("\\{" + "cloud_platform_id" + "\\}", apiClient.escapeString(cloudPlatformId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncCloudPlatformValidateBeforeCall(Long cloudPlatformId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'cloudPlatformId' is set
        if (cloudPlatformId == null) {
            throw new ApiException("Missing the required parameter 'cloudPlatformId' when calling syncCloudPlatform(Async)");
        }
        
        com.squareup.okhttp.Call call = syncCloudPlatformCall(cloudPlatformId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Sync a cloud platform
     * @param cloudPlatformId cloud platform id (required)
     * @return CloudPlatformResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudPlatformResp syncCloudPlatform(Long cloudPlatformId) throws ApiException {
        ApiResponse<CloudPlatformResp> resp = syncCloudPlatformWithHttpInfo(cloudPlatformId);
        return resp.getData();
    }

    /**
     * 
     * Sync a cloud platform
     * @param cloudPlatformId cloud platform id (required)
     * @return ApiResponse&lt;CloudPlatformResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudPlatformResp> syncCloudPlatformWithHttpInfo(Long cloudPlatformId) throws ApiException {
        com.squareup.okhttp.Call call = syncCloudPlatformValidateBeforeCall(cloudPlatformId, null, null);
        Type localVarReturnType = new TypeToken<CloudPlatformResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sync a cloud platform
     * @param cloudPlatformId cloud platform id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncCloudPlatformAsync(Long cloudPlatformId, final ApiCallback<CloudPlatformResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncCloudPlatformValidateBeforeCall(cloudPlatformId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudPlatformResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCloudPlatform
     * @param body cloud platform info (required)
     * @param cloudPlatformId cloud platform id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCloudPlatformCall(CloudPlatformUpdateReq body, Long cloudPlatformId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cloud-platforms/{cloud_platform_id}"
            .replaceAll("\\{" + "cloud_platform_id" + "\\}", apiClient.escapeString(cloudPlatformId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCloudPlatformValidateBeforeCall(CloudPlatformUpdateReq body, Long cloudPlatformId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCloudPlatform(Async)");
        }
        // verify the required parameter 'cloudPlatformId' is set
        if (cloudPlatformId == null) {
            throw new ApiException("Missing the required parameter 'cloudPlatformId' when calling updateCloudPlatform(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCloudPlatformCall(body, cloudPlatformId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update a cloud platform
     * @param body cloud platform info (required)
     * @param cloudPlatformId cloud platform id (required)
     * @return CloudPlatformResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudPlatformResp updateCloudPlatform(CloudPlatformUpdateReq body, Long cloudPlatformId) throws ApiException {
        ApiResponse<CloudPlatformResp> resp = updateCloudPlatformWithHttpInfo(body, cloudPlatformId);
        return resp.getData();
    }

    /**
     * 
     * Update a cloud platform
     * @param body cloud platform info (required)
     * @param cloudPlatformId cloud platform id (required)
     * @return ApiResponse&lt;CloudPlatformResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudPlatformResp> updateCloudPlatformWithHttpInfo(CloudPlatformUpdateReq body, Long cloudPlatformId) throws ApiException {
        com.squareup.okhttp.Call call = updateCloudPlatformValidateBeforeCall(body, cloudPlatformId, null, null);
        Type localVarReturnType = new TypeToken<CloudPlatformResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a cloud platform
     * @param body cloud platform info (required)
     * @param cloudPlatformId cloud platform id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCloudPlatformAsync(CloudPlatformUpdateReq body, Long cloudPlatformId, final ApiCallback<CloudPlatformResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCloudPlatformValidateBeforeCall(body, cloudPlatformId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudPlatformResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
