/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.ApiCallback;
import xio.sds.client.ApiClient;
import xio.sds.client.ApiException;
import xio.sds.client.ApiResponse;
import xio.sds.client.Configuration;
import xio.sds.client.Pair;
import xio.sds.client.ProgressRequestBody;
import xio.sds.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xio.sds.client.model.MultiObjectStorageBucketsSamplesResp;
import xio.sds.client.model.OSBucketAddReplicationPathsReq;
import xio.sds.client.model.OSBucketAddReplicationZonesReq;
import xio.sds.client.model.OSBucketCustomLabelsAddReq;
import xio.sds.client.model.OSBucketCustomLabelsRemoveReq;
import xio.sds.client.model.OSBucketCustomLabelsUpdateReq;
import xio.sds.client.model.OSBucketMetadataSearchSetReq;
import xio.sds.client.model.OSBucketOriginPullSamplesResp;
import xio.sds.client.model.OSBucketPolicySetReq;
import xio.sds.client.model.OSBucketRemoveLoggingsReq;
import xio.sds.client.model.OSBucketRemoveReplicationPathsReq;
import xio.sds.client.model.OSBucketRemoveReplicationZonesReq;
import xio.sds.client.model.OSBucketSetAccessLoggingReq;
import xio.sds.client.model.OSBucketSetObjectStorageClassReq;
import xio.sds.client.model.OSBucketSwitchOwnerOSZoneReq;
import xio.sds.client.model.OSBucketUpdateReplicationPathsReq;
import xio.sds.client.model.ObjectStorageBucketCreateReq;
import xio.sds.client.model.ObjectStorageBucketNFSClientResp;
import xio.sds.client.model.ObjectStorageBucketNFSClientUpdateReq;
import xio.sds.client.model.ObjectStorageBucketNFSClientsCreateReq;
import xio.sds.client.model.ObjectStorageBucketNFSClientsDeleteReq;
import xio.sds.client.model.ObjectStorageBucketNFSClientsResp;
import xio.sds.client.model.ObjectStorageBucketResp;
import xio.sds.client.model.ObjectStorageBucketSamplesResp;
import xio.sds.client.model.ObjectStorageBucketUpdateReq;
import xio.sds.client.model.ObjectStorageBucketsResp;
import xio.sds.client.model.ObjectStorageLifecycleSetReq;
import xio.sds.client.model.RawObjectStorageBucketResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OsBucketsApi {
    private ApiClient apiClient;

    public OsBucketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OsBucketsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addCustomLabels
     * @param body bucket custom labels info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCustomLabelsCall(OSBucketCustomLabelsAddReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:add-custom-labels"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCustomLabelsValidateBeforeCall(OSBucketCustomLabelsAddReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addCustomLabels(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling addCustomLabels(Async)");
        }
        
        com.squareup.okhttp.Call call = addCustomLabelsCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add object storage bucket custom labels
     * @param body bucket custom labels info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp addCustomLabels(OSBucketCustomLabelsAddReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = addCustomLabelsWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * add object storage bucket custom labels
     * @param body bucket custom labels info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> addCustomLabelsWithHttpInfo(OSBucketCustomLabelsAddReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = addCustomLabelsValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add object storage bucket custom labels
     * @param body bucket custom labels info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCustomLabelsAsync(OSBucketCustomLabelsAddReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCustomLabelsValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addOSReplicationPaths
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOSReplicationPathsCall(OSBucketAddReplicationPathsReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:add-os-replication-paths"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOSReplicationPathsValidateBeforeCall(OSBucketAddReplicationPathsReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOSReplicationPaths(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling addOSReplicationPaths(Async)");
        }
        
        com.squareup.okhttp.Call call = addOSReplicationPathsCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp addOSReplicationPaths(OSBucketAddReplicationPathsReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = addOSReplicationPathsWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * add os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> addOSReplicationPathsWithHttpInfo(OSBucketAddReplicationPathsReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = addOSReplicationPathsValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOSReplicationPathsAsync(OSBucketAddReplicationPathsReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOSReplicationPathsValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addOSReplicationZones
     * @param body replication zones info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOSReplicationZonesCall(OSBucketAddReplicationZonesReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:add-os-replication-zones"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOSReplicationZonesValidateBeforeCall(OSBucketAddReplicationZonesReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOSReplicationZones(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling addOSReplicationZones(Async)");
        }
        
        com.squareup.okhttp.Call call = addOSReplicationZonesCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * add os replication zones for os bucket
     * @param body replication zones info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp addOSReplicationZones(OSBucketAddReplicationZonesReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = addOSReplicationZonesWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * add os replication zones for os bucket
     * @param body replication zones info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> addOSReplicationZonesWithHttpInfo(OSBucketAddReplicationZonesReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = addOSReplicationZonesValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add os replication zones for os bucket
     * @param body replication zones info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOSReplicationZonesAsync(OSBucketAddReplicationZonesReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOSReplicationZonesValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for batchGetObjectStorageSamples
     * @param ids bucket ids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call batchGetObjectStorageSamplesCall(String ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/samples";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call batchGetObjectStorageSamplesValidateBeforeCall(String ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling batchGetObjectStorageSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = batchGetObjectStorageSamplesCall(ids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get samples of multiple object storage buckets
     * @param ids bucket ids (required)
     * @return MultiObjectStorageBucketsSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiObjectStorageBucketsSamplesResp batchGetObjectStorageSamples(String ids) throws ApiException {
        ApiResponse<MultiObjectStorageBucketsSamplesResp> resp = batchGetObjectStorageSamplesWithHttpInfo(ids);
        return resp.getData();
    }

    /**
     * 
     * Get samples of multiple object storage buckets
     * @param ids bucket ids (required)
     * @return ApiResponse&lt;MultiObjectStorageBucketsSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiObjectStorageBucketsSamplesResp> batchGetObjectStorageSamplesWithHttpInfo(String ids) throws ApiException {
        com.squareup.okhttp.Call call = batchGetObjectStorageSamplesValidateBeforeCall(ids, null, null);
        Type localVarReturnType = new TypeToken<MultiObjectStorageBucketsSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get samples of multiple object storage buckets
     * @param ids bucket ids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call batchGetObjectStorageSamplesAsync(String ids, final ApiCallback<MultiObjectStorageBucketsSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = batchGetObjectStorageSamplesValidateBeforeCall(ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiObjectStorageBucketsSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelDeleteBucket
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelDeleteBucketCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:cancel"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelDeleteBucketValidateBeforeCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling cancelDeleteBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelDeleteBucketCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * cancel delete bucket task
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp cancelDeleteBucket(Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = cancelDeleteBucketWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * 
     * cancel delete bucket task
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> cancelDeleteBucketWithHttpInfo(Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = cancelDeleteBucketValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * cancel delete bucket task
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelDeleteBucketAsync(Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelDeleteBucketValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBucket
     * @param body bucket info (required)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBucketCall(ObjectStorageBucketCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBucketValidateBeforeCall(ObjectStorageBucketCreateReq body, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = createBucketCall(body, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create os bucket
     * @param body bucket info (required)
     * @param clusterId cluster id (optional)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp createBucket(ObjectStorageBucketCreateReq body, String clusterId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = createBucketWithHttpInfo(body, clusterId);
        return resp.getData();
    }

    /**
     * 
     * Create os bucket
     * @param body bucket info (required)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> createBucketWithHttpInfo(ObjectStorageBucketCreateReq body, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = createBucketValidateBeforeCall(body, clusterId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create os bucket
     * @param body bucket info (required)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBucketAsync(ObjectStorageBucketCreateReq body, String clusterId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBucketValidateBeforeCall(body, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createObjectStorageBucketNFSClients
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createObjectStorageBucketNFSClientsCall(ObjectStorageBucketNFSClientsCreateReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}/nfs-clients"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createObjectStorageBucketNFSClientsValidateBeforeCall(ObjectStorageBucketNFSClientsCreateReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createObjectStorageBucketNFSClients(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling createObjectStorageBucketNFSClients(Async)");
        }
        
        com.squareup.okhttp.Call call = createObjectStorageBucketNFSClientsCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * create nfs client
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @return RawObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RawObjectStorageBucketResp createObjectStorageBucketNFSClients(ObjectStorageBucketNFSClientsCreateReq body, Long bucketId) throws ApiException {
        ApiResponse<RawObjectStorageBucketResp> resp = createObjectStorageBucketNFSClientsWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * create nfs client
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;RawObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RawObjectStorageBucketResp> createObjectStorageBucketNFSClientsWithHttpInfo(ObjectStorageBucketNFSClientsCreateReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = createObjectStorageBucketNFSClientsValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<RawObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create nfs client
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createObjectStorageBucketNFSClientsAsync(ObjectStorageBucketNFSClientsCreateReq body, Long bucketId, final ApiCallback<RawObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createObjectStorageBucketNFSClientsValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RawObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBucket
     * @param bucketId bucket id (required)
     * @param force force delete or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBucketCall(Long bucketId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBucketValidateBeforeCall(Long bucketId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling deleteBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteBucketCall(bucketId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete object storage bucket
     * @param bucketId bucket id (required)
     * @param force force delete or not (optional)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp deleteBucket(Long bucketId, Boolean force) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = deleteBucketWithHttpInfo(bucketId, force);
        return resp.getData();
    }

    /**
     * 
     * delete object storage bucket
     * @param bucketId bucket id (required)
     * @param force force delete or not (optional)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> deleteBucketWithHttpInfo(Long bucketId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteBucketValidateBeforeCall(bucketId, force, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete object storage bucket
     * @param bucketId bucket id (required)
     * @param force force delete or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBucketAsync(Long bucketId, Boolean force, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBucketValidateBeforeCall(bucketId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteObjectStorageBucketNFSClients
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteObjectStorageBucketNFSClientsCall(ObjectStorageBucketNFSClientsDeleteReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}/nfs-clients"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteObjectStorageBucketNFSClientsValidateBeforeCall(ObjectStorageBucketNFSClientsDeleteReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteObjectStorageBucketNFSClients(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling deleteObjectStorageBucketNFSClients(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteObjectStorageBucketNFSClientsCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete nfs clients
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @return RawObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RawObjectStorageBucketResp deleteObjectStorageBucketNFSClients(ObjectStorageBucketNFSClientsDeleteReq body, Long bucketId) throws ApiException {
        ApiResponse<RawObjectStorageBucketResp> resp = deleteObjectStorageBucketNFSClientsWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * delete nfs clients
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;RawObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RawObjectStorageBucketResp> deleteObjectStorageBucketNFSClientsWithHttpInfo(ObjectStorageBucketNFSClientsDeleteReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = deleteObjectStorageBucketNFSClientsValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<RawObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete nfs clients
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteObjectStorageBucketNFSClientsAsync(ObjectStorageBucketNFSClientsDeleteReq body, Long bucketId, final ApiCallback<RawObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteObjectStorageBucketNFSClientsValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RawObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteObjectStorageLifecycle
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteObjectStorageLifecycleCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}/lifecycle"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteObjectStorageLifecycleValidateBeforeCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling deleteObjectStorageLifecycle(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteObjectStorageLifecycleCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete object storage lifecycle
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp deleteObjectStorageLifecycle(Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = deleteObjectStorageLifecycleWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * 
     * delete object storage lifecycle
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> deleteObjectStorageLifecycleWithHttpInfo(Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = deleteObjectStorageLifecycleValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete object storage lifecycle
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteObjectStorageLifecycleAsync(Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteObjectStorageLifecycleValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBucket
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBucketCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBucketValidateBeforeCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = getBucketCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get object storage bucket
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp getBucket(Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = getBucketWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * 
     * Get object storage bucket
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> getBucketWithHttpInfo(Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = getBucketValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get object storage bucket
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBucketAsync(Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBucketValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOSBucketOriginPullSamples
     * @param bucketId bucket id (required)
     * @param originMode origin mode (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOSBucketOriginPullSamplesCall(Long bucketId, String originMode, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}/origin_pull_samples"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (originMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origin_mode", originMode));
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOSBucketOriginPullSamplesValidateBeforeCall(Long bucketId, String originMode, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getOSBucketOriginPullSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getOSBucketOriginPullSamplesCall(bucketId, originMode, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get an os bucket&#x27;s origin pull Samples
     * @param bucketId bucket id (required)
     * @param originMode origin mode (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return OSBucketOriginPullSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OSBucketOriginPullSamplesResp getOSBucketOriginPullSamples(Long bucketId, String originMode, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<OSBucketOriginPullSamplesResp> resp = getOSBucketOriginPullSamplesWithHttpInfo(bucketId, originMode, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get an os bucket&#x27;s origin pull Samples
     * @param bucketId bucket id (required)
     * @param originMode origin mode (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;OSBucketOriginPullSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OSBucketOriginPullSamplesResp> getOSBucketOriginPullSamplesWithHttpInfo(Long bucketId, String originMode, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getOSBucketOriginPullSamplesValidateBeforeCall(bucketId, originMode, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<OSBucketOriginPullSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get an os bucket&#x27;s origin pull Samples
     * @param bucketId bucket id (required)
     * @param originMode origin mode (optional)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOSBucketOriginPullSamplesAsync(Long bucketId, String originMode, String durationBegin, String durationEnd, String period, final ApiCallback<OSBucketOriginPullSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOSBucketOriginPullSamplesValidateBeforeCall(bucketId, originMode, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OSBucketOriginPullSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getObjectStorageBucketNFSClient
     * @param bucketId bucket id (required)
     * @param clientId nfs client id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getObjectStorageBucketNFSClientCall(Long bucketId, Long clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}/nfs-clients/{client_id}"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getObjectStorageBucketNFSClientValidateBeforeCall(Long bucketId, Long clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getObjectStorageBucketNFSClient(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getObjectStorageBucketNFSClient(Async)");
        }
        
        com.squareup.okhttp.Call call = getObjectStorageBucketNFSClientCall(bucketId, clientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * show nfs client
     * @param bucketId bucket id (required)
     * @param clientId nfs client id (required)
     * @return ObjectStorageBucketNFSClientResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketNFSClientResp getObjectStorageBucketNFSClient(Long bucketId, Long clientId) throws ApiException {
        ApiResponse<ObjectStorageBucketNFSClientResp> resp = getObjectStorageBucketNFSClientWithHttpInfo(bucketId, clientId);
        return resp.getData();
    }

    /**
     * 
     * show nfs client
     * @param bucketId bucket id (required)
     * @param clientId nfs client id (required)
     * @return ApiResponse&lt;ObjectStorageBucketNFSClientResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketNFSClientResp> getObjectStorageBucketNFSClientWithHttpInfo(Long bucketId, Long clientId) throws ApiException {
        com.squareup.okhttp.Call call = getObjectStorageBucketNFSClientValidateBeforeCall(bucketId, clientId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketNFSClientResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * show nfs client
     * @param bucketId bucket id (required)
     * @param clientId nfs client id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getObjectStorageBucketNFSClientAsync(Long bucketId, Long clientId, final ApiCallback<ObjectStorageBucketNFSClientResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getObjectStorageBucketNFSClientValidateBeforeCall(bucketId, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketNFSClientResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getObjectStorageBucketSamples
     * @param bucketId bucket id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getObjectStorageBucketSamplesCall(Long bucketId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}/samples"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (durationBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_begin", durationBegin));
        if (durationEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration_end", durationEnd));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getObjectStorageBucketSamplesValidateBeforeCall(Long bucketId, String durationBegin, String durationEnd, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getObjectStorageBucketSamples(Async)");
        }
        
        com.squareup.okhttp.Call call = getObjectStorageBucketSamplesCall(bucketId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get an object storage bucket&#x27;s Samples
     * @param bucketId bucket id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ObjectStorageBucketSamplesResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketSamplesResp getObjectStorageBucketSamples(Long bucketId, String durationBegin, String durationEnd, String period) throws ApiException {
        ApiResponse<ObjectStorageBucketSamplesResp> resp = getObjectStorageBucketSamplesWithHttpInfo(bucketId, durationBegin, durationEnd, period);
        return resp.getData();
    }

    /**
     * 
     * get an object storage bucket&#x27;s Samples
     * @param bucketId bucket id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @return ApiResponse&lt;ObjectStorageBucketSamplesResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketSamplesResp> getObjectStorageBucketSamplesWithHttpInfo(Long bucketId, String durationBegin, String durationEnd, String period) throws ApiException {
        com.squareup.okhttp.Call call = getObjectStorageBucketSamplesValidateBeforeCall(bucketId, durationBegin, durationEnd, period, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketSamplesResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get an object storage bucket&#x27;s Samples
     * @param bucketId bucket id (required)
     * @param durationBegin duration begin timestamp (optional)
     * @param durationEnd duration end timestamp (optional)
     * @param period samples period (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getObjectStorageBucketSamplesAsync(Long bucketId, String durationBegin, String durationEnd, String period, final ApiCallback<ObjectStorageBucketSamplesResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getObjectStorageBucketSamplesValidateBeforeCall(bucketId, durationBegin, durationEnd, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketSamplesResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBuckets
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of object storage buckets (optional)
     * @param osPolicyId The id of policy object storage buckets belong to (optional)
     * @param osUserId The id of user object storage buckets belong to (optional)
     * @param replicationUuid The uuid of replication os buckets belong to (optional)
     * @param virtual Virtual bucket or not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBucketsCall(String clusterId, Long limit, Long offset, String name, Long osPolicyId, Long osUserId, String replicationUuid, Boolean virtual, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (osPolicyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("os_policy_id", osPolicyId));
        if (osUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("os_user_id", osUserId));
        if (replicationUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replication_uuid", replicationUuid));
        if (virtual != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("virtual", virtual));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBucketsValidateBeforeCall(String clusterId, Long limit, Long offset, String name, Long osPolicyId, Long osUserId, String replicationUuid, Boolean virtual, String q, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listBucketsCall(clusterId, limit, offset, name, osPolicyId, osUserId, replicationUuid, virtual, q, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List object storage buckets
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of object storage buckets (optional)
     * @param osPolicyId The id of policy object storage buckets belong to (optional)
     * @param osUserId The id of user object storage buckets belong to (optional)
     * @param replicationUuid The uuid of replication os buckets belong to (optional)
     * @param virtual Virtual bucket or not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ObjectStorageBucketsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketsResp listBuckets(String clusterId, Long limit, Long offset, String name, Long osPolicyId, Long osUserId, String replicationUuid, Boolean virtual, String q, String sort) throws ApiException {
        ApiResponse<ObjectStorageBucketsResp> resp = listBucketsWithHttpInfo(clusterId, limit, offset, name, osPolicyId, osUserId, replicationUuid, virtual, q, sort);
        return resp.getData();
    }

    /**
     * 
     * List object storage buckets
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of object storage buckets (optional)
     * @param osPolicyId The id of policy object storage buckets belong to (optional)
     * @param osUserId The id of user object storage buckets belong to (optional)
     * @param replicationUuid The uuid of replication os buckets belong to (optional)
     * @param virtual Virtual bucket or not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @return ApiResponse&lt;ObjectStorageBucketsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketsResp> listBucketsWithHttpInfo(String clusterId, Long limit, Long offset, String name, Long osPolicyId, Long osUserId, String replicationUuid, Boolean virtual, String q, String sort) throws ApiException {
        com.squareup.okhttp.Call call = listBucketsValidateBeforeCall(clusterId, limit, offset, name, osPolicyId, osUserId, replicationUuid, virtual, q, sort, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List object storage buckets
     * @param clusterId cluster id (optional)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param name name of object storage buckets (optional)
     * @param osPolicyId The id of policy object storage buckets belong to (optional)
     * @param osUserId The id of user object storage buckets belong to (optional)
     * @param replicationUuid The uuid of replication os buckets belong to (optional)
     * @param virtual Virtual bucket or not (optional)
     * @param q query param of search (optional)
     * @param sort sort param of search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBucketsAsync(String clusterId, Long limit, Long offset, String name, Long osPolicyId, Long osUserId, String replicationUuid, Boolean virtual, String q, String sort, final ApiCallback<ObjectStorageBucketsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBucketsValidateBeforeCall(clusterId, limit, offset, name, osPolicyId, osUserId, replicationUuid, virtual, q, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listObjectStorageBucketNFSClients
     * @param bucketId bucket id (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listObjectStorageBucketNFSClientsCall(Long bucketId, Long limit, Long offset, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}/nfs-clients"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_id", clusterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listObjectStorageBucketNFSClientsValidateBeforeCall(Long bucketId, Long limit, Long offset, String clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling listObjectStorageBucketNFSClients(Async)");
        }
        
        com.squareup.okhttp.Call call = listObjectStorageBucketNFSClientsCall(bucketId, limit, offset, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * List nfs clients
     * @param bucketId bucket id (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @return ObjectStorageBucketNFSClientsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketNFSClientsResp listObjectStorageBucketNFSClients(Long bucketId, Long limit, Long offset, String clusterId) throws ApiException {
        ApiResponse<ObjectStorageBucketNFSClientsResp> resp = listObjectStorageBucketNFSClientsWithHttpInfo(bucketId, limit, offset, clusterId);
        return resp.getData();
    }

    /**
     * 
     * List nfs clients
     * @param bucketId bucket id (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @return ApiResponse&lt;ObjectStorageBucketNFSClientsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketNFSClientsResp> listObjectStorageBucketNFSClientsWithHttpInfo(Long bucketId, Long limit, Long offset, String clusterId) throws ApiException {
        com.squareup.okhttp.Call call = listObjectStorageBucketNFSClientsValidateBeforeCall(bucketId, limit, offset, clusterId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketNFSClientsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List nfs clients
     * @param bucketId bucket id (required)
     * @param limit paging param (optional)
     * @param offset paging param (optional)
     * @param clusterId cluster id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listObjectStorageBucketNFSClientsAsync(Long bucketId, Long limit, Long offset, String clusterId, final ApiCallback<ObjectStorageBucketNFSClientsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listObjectStorageBucketNFSClientsValidateBeforeCall(bucketId, limit, offset, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketNFSClientsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeCustomLabels
     * @param body custom labels info (required)
     * @param bucketId object storage bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeCustomLabelsCall(OSBucketCustomLabelsRemoveReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:remove-custom-labels"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeCustomLabelsValidateBeforeCall(OSBucketCustomLabelsRemoveReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeCustomLabels(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling removeCustomLabels(Async)");
        }
        
        com.squareup.okhttp.Call call = removeCustomLabelsCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove object storage bucket custom labels
     * @param body custom labels info (required)
     * @param bucketId object storage bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp removeCustomLabels(OSBucketCustomLabelsRemoveReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = removeCustomLabelsWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * remove object storage bucket custom labels
     * @param body custom labels info (required)
     * @param bucketId object storage bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> removeCustomLabelsWithHttpInfo(OSBucketCustomLabelsRemoveReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = removeCustomLabelsValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove object storage bucket custom labels
     * @param body custom labels info (required)
     * @param bucketId object storage bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeCustomLabelsAsync(OSBucketCustomLabelsRemoveReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeCustomLabelsValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeOSBucketLoggings
     * @param body os bucket loggings info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeOSBucketLoggingsCall(OSBucketRemoveLoggingsReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:remove-os-bucket-loggings"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeOSBucketLoggingsValidateBeforeCall(OSBucketRemoveLoggingsReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeOSBucketLoggings(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling removeOSBucketLoggings(Async)");
        }
        
        com.squareup.okhttp.Call call = removeOSBucketLoggingsCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Remove os bucket loggings of os bucket
     * @param body os bucket loggings info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp removeOSBucketLoggings(OSBucketRemoveLoggingsReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = removeOSBucketLoggingsWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * Remove os bucket loggings of os bucket
     * @param body os bucket loggings info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> removeOSBucketLoggingsWithHttpInfo(OSBucketRemoveLoggingsReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = removeOSBucketLoggingsValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove os bucket loggings of os bucket
     * @param body os bucket loggings info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeOSBucketLoggingsAsync(OSBucketRemoveLoggingsReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeOSBucketLoggingsValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeOSReplicationPaths
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeOSReplicationPathsCall(OSBucketRemoveReplicationPathsReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:remove-os-replication-paths"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeOSReplicationPathsValidateBeforeCall(OSBucketRemoveReplicationPathsReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeOSReplicationPaths(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling removeOSReplicationPaths(Async)");
        }
        
        com.squareup.okhttp.Call call = removeOSReplicationPathsCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp removeOSReplicationPaths(OSBucketRemoveReplicationPathsReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = removeOSReplicationPathsWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * remove os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> removeOSReplicationPathsWithHttpInfo(OSBucketRemoveReplicationPathsReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = removeOSReplicationPathsValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeOSReplicationPathsAsync(OSBucketRemoveReplicationPathsReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeOSReplicationPathsValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeOSReplicationZones
     * @param body replication zones info (required)
     * @param bucketId bucket id (required)
     * @param force force delete os replication zone even if target zone is dead (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeOSReplicationZonesCall(OSBucketRemoveReplicationZonesReq body, Long bucketId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:remove-os-replication-zones"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeOSReplicationZonesValidateBeforeCall(OSBucketRemoveReplicationZonesReq body, Long bucketId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeOSReplicationZones(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling removeOSReplicationZones(Async)");
        }
        
        com.squareup.okhttp.Call call = removeOSReplicationZonesCall(body, bucketId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * remove os replication zones for os bucket
     * @param body replication zones info (required)
     * @param bucketId bucket id (required)
     * @param force force delete os replication zone even if target zone is dead (optional)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp removeOSReplicationZones(OSBucketRemoveReplicationZonesReq body, Long bucketId, Boolean force) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = removeOSReplicationZonesWithHttpInfo(body, bucketId, force);
        return resp.getData();
    }

    /**
     * 
     * remove os replication zones for os bucket
     * @param body replication zones info (required)
     * @param bucketId bucket id (required)
     * @param force force delete os replication zone even if target zone is dead (optional)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> removeOSReplicationZonesWithHttpInfo(OSBucketRemoveReplicationZonesReq body, Long bucketId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = removeOSReplicationZonesValidateBeforeCall(body, bucketId, force, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * remove os replication zones for os bucket
     * @param body replication zones info (required)
     * @param bucketId bucket id (required)
     * @param force force delete os replication zone even if target zone is dead (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeOSReplicationZonesAsync(OSBucketRemoveReplicationZonesReq body, Long bucketId, Boolean force, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeOSReplicationZonesValidateBeforeCall(body, bucketId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAccessLogging
     * @param body access logging info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAccessLoggingCall(OSBucketSetAccessLoggingReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:set-access-logging"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAccessLoggingValidateBeforeCall(OSBucketSetAccessLoggingReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setAccessLogging(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling setAccessLogging(Async)");
        }
        
        com.squareup.okhttp.Call call = setAccessLoggingCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set access logging of os bucket
     * @param body access logging info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp setAccessLogging(OSBucketSetAccessLoggingReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = setAccessLoggingWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * Set access logging of os bucket
     * @param body access logging info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> setAccessLoggingWithHttpInfo(OSBucketSetAccessLoggingReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = setAccessLoggingValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set access logging of os bucket
     * @param body access logging info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAccessLoggingAsync(OSBucketSetAccessLoggingReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAccessLoggingValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setMetadataSearch
     * @param body bucket metadata search info (required)
     * @param bucketId object storage bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMetadataSearchCall(OSBucketMetadataSearchSetReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:set-metadata-search"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMetadataSearchValidateBeforeCall(OSBucketMetadataSearchSetReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setMetadataSearch(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling setMetadataSearch(Async)");
        }
        
        com.squareup.okhttp.Call call = setMetadataSearchCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set object storage bucket metadata search
     * @param body bucket metadata search info (required)
     * @param bucketId object storage bucket id (required)
     * @return ObjectStorageBucketsResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketsResp setMetadataSearch(OSBucketMetadataSearchSetReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketsResp> resp = setMetadataSearchWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * set object storage bucket metadata search
     * @param body bucket metadata search info (required)
     * @param bucketId object storage bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketsResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketsResp> setMetadataSearchWithHttpInfo(OSBucketMetadataSearchSetReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = setMetadataSearchValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketsResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * set object storage bucket metadata search
     * @param body bucket metadata search info (required)
     * @param bucketId object storage bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMetadataSearchAsync(OSBucketMetadataSearchSetReq body, Long bucketId, final ApiCallback<ObjectStorageBucketsResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMetadataSearchValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketsResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setOSBucketPolicy
     * @param body bucket policy info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setOSBucketPolicyCall(OSBucketPolicySetReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:set-bucket-policy"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setOSBucketPolicyValidateBeforeCall(OSBucketPolicySetReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setOSBucketPolicy(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling setOSBucketPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = setOSBucketPolicyCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * set object storage bucket policy
     * @param body bucket policy info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp setOSBucketPolicy(OSBucketPolicySetReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = setOSBucketPolicyWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * set object storage bucket policy
     * @param body bucket policy info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> setOSBucketPolicyWithHttpInfo(OSBucketPolicySetReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = setOSBucketPolicyValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * set object storage bucket policy
     * @param body bucket policy info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setOSBucketPolicyAsync(OSBucketPolicySetReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setOSBucketPolicyValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setObjectStorageClass
     * @param body object storage class info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setObjectStorageClassCall(OSBucketSetObjectStorageClassReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:set-object-storage-class"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setObjectStorageClassValidateBeforeCall(OSBucketSetObjectStorageClassReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setObjectStorageClass(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling setObjectStorageClass(Async)");
        }
        
        com.squareup.okhttp.Call call = setObjectStorageClassCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set bucket object match storage class
     * @param body object storage class info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp setObjectStorageClass(OSBucketSetObjectStorageClassReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = setObjectStorageClassWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * Set bucket object match storage class
     * @param body object storage class info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> setObjectStorageClassWithHttpInfo(OSBucketSetObjectStorageClassReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = setObjectStorageClassValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set bucket object match storage class
     * @param body object storage class info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setObjectStorageClassAsync(OSBucketSetObjectStorageClassReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setObjectStorageClassValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setObjectStorageLifecycleRules
     * @param body lifecyce rules info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setObjectStorageLifecycleRulesCall(ObjectStorageLifecycleSetReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}/lifecycle"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setObjectStorageLifecycleRulesValidateBeforeCall(ObjectStorageLifecycleSetReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setObjectStorageLifecycleRules(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling setObjectStorageLifecycleRules(Async)");
        }
        
        com.squareup.okhttp.Call call = setObjectStorageLifecycleRulesCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Set object storage lifecycle rules
     * @param body lifecyce rules info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp setObjectStorageLifecycleRules(ObjectStorageLifecycleSetReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = setObjectStorageLifecycleRulesWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * Set object storage lifecycle rules
     * @param body lifecyce rules info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> setObjectStorageLifecycleRulesWithHttpInfo(ObjectStorageLifecycleSetReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = setObjectStorageLifecycleRulesValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set object storage lifecycle rules
     * @param body lifecyce rules info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setObjectStorageLifecycleRulesAsync(ObjectStorageLifecycleSetReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setObjectStorageLifecycleRulesValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suspendAccessLoggings
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suspendAccessLoggingsCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:suspend-access-logging"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suspendAccessLoggingsValidateBeforeCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling suspendAccessLoggings(Async)");
        }
        
        com.squareup.okhttp.Call call = suspendAccessLoggingsCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * suspend access logging for os bucket
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp suspendAccessLoggings(Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = suspendAccessLoggingsWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * 
     * suspend access logging for os bucket
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> suspendAccessLoggingsWithHttpInfo(Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = suspendAccessLoggingsValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * suspend access logging for os bucket
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suspendAccessLoggingsAsync(Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suspendAccessLoggingsValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suspendOSReplicationPaths
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suspendOSReplicationPathsCall(OSBucketUpdateReplicationPathsReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:suspend-os-replication-paths"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suspendOSReplicationPathsValidateBeforeCall(OSBucketUpdateReplicationPathsReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling suspendOSReplicationPaths(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling suspendOSReplicationPaths(Async)");
        }
        
        com.squareup.okhttp.Call call = suspendOSReplicationPathsCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * suspend os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp suspendOSReplicationPaths(OSBucketUpdateReplicationPathsReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = suspendOSReplicationPathsWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * suspend os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> suspendOSReplicationPathsWithHttpInfo(OSBucketUpdateReplicationPathsReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = suspendOSReplicationPathsValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * suspend os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suspendOSReplicationPathsAsync(OSBucketUpdateReplicationPathsReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suspendOSReplicationPathsValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for switchOwnerOSZone
     * @param body new owner os zone info (required)
     * @param bucketId bucket id (required)
     * @param force force to switch even if old owner zone is dead (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call switchOwnerOSZoneCall(OSBucketSwitchOwnerOSZoneReq body, Long bucketId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:switch-owner-os-zone"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call switchOwnerOSZoneValidateBeforeCall(OSBucketSwitchOwnerOSZoneReq body, Long bucketId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling switchOwnerOSZone(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling switchOwnerOSZone(Async)");
        }
        
        com.squareup.okhttp.Call call = switchOwnerOSZoneCall(body, bucketId, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Switch owner zone of os bucket
     * @param body new owner os zone info (required)
     * @param bucketId bucket id (required)
     * @param force force to switch even if old owner zone is dead (optional)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp switchOwnerOSZone(OSBucketSwitchOwnerOSZoneReq body, Long bucketId, Boolean force) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = switchOwnerOSZoneWithHttpInfo(body, bucketId, force);
        return resp.getData();
    }

    /**
     * 
     * Switch owner zone of os bucket
     * @param body new owner os zone info (required)
     * @param bucketId bucket id (required)
     * @param force force to switch even if old owner zone is dead (optional)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> switchOwnerOSZoneWithHttpInfo(OSBucketSwitchOwnerOSZoneReq body, Long bucketId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = switchOwnerOSZoneValidateBeforeCall(body, bucketId, force, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Switch owner zone of os bucket
     * @param body new owner os zone info (required)
     * @param bucketId bucket id (required)
     * @param force force to switch even if old owner zone is dead (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call switchOwnerOSZoneAsync(OSBucketSwitchOwnerOSZoneReq body, Long bucketId, Boolean force, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = switchOwnerOSZoneValidateBeforeCall(body, bucketId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsetAccessLogging
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsetAccessLoggingCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:unset-access-logging"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsetAccessLoggingValidateBeforeCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling unsetAccessLogging(Async)");
        }
        
        com.squareup.okhttp.Call call = unsetAccessLoggingCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unset access logging of os bucket
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp unsetAccessLogging(Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = unsetAccessLoggingWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * 
     * Unset access logging of os bucket
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> unsetAccessLoggingWithHttpInfo(Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = unsetAccessLoggingValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unset access logging of os bucket
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsetAccessLoggingAsync(Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsetAccessLoggingValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsetOSBucketPolicy
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsetOSBucketPolicyCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:unset-bucket-policy"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsetOSBucketPolicyValidateBeforeCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling unsetOSBucketPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = unsetOSBucketPolicyCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * unset object storage bucket policy
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp unsetOSBucketPolicy(Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = unsetOSBucketPolicyWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * 
     * unset object storage bucket policy
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> unsetOSBucketPolicyWithHttpInfo(Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = unsetOSBucketPolicyValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * unset object storage bucket policy
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsetOSBucketPolicyAsync(Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsetOSBucketPolicyValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsuspendAccessLogging
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsuspendAccessLoggingCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:unsuspend-access-logging"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsuspendAccessLoggingValidateBeforeCall(Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling unsuspendAccessLogging(Async)");
        }
        
        com.squareup.okhttp.Call call = unsuspendAccessLoggingCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * unsuspend access logging for os bucket
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp unsuspendAccessLogging(Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = unsuspendAccessLoggingWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * 
     * unsuspend access logging for os bucket
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> unsuspendAccessLoggingWithHttpInfo(Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = unsuspendAccessLoggingValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * unsuspend access logging for os bucket
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsuspendAccessLoggingAsync(Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsuspendAccessLoggingValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsuspendOSReplicationPaths
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsuspendOSReplicationPathsCall(OSBucketUpdateReplicationPathsReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:unsuspend-os-replication-paths"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsuspendOSReplicationPathsValidateBeforeCall(OSBucketUpdateReplicationPathsReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling unsuspendOSReplicationPaths(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling unsuspendOSReplicationPaths(Async)");
        }
        
        com.squareup.okhttp.Call call = unsuspendOSReplicationPathsCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * unsuspend os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp unsuspendOSReplicationPaths(OSBucketUpdateReplicationPathsReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = unsuspendOSReplicationPathsWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * unsuspend os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> unsuspendOSReplicationPathsWithHttpInfo(OSBucketUpdateReplicationPathsReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = unsuspendOSReplicationPathsValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * unsuspend os replication paths for os bucket
     * @param body replication paths info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsuspendOSReplicationPathsAsync(OSBucketUpdateReplicationPathsReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsuspendOSReplicationPathsValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBucket
     * @param body bucket info (required)
     * @param bucketId bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBucketCall(ObjectStorageBucketUpdateReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBucketValidateBeforeCall(ObjectStorageBucketUpdateReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBucket(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling updateBucket(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBucketCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update object storage bucket
     * @param body bucket info (required)
     * @param bucketId bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp updateBucket(ObjectStorageBucketUpdateReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = updateBucketWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * Update object storage bucket
     * @param body bucket info (required)
     * @param bucketId bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> updateBucketWithHttpInfo(ObjectStorageBucketUpdateReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = updateBucketValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update object storage bucket
     * @param body bucket info (required)
     * @param bucketId bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBucketAsync(ObjectStorageBucketUpdateReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBucketValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomLabels
     * @param body custom labels info (required)
     * @param bucketId object storage bucket id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomLabelsCall(OSBucketCustomLabelsUpdateReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}:update-custom-labels"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomLabelsValidateBeforeCall(OSBucketCustomLabelsUpdateReq body, Long bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCustomLabels(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling updateCustomLabels(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCustomLabelsCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update object storage bucket custom labels
     * @param body custom labels info (required)
     * @param bucketId object storage bucket id (required)
     * @return ObjectStorageBucketResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketResp updateCustomLabels(OSBucketCustomLabelsUpdateReq body, Long bucketId) throws ApiException {
        ApiResponse<ObjectStorageBucketResp> resp = updateCustomLabelsWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * 
     * update object storage bucket custom labels
     * @param body custom labels info (required)
     * @param bucketId object storage bucket id (required)
     * @return ApiResponse&lt;ObjectStorageBucketResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketResp> updateCustomLabelsWithHttpInfo(OSBucketCustomLabelsUpdateReq body, Long bucketId) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomLabelsValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update object storage bucket custom labels
     * @param body custom labels info (required)
     * @param bucketId object storage bucket id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomLabelsAsync(OSBucketCustomLabelsUpdateReq body, Long bucketId, final ApiCallback<ObjectStorageBucketResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomLabelsValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateObjectStorageBucketNFSClient
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @param clientId nfs client id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateObjectStorageBucketNFSClientCall(ObjectStorageBucketNFSClientUpdateReq body, Long bucketId, Long clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/os-buckets/{bucket_id}/nfs-clients/{client_id}"
            .replaceAll("\\{" + "bucket_id" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tokenInHeader", "tokenInQuery" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateObjectStorageBucketNFSClientValidateBeforeCall(ObjectStorageBucketNFSClientUpdateReq body, Long bucketId, Long clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateObjectStorageBucketNFSClient(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling updateObjectStorageBucketNFSClient(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateObjectStorageBucketNFSClient(Async)");
        }
        
        com.squareup.okhttp.Call call = updateObjectStorageBucketNFSClientCall(body, bucketId, clientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * update nfs client
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @param clientId nfs client id (required)
     * @return ObjectStorageBucketNFSClientResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectStorageBucketNFSClientResp updateObjectStorageBucketNFSClient(ObjectStorageBucketNFSClientUpdateReq body, Long bucketId, Long clientId) throws ApiException {
        ApiResponse<ObjectStorageBucketNFSClientResp> resp = updateObjectStorageBucketNFSClientWithHttpInfo(body, bucketId, clientId);
        return resp.getData();
    }

    /**
     * 
     * update nfs client
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @param clientId nfs client id (required)
     * @return ApiResponse&lt;ObjectStorageBucketNFSClientResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectStorageBucketNFSClientResp> updateObjectStorageBucketNFSClientWithHttpInfo(ObjectStorageBucketNFSClientUpdateReq body, Long bucketId, Long clientId) throws ApiException {
        com.squareup.okhttp.Call call = updateObjectStorageBucketNFSClientValidateBeforeCall(body, bucketId, clientId, null, null);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketNFSClientResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update nfs client
     * @param body nfs client info (required)
     * @param bucketId bucket id (required)
     * @param clientId nfs client id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateObjectStorageBucketNFSClientAsync(ObjectStorageBucketNFSClientUpdateReq body, Long bucketId, Long clientId, final ApiCallback<ObjectStorageBucketNFSClientResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateObjectStorageBucketNFSClientValidateBeforeCall(body, bucketId, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectStorageBucketNFSClientResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
