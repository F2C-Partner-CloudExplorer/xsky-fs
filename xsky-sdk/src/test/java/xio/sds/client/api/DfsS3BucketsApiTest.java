/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.model.DfsS3BucketCreateReq;
import xio.sds.client.model.DfsS3BucketPolicySetReq;
import xio.sds.client.model.DfsS3BucketResp;
import xio.sds.client.model.DfsS3BucketSamplesResp;
import xio.sds.client.model.DfsS3BucketUpdateReq;
import xio.sds.client.model.DfsS3BucketsResp;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DfsS3BucketsApi
 */
@Ignore
public class DfsS3BucketsApiTest {

    private final DfsS3BucketsApi api = new DfsS3BucketsApi();

    /**
     * 
     *
     * Create os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDfsS3BucketTest() throws Exception {
        DfsS3BucketCreateReq body = null;
        String clusterId = null;
        Boolean allowPathCreate = null;
        DfsS3BucketResp response = api.createDfsS3Bucket(body, clusterId, allowPathCreate);

        // TODO: test validations
    }
    /**
     * 
     *
     * delete dfs s3 bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDfsS3BucketTest() throws Exception {
        Long bucketId = null;
        Boolean withDirectory = null;
        DfsS3BucketResp response = api.deleteDfsS3Bucket(bucketId, withDirectory);

        // TODO: test validations
    }
    /**
     * 
     *
     * delete dfs s3 bucket policy
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDfsS3BucketPolicyTest() throws Exception {
        Long bucketId = null;
        DfsS3BucketResp response = api.deleteDfsS3BucketPolicy(bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get dfs s3 bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDfsS3BucketTest() throws Exception {
        Long bucketId = null;
        DfsS3BucketResp response = api.getDfsS3Bucket(bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get an dfs s3 bucket&#x27;s Samples
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDfsS3BucketSamplesTest() throws Exception {
        Long bucketId = null;
        String durationBegin = null;
        String durationEnd = null;
        String period = null;
        DfsS3BucketSamplesResp response = api.getDfsS3BucketSamples(bucketId, durationBegin, durationEnd, period);

        // TODO: test validations
    }
    /**
     * 
     *
     * List dfs s3 buckets
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listDfsS3BucketsTest() throws Exception {
        String clusterId = null;
        Long limit = null;
        Long offset = null;
        String name = null;
        Long ownerId = null;
        Long pathId = null;
        String q = null;
        String sort = null;
        DfsS3BucketsResp response = api.listDfsS3Buckets(clusterId, limit, offset, name, ownerId, pathId, q, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * set dfs s3 bucket policy
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setDfsS3BucketPolicyTest() throws Exception {
        DfsS3BucketPolicySetReq body = null;
        Long bucketId = null;
        DfsS3BucketResp response = api.setDfsS3BucketPolicy(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update dfs s3 bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDfsS3BucketTest() throws Exception {
        DfsS3BucketUpdateReq body = null;
        Long bucketId = null;
        DfsS3BucketResp response = api.updateDfsS3Bucket(body, bucketId);

        // TODO: test validations
    }
}
