/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.model.DfsDirectoriesReq;
import xio.sds.client.model.DfsDirectoriesResp;
import xio.sds.client.model.DfsDirectoryReq;
import xio.sds.client.model.DfsDirectoryResourcesResp;
import xio.sds.client.model.DfsDirectoryResp;
import xio.sds.client.model.DfsDirectoryValidationResp;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DfsDirectoriesApi
 */
@Ignore
public class DfsDirectoriesApiTest {

    private final DfsDirectoriesApi api = new DfsDirectoriesApi();

    /**
     * 
     *
     * check if resource exists on directory
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkDirectoryResourcesTest() throws Exception {
        DfsDirectoryReq body = null;
        DfsDirectoryResourcesResp response = api.checkDirectoryResources(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create directories in dfs rootfs
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDfsDirectoriesTest() throws Exception {
        DfsDirectoriesReq body = null;
        DfsDirectoriesResp response = api.createDfsDirectories(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create directory in dfs rootfs
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDfsDirectoryTest() throws Exception {
        DfsDirectoryReq body = null;
        DfsDirectoryResp response = api.createDfsDirectory(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete directories in dfs rootfs, deprecated
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDfsDirectoriesTest() throws Exception {
        DfsDirectoriesReq body = null;
        DfsDirectoriesResp response = api.deleteDfsDirectories(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete directory in dfs rootfs
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDfsDirectoryTest() throws Exception {
        DfsDirectoryReq body = null;
        DfsDirectoryResp response = api.deleteDfsDirectory(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * validate specified directory whether exists, subdirectory contains quotas, snapshots, shares
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void directoryValidatorTest() throws Exception {
        Long rootfsId = null;
        String path = null;
        DfsDirectoryValidationResp response = api.directoryValidator(rootfsId, path);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update policy on Directory
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePolicyOnDfsDirectoryTest() throws Exception {
        DfsDirectoryReq body = null;
        DfsDirectoryResp response = api.updatePolicyOnDfsDirectory(body);

        // TODO: test validations
    }
}
