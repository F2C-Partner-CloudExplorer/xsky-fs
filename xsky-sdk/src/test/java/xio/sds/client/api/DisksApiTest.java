/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.model.DiskRebuildReq;
import xio.sds.client.model.DiskResp;
import xio.sds.client.model.DiskSamplesResp;
import xio.sds.client.model.DiskUpdateReq;
import xio.sds.client.model.DisksResp;
import xio.sds.client.model.PartitionsCreateReq;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DisksApi
 */
@Ignore
public class DisksApiTest {

    private final DisksApi api = new DisksApi();

    /**
     * 
     *
     * create cache partitions for disk
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPartitionsTest() throws Exception {
        PartitionsCreateReq body = null;
        Long diskId = null;
        Long num = null;
        DiskResp response = api.createPartitions(body, diskId, num);

        // TODO: test validations
    }
    /**
     * 
     *
     * delete cache partitions of disk
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePartitionsTest() throws Exception {
        Long diskId = null;
        DiskResp response = api.deletePartitions(diskId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get a disk
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDiskTest() throws Exception {
        Long diskId = null;
        DiskResp response = api.getDisk(diskId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get a disk&#x27;s samples
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDiskSamplesTest() throws Exception {
        Long diskId = null;
        String durationBegin = null;
        String durationEnd = null;
        String period = null;
        DiskSamplesResp response = api.getDiskSamples(diskId, durationBegin, durationEnd, period);

        // TODO: test validations
    }
    /**
     * 
     *
     * List all pyhsical disks in the system
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listDisksTest() throws Exception {
        Long limit = null;
        Long offset = null;
        Long hostId = null;
        String clusterId = null;
        Long rebuildDiskId = null;
        Boolean isCache = null;
        String diskType = null;
        String usage = null;
        Boolean used = null;
        String q = null;
        String sort = null;
        String device = null;
        String status = null;
        String ids = null;
        String hostIds = null;
        String orderBy = null;
        DisksResp response = api.listDisks(limit, offset, hostId, clusterId, rebuildDiskId, isCache, diskType, usage, used, q, sort, device, status, ids, hostIds, orderBy);

        // TODO: test validations
    }
    /**
     * 
     *
     * rebuild disk with a new disk
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rebuildDiskTest() throws Exception {
        DiskRebuildReq body = null;
        Long diskId = null;
        DiskResp response = api.rebuildDisk(body, diskId);

        // TODO: test validations
    }
    /**
     * 
     *
     * update disk info
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDiskTest() throws Exception {
        DiskUpdateReq body = null;
        Long diskId = null;
        DiskResp response = api.updateDisk(body, diskId);

        // TODO: test validations
    }
}
