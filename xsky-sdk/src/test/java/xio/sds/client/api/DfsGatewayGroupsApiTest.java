/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.model.DfsGatewayGroupAddGatewaysReq;
import xio.sds.client.model.DfsGatewayGroupCreateReq;
import xio.sds.client.model.DfsGatewayGroupRebuildGatewaysReq;
import xio.sds.client.model.DfsGatewayGroupRemoveGatewaysReq;
import xio.sds.client.model.DfsGatewayGroupResp;
import xio.sds.client.model.DfsGatewayGroupUpdateReq;
import xio.sds.client.model.DfsGatewayGroupUpdateTypesReq;
import xio.sds.client.model.DfsGatewayGroupUpdateVIPsReq;
import xio.sds.client.model.DfsGatewayGroupsResp;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DfsGatewayGroupsApi
 */
@Ignore
public class DfsGatewayGroupsApiTest {

    private final DfsGatewayGroupsApi api = new DfsGatewayGroupsApi();

    /**
     * 
     *
     * add dfs gateways
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addDfsGatewaysTest() throws Exception {
        DfsGatewayGroupAddGatewaysReq body = null;
        Long dfsGatewayGroupId = null;
        DfsGatewayGroupResp response = api.addDfsGateways(body, dfsGatewayGroupId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create dfs gateway group
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDfsGatewayGroupTest() throws Exception {
        DfsGatewayGroupCreateReq body = null;
        String clusterId = null;
        DfsGatewayGroupResp response = api.createDfsGatewayGroup(body, clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * delete dfs gateway group
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDfsGatewayGroupTest() throws Exception {
        Long dfsGatewayGroupId = null;
        Boolean force = null;
        DfsGatewayGroupResp response = api.deleteDfsGatewayGroup(dfsGatewayGroupId, force);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get dfs gateway group
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDfsGatewayGroupTest() throws Exception {
        Long dfsGatewayGroupId = null;
        DfsGatewayGroupResp response = api.getDfsGatewayGroup(dfsGatewayGroupId);

        // TODO: test validations
    }
    /**
     * 
     *
     * List dfs gateway groups
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listDfsGatewayGroupsTest() throws Exception {
        Long limit = null;
        Long offset = null;
        String clusterId = null;
        String type = null;
        String security = null;
        String q = null;
        String sort = null;
        DfsGatewayGroupsResp response = api.listDfsGatewayGroups(limit, offset, clusterId, type, security, q, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * rebuild gateways in gateway group
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rebuildDfsGatewaysTest() throws Exception {
        DfsGatewayGroupRebuildGatewaysReq body = null;
        Long dfsGatewayGroupId = null;
        DfsGatewayGroupResp response = api.rebuildDfsGateways(body, dfsGatewayGroupId);

        // TODO: test validations
    }
    /**
     * 
     *
     * remove gateways from gateway group
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeDfsGatewaysTest() throws Exception {
        DfsGatewayGroupRemoveGatewaysReq body = null;
        Long dfsGatewayGroupId = null;
        Boolean force = null;
        DfsGatewayGroupResp response = api.removeDfsGateways(body, dfsGatewayGroupId, force);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update dfs gateway group
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDfsGatewayGroupTest() throws Exception {
        DfsGatewayGroupUpdateReq body = null;
        Long dfsGatewayGroupId = null;
        DfsGatewayGroupResp response = api.updateDfsGatewayGroup(body, dfsGatewayGroupId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update protocal types of dfs gateway group
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDfsGatewayGroupTypesTest() throws Exception {
        DfsGatewayGroupUpdateTypesReq body = null;
        Long dfsGatewayGroupId = null;
        DfsGatewayGroupResp response = api.updateDfsGatewayGroupTypes(body, dfsGatewayGroupId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update VIPs of dfs gateway group
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDfsGatewayGroupVIPsTest() throws Exception {
        DfsGatewayGroupUpdateVIPsReq body = null;
        Long dfsGatewayGroupId = null;
        DfsGatewayGroupResp response = api.updateDfsGatewayGroupVIPs(body, dfsGatewayGroupId);

        // TODO: test validations
    }
}
