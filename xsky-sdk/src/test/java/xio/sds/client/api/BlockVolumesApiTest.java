/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.model.MultiVolumesSamplesResp;
import xio.sds.client.model.UpdateVolumeStatReq;
import xio.sds.client.model.VolumeAsyncReplicationProtectionReq;
import xio.sds.client.model.VolumeBackupProtectionReq;
import xio.sds.client.model.VolumeCrcSetReq;
import xio.sds.client.model.VolumeCreateReq;
import xio.sds.client.model.VolumeMigrateReq;
import xio.sds.client.model.VolumeReplicationSetReq;
import xio.sds.client.model.VolumeResp;
import xio.sds.client.model.VolumeSamplesResp;
import xio.sds.client.model.VolumeSnapshotProtectionReq;
import xio.sds.client.model.VolumeUpdateReq;
import xio.sds.client.model.VolumeUpdateVolumeNameReq;
import xio.sds.client.model.VolumesResp;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for BlockVolumesApi
 */
@Ignore
public class BlockVolumesApiTest {

    private final BlockVolumesApi api = new BlockVolumesApi();

    /**
     * 
     *
     * Get samples of multiple block volumes
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void batchGetBlockVolumeSamplesTest() throws Exception {
        String ids = null;
        String durationBegin = null;
        String durationEnd = null;
        String period = null;
        MultiVolumesSamplesResp response = api.batchGetBlockVolumeSamples(ids, durationBegin, durationEnd, period);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create block volume
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createBlockVolumeTest() throws Exception {
        VolumeCreateReq body = null;
        VolumeResp response = api.createBlockVolume(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete block volume
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteBlockVolumeTest() throws Exception {
        Long blockVolumeId = null;
        Boolean bypassTrash = null;
        VolumeResp response = api.deleteBlockVolume(blockVolumeId, bypassTrash);

        // TODO: test validations
    }
    /**
     * 
     *
     * get a block volume
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBlockVolumeTest() throws Exception {
        Long blockVolumeId = null;
        VolumeResp response = api.getBlockVolume(blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get a block volume&#x27;s Samples
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBlockVolumeSamplesTest() throws Exception {
        Long blockVolumeId = null;
        String durationBegin = null;
        String durationEnd = null;
        String period = null;
        VolumeSamplesResp response = api.getBlockVolumeSamples(blockVolumeId, durationBegin, durationEnd, period);

        // TODO: test validations
    }
    /**
     * 
     *
     * List block volumes
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listBlockVolumesTest() throws Exception {
        Long limit = null;
        Long offset = null;
        Long poolId = null;
        String poolName = null;
        String clusterId = null;
        Long blockSnapshotId = null;
        String name = null;
        String namePrefix = null;
        String volumeName = null;
        String uid = null;
        Long clientGroupId = null;
        Long mappingGroupId = null;
        Long excludeMappingGroupId = null;
        Long accessPathId = null;
        Boolean passive = null;
        Boolean recycled = null;
        String status = null;
        Boolean withNotUsed = null;
        String q = null;
        String sort = null;
        Boolean all = null;
        Long dpBlockBackupPolicyId = null;
        Long dpBlockAsyncReplicationPolicyId = null;
        Boolean couldHaveIo = null;
        Long rbdClientId = null;
        VolumesResp response = api.listBlockVolumes(limit, offset, poolId, poolName, clusterId, blockSnapshotId, name, namePrefix, volumeName, uid, clientGroupId, mappingGroupId, excludeMappingGroupId, accessPathId, passive, recycled, status, withNotUsed, q, sort, all, dpBlockBackupPolicyId, dpBlockAsyncReplicationPolicyId, couldHaveIo, rbdClientId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void migrateBlockVolumeTest() throws Exception {
        VolumeMigrateReq body = null;
        Long blockVolumeId = null;
        VolumeResp response = api.migrateBlockVolume(body, blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Rebuild block volume replication
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rebuildBlockVolumeReplicationTest() throws Exception {
        Long blockVolumeId = null;
        Boolean force = null;
        VolumeResp response = api.rebuildBlockVolumeReplication(blockVolumeId, force);

        // TODO: test validations
    }
    /**
     * 
     *
     * Set async replication protection for a block volume
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setAsyncReplicationProtectionTest() throws Exception {
        VolumeAsyncReplicationProtectionReq body = null;
        Long blockVolumeId = null;
        VolumeResp response = api.setAsyncReplicationProtection(body, blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Set backup protection for a block volume
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setBackupProtectionTest() throws Exception {
        VolumeBackupProtectionReq body = null;
        Long blockVolumeId = null;
        VolumeResp response = api.setBackupProtection(body, blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Set block volume crc
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setBlockVolumeCrcTest() throws Exception {
        VolumeCrcSetReq body = null;
        Long blockVolumeId = null;
        VolumeResp response = api.setBlockVolumeCrc(body, blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Set block volume replication
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setBlockVolumeReplicationTest() throws Exception {
        VolumeReplicationSetReq body = null;
        Long blockVolumeId = null;
        VolumeResp response = api.setBlockVolumeReplication(body, blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Set snapshot protection for a block volume
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setSnapshotProtectionTest() throws Exception {
        VolumeSnapshotProtectionReq body = null;
        Long blockVolumeId = null;
        VolumeResp response = api.setSnapshotProtection(body, blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Suspend block volume replication
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void suspendBlockVolumeReplicationTest() throws Exception {
        Long blockVolumeId = null;
        VolumeResp response = api.suspendBlockVolumeReplication(blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Unset async replication protection for a block volume
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsetAsyncReplicationProtectionTest() throws Exception {
        Long blockVolumeId = null;
        Boolean force = null;
        Boolean reserveVolume = null;
        VolumeResp response = api.unsetAsyncReplicationProtection(blockVolumeId, force, reserveVolume);

        // TODO: test validations
    }
    /**
     * 
     *
     * Unset backup protection for a block volume
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsetBackupProtectionTest() throws Exception {
        Long blockVolumeId = null;
        Boolean force = null;
        VolumeResp response = api.unsetBackupProtection(blockVolumeId, force);

        // TODO: test validations
    }
    /**
     * 
     *
     * Unset block volume crc
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsetBlockVolumeCrcTest() throws Exception {
        VolumeCrcSetReq body = null;
        Long blockVolumeId = null;
        VolumeResp response = api.unsetBlockVolumeCrc(body, blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Unset block volume replication
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsetBlockVolumeReplicationTest() throws Exception {
        Long blockVolumeId = null;
        VolumeResp response = api.unsetBlockVolumeReplication(blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Unset snapshot protection for a block volume
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsetSnapshotProtectionTest() throws Exception {
        Long blockVolumeId = null;
        Boolean force = null;
        VolumeResp response = api.unsetSnapshotProtection(blockVolumeId, force);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update block volume info
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateBlockVolumeTest() throws Exception {
        VolumeUpdateReq body = null;
        Long blockVolumeId = null;
        VolumeResp response = api.updateBlockVolume(body, blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update block volume volume_name
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateBlockVolumeVolumeNameTest() throws Exception {
        VolumeUpdateVolumeNameReq body = null;
        Long blockVolumeId = null;
        VolumeResp response = api.updateBlockVolumeVolumeName(body, blockVolumeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * update volume stat from other cluster
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateVolumeStatTest() throws Exception {
        UpdateVolumeStatReq body = null;
        api.updateVolumeStat(body);

        // TODO: test validations
    }
}
