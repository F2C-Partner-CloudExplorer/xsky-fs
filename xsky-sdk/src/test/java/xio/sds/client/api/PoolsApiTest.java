/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.model.ECPoolUpdateCrushRuleReq;
import xio.sds.client.model.EmptyPoolInitializeReq;
import xio.sds.client.model.OsdsAddReq;
import xio.sds.client.model.OsdsRemoveReq;
import xio.sds.client.model.OspDataBackendPoolsOperateReq;
import xio.sds.client.model.OspPoolOutsideReq;
import xio.sds.client.model.OspPoolOutsideResp;
import xio.sds.client.model.PoolCapacityReq;
import xio.sds.client.model.PoolCapacityResp;
import xio.sds.client.model.PoolCreateReq;
import xio.sds.client.model.PoolFullCheckReq;
import xio.sds.client.model.PoolFullCheckResp;
import xio.sds.client.model.PoolGCPolicyPlan;
import xio.sds.client.model.PoolPredictionsResp;
import xio.sds.client.model.PoolResp;
import xio.sds.client.model.PoolSamplesResp;
import xio.sds.client.model.PoolTopologyResp;
import xio.sds.client.model.PoolUpdateReq;
import xio.sds.client.model.PoolsResp;
import xio.sds.client.model.TaskIDResp;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for PoolsApi
 */
@Ignore
public class PoolsApiTest {

    private final PoolsApi api = new PoolsApi();

    /**
     * 
     *
     * Add osds to pool
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addOsdsToPoolTest() throws Exception {
        OsdsAddReq body = null;
        Long poolId = null;
        PoolResp response = api.addOsdsToPool(body, poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Add pool to outside databackend
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addPoolToOutsideBackendTest() throws Exception {
        OspPoolOutsideReq body = null;
        OspPoolOutsideResp response = api.addPoolToOutsideBackend(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Adds pools to osp data backend
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addPoolsToOspDataBackendTest() throws Exception {
        OspDataBackendPoolsOperateReq body = null;
        TaskIDResp response = api.addPoolsToOspDataBackend(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * calculate pool capacity
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void calcCapacityTest() throws Exception {
        PoolCapacityReq body = null;
        PoolCapacityResp response = api.calcCapacity(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * checks if pools are full
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkFullTest() throws Exception {
        PoolFullCheckReq body = null;
        PoolFullCheckResp response = api.checkFull(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create pool
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPoolTest() throws Exception {
        PoolCreateReq body = null;
        String clusterId = null;
        PoolResp response = api.createPool(body, clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete pool
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePoolTest() throws Exception {
        Long poolId = null;
        Boolean force = null;
        PoolResp response = api.deletePool(poolId, force);

        // TODO: test validations
    }
    /**
     * 
     *
     * Disable device type check when add osd
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void disablePoolDeviceTypeCheckTest() throws Exception {
        Long poolId = null;
        PoolResp response = api.disablePoolDeviceTypeCheck(poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Disable pool numa
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void disablePoolNumaTest() throws Exception {
        Long poolId = null;
        PoolResp response = api.disablePoolNuma(poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Enable device type check when add osd
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void enablePoolDeviceTypeCheckTest() throws Exception {
        Long poolId = null;
        PoolResp response = api.enablePoolDeviceTypeCheck(poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Enable pool numa
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void enablePoolNumaTest() throws Exception {
        Long poolId = null;
        PoolResp response = api.enablePoolNuma(poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get pool
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPoolTest() throws Exception {
        Long poolId = null;
        PoolResp response = api.getPool(poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get a pool&#x27;s prediction
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPoolPredictionsTest() throws Exception {
        Long poolId = null;
        PoolPredictionsResp response = api.getPoolPredictions(poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get pool&#x27;s samples
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPoolSamplesTest() throws Exception {
        Long poolId = null;
        Boolean clientIo = null;
        String durationBegin = null;
        String durationEnd = null;
        String period = null;
        PoolSamplesResp response = api.getPoolSamples(poolId, clientIo, durationBegin, durationEnd, period);

        // TODO: test validations
    }
    /**
     * 
     *
     * get pool topology
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPoolTopologyTest() throws Exception {
        Long poolId = null;
        PoolTopologyResp response = api.getPoolTopology(poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * initialize an empty pool
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void initializeEmptyPoolTest() throws Exception {
        EmptyPoolInitializeReq body = null;
        Long poolId = null;
        PoolResp response = api.initializeEmptyPool(body, poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * List pools
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listPoolsTest() throws Exception {
        Long limit = null;
        Long offset = null;
        Boolean all = null;
        Long protectionDomainId = null;
        String clusterId = null;
        Boolean compoundOsdOnly = null;
        Long osdGroupId = null;
        String poolType = null;
        String poolRole = null;
        String poolMode = null;
        Boolean stretched = null;
        Boolean withCompound = null;
        Boolean isCache = null;
        Long osPolicyId = null;
        Long storageClassId = null;
        String storageClassPoolType = null;
        Long ospDataBackendId = null;
        String ospClusterId = null;
        String q = null;
        String sort = null;
        Long poolIds = null;
        PoolsResp response = api.listPools(limit, offset, all, protectionDomainId, clusterId, compoundOsdOnly, osdGroupId, poolType, poolRole, poolMode, stretched, withCompound, isCache, osPolicyId, storageClassId, storageClassPoolType, ospDataBackendId, ospClusterId, q, sort, poolIds);

        // TODO: test validations
    }
    /**
     * 
     *
     * Remove pools from outside backend
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeFromOutsideBackendTest() throws Exception {
        OspPoolOutsideReq body = null;
        OspPoolOutsideResp response = api.removeFromOutsideBackend(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Remove multiple osds from a pool
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeOsdsFromPoolTest() throws Exception {
        OsdsRemoveReq body = null;
        Long poolId = null;
        PoolResp response = api.removeOsdsFromPool(body, poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Remove pools from osp data backend
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removePoolsFromOspDataBackendTest() throws Exception {
        OspDataBackendPoolsOperateReq body = null;
        TaskIDResp response = api.removePoolsFromOspDataBackend(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Reweight a pool
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reweightPoolTest() throws Exception {
        Long poolId = null;
        PoolResp response = api.reweightPool(poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Switch pool role to compound
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void switchPoolRoleTest() throws Exception {
        Long poolId = null;
        PoolResp response = api.switchPoolRole(poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * update crush rule with EC pool
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateECPoolCrushRuleTest() throws Exception {
        ECPoolUpdateCrushRuleReq body = null;
        Long poolId = null;
        PoolResp response = api.updateECPoolCrushRule(body, poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * update pool info
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePoolTest() throws Exception {
        PoolUpdateReq body = null;
        Long poolId = null;
        PoolResp response = api.updatePool(body, poolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * update pool gc policy plan
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePoolGCPolicyPlanTest() throws Exception {
        PoolGCPolicyPlan body = null;
        Long poolId = null;
        api.updatePoolGCPolicyPlan(body, poolId);

        // TODO: test validations
    }
}
