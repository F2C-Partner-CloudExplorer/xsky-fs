/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.model.MultiObjectStorageBucketsSamplesResp;
import xio.sds.client.model.OSBucketAddReplicationPathsReq;
import xio.sds.client.model.OSBucketAddReplicationZonesReq;
import xio.sds.client.model.OSBucketCustomLabelsAddReq;
import xio.sds.client.model.OSBucketCustomLabelsRemoveReq;
import xio.sds.client.model.OSBucketCustomLabelsUpdateReq;
import xio.sds.client.model.OSBucketMetadataSearchSetReq;
import xio.sds.client.model.OSBucketOriginPullSamplesResp;
import xio.sds.client.model.OSBucketPolicySetReq;
import xio.sds.client.model.OSBucketRemoveLoggingsReq;
import xio.sds.client.model.OSBucketRemoveReplicationPathsReq;
import xio.sds.client.model.OSBucketRemoveReplicationZonesReq;
import xio.sds.client.model.OSBucketSetAccessLoggingReq;
import xio.sds.client.model.OSBucketSetObjectStorageClassReq;
import xio.sds.client.model.OSBucketSwitchOwnerOSZoneReq;
import xio.sds.client.model.OSBucketUpdateReplicationPathsReq;
import xio.sds.client.model.ObjectStorageBucketCreateReq;
import xio.sds.client.model.ObjectStorageBucketNFSClientResp;
import xio.sds.client.model.ObjectStorageBucketNFSClientUpdateReq;
import xio.sds.client.model.ObjectStorageBucketNFSClientsCreateReq;
import xio.sds.client.model.ObjectStorageBucketNFSClientsDeleteReq;
import xio.sds.client.model.ObjectStorageBucketNFSClientsResp;
import xio.sds.client.model.ObjectStorageBucketResp;
import xio.sds.client.model.ObjectStorageBucketSamplesResp;
import xio.sds.client.model.ObjectStorageBucketUpdateReq;
import xio.sds.client.model.ObjectStorageBucketsResp;
import xio.sds.client.model.ObjectStorageLifecycleSetReq;
import xio.sds.client.model.RawObjectStorageBucketResp;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for OsBucketsApi
 */
@Ignore
public class OsBucketsApiTest {

    private final OsBucketsApi api = new OsBucketsApi();

    /**
     * 
     *
     * add object storage bucket custom labels
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addCustomLabelsTest() throws Exception {
        OSBucketCustomLabelsAddReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.addCustomLabels(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * add os replication paths for os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addOSReplicationPathsTest() throws Exception {
        OSBucketAddReplicationPathsReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.addOSReplicationPaths(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * add os replication zones for os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addOSReplicationZonesTest() throws Exception {
        OSBucketAddReplicationZonesReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.addOSReplicationZones(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get samples of multiple object storage buckets
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void batchGetObjectStorageSamplesTest() throws Exception {
        String ids = null;
        MultiObjectStorageBucketsSamplesResp response = api.batchGetObjectStorageSamples(ids);

        // TODO: test validations
    }
    /**
     * 
     *
     * cancel delete bucket task
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelDeleteBucketTest() throws Exception {
        Long bucketId = null;
        ObjectStorageBucketResp response = api.cancelDeleteBucket(bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createBucketTest() throws Exception {
        ObjectStorageBucketCreateReq body = null;
        String clusterId = null;
        ObjectStorageBucketResp response = api.createBucket(body, clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * create nfs client
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createObjectStorageBucketNFSClientsTest() throws Exception {
        ObjectStorageBucketNFSClientsCreateReq body = null;
        Long bucketId = null;
        RawObjectStorageBucketResp response = api.createObjectStorageBucketNFSClients(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * delete object storage bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteBucketTest() throws Exception {
        Long bucketId = null;
        Boolean force = null;
        ObjectStorageBucketResp response = api.deleteBucket(bucketId, force);

        // TODO: test validations
    }
    /**
     * 
     *
     * delete nfs clients
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteObjectStorageBucketNFSClientsTest() throws Exception {
        ObjectStorageBucketNFSClientsDeleteReq body = null;
        Long bucketId = null;
        RawObjectStorageBucketResp response = api.deleteObjectStorageBucketNFSClients(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * delete object storage lifecycle
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteObjectStorageLifecycleTest() throws Exception {
        Long bucketId = null;
        ObjectStorageBucketResp response = api.deleteObjectStorageLifecycle(bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get object storage bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBucketTest() throws Exception {
        Long bucketId = null;
        ObjectStorageBucketResp response = api.getBucket(bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get an os bucket&#x27;s origin pull Samples
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOSBucketOriginPullSamplesTest() throws Exception {
        Long bucketId = null;
        String originMode = null;
        String durationBegin = null;
        String durationEnd = null;
        String period = null;
        OSBucketOriginPullSamplesResp response = api.getOSBucketOriginPullSamples(bucketId, originMode, durationBegin, durationEnd, period);

        // TODO: test validations
    }
    /**
     * 
     *
     * show nfs client
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getObjectStorageBucketNFSClientTest() throws Exception {
        Long bucketId = null;
        Long clientId = null;
        ObjectStorageBucketNFSClientResp response = api.getObjectStorageBucketNFSClient(bucketId, clientId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get an object storage bucket&#x27;s Samples
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getObjectStorageBucketSamplesTest() throws Exception {
        Long bucketId = null;
        String durationBegin = null;
        String durationEnd = null;
        String period = null;
        ObjectStorageBucketSamplesResp response = api.getObjectStorageBucketSamples(bucketId, durationBegin, durationEnd, period);

        // TODO: test validations
    }
    /**
     * 
     *
     * List object storage buckets
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listBucketsTest() throws Exception {
        String clusterId = null;
        Long limit = null;
        Long offset = null;
        String name = null;
        Long osPolicyId = null;
        Long osUserId = null;
        String replicationUuid = null;
        Boolean virtual = null;
        String q = null;
        String sort = null;
        ObjectStorageBucketsResp response = api.listBuckets(clusterId, limit, offset, name, osPolicyId, osUserId, replicationUuid, virtual, q, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * List nfs clients
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listObjectStorageBucketNFSClientsTest() throws Exception {
        Long bucketId = null;
        Long limit = null;
        Long offset = null;
        String clusterId = null;
        ObjectStorageBucketNFSClientsResp response = api.listObjectStorageBucketNFSClients(bucketId, limit, offset, clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * remove object storage bucket custom labels
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeCustomLabelsTest() throws Exception {
        OSBucketCustomLabelsRemoveReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.removeCustomLabels(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Remove os bucket loggings of os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeOSBucketLoggingsTest() throws Exception {
        OSBucketRemoveLoggingsReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.removeOSBucketLoggings(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * remove os replication paths for os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeOSReplicationPathsTest() throws Exception {
        OSBucketRemoveReplicationPathsReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.removeOSReplicationPaths(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * remove os replication zones for os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeOSReplicationZonesTest() throws Exception {
        OSBucketRemoveReplicationZonesReq body = null;
        Long bucketId = null;
        Boolean force = null;
        ObjectStorageBucketResp response = api.removeOSReplicationZones(body, bucketId, force);

        // TODO: test validations
    }
    /**
     * 
     *
     * Set access logging of os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setAccessLoggingTest() throws Exception {
        OSBucketSetAccessLoggingReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.setAccessLogging(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * set object storage bucket metadata search
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setMetadataSearchTest() throws Exception {
        OSBucketMetadataSearchSetReq body = null;
        Long bucketId = null;
        ObjectStorageBucketsResp response = api.setMetadataSearch(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * set object storage bucket policy
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setOSBucketPolicyTest() throws Exception {
        OSBucketPolicySetReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.setOSBucketPolicy(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Set bucket object match storage class
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setObjectStorageClassTest() throws Exception {
        OSBucketSetObjectStorageClassReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.setObjectStorageClass(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Set object storage lifecycle rules
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setObjectStorageLifecycleRulesTest() throws Exception {
        ObjectStorageLifecycleSetReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.setObjectStorageLifecycleRules(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * suspend access logging for os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void suspendAccessLoggingsTest() throws Exception {
        Long bucketId = null;
        ObjectStorageBucketResp response = api.suspendAccessLoggings(bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * suspend os replication paths for os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void suspendOSReplicationPathsTest() throws Exception {
        OSBucketUpdateReplicationPathsReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.suspendOSReplicationPaths(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Switch owner zone of os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void switchOwnerOSZoneTest() throws Exception {
        OSBucketSwitchOwnerOSZoneReq body = null;
        Long bucketId = null;
        Boolean force = null;
        ObjectStorageBucketResp response = api.switchOwnerOSZone(body, bucketId, force);

        // TODO: test validations
    }
    /**
     * 
     *
     * Unset access logging of os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsetAccessLoggingTest() throws Exception {
        Long bucketId = null;
        ObjectStorageBucketResp response = api.unsetAccessLogging(bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * unset object storage bucket policy
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsetOSBucketPolicyTest() throws Exception {
        Long bucketId = null;
        ObjectStorageBucketResp response = api.unsetOSBucketPolicy(bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * unsuspend access logging for os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsuspendAccessLoggingTest() throws Exception {
        Long bucketId = null;
        ObjectStorageBucketResp response = api.unsuspendAccessLogging(bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * unsuspend os replication paths for os bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsuspendOSReplicationPathsTest() throws Exception {
        OSBucketUpdateReplicationPathsReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.unsuspendOSReplicationPaths(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update object storage bucket
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateBucketTest() throws Exception {
        ObjectStorageBucketUpdateReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.updateBucket(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * update object storage bucket custom labels
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCustomLabelsTest() throws Exception {
        OSBucketCustomLabelsUpdateReq body = null;
        Long bucketId = null;
        ObjectStorageBucketResp response = api.updateCustomLabels(body, bucketId);

        // TODO: test validations
    }
    /**
     * 
     *
     * update nfs client
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateObjectStorageBucketNFSClientTest() throws Exception {
        ObjectStorageBucketNFSClientUpdateReq body = null;
        Long bucketId = null;
        Long clientId = null;
        ObjectStorageBucketNFSClientResp response = api.updateObjectStorageBucketNFSClient(body, bucketId, clientId);

        // TODO: test validations
    }
}
