/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.model.DfsQuotaCreateReq;
import xio.sds.client.model.DfsQuotaOverviewResp;
import xio.sds.client.model.DfsQuotaPathValidateResp;
import xio.sds.client.model.DfsQuotaPredictionsResp;
import xio.sds.client.model.DfsQuotaResp;
import xio.sds.client.model.DfsQuotaSamplesResp;
import xio.sds.client.model.DfsQuotaUpdateReq;
import xio.sds.client.model.DfsQuotasResp;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DfsQuotasApi
 */
@Ignore
public class DfsQuotasApiTest {

    private final DfsQuotasApi api = new DfsQuotasApi();

    /**
     * 
     *
     * Create dfs quota
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDfsQuotaTest() throws Exception {
        DfsQuotaCreateReq body = null;
        Boolean allowPathCreate = null;
        DfsQuotaResp response = api.createDfsQuota(body, allowPathCreate);

        // TODO: test validations
    }
    /**
     * 
     *
     * delete dfs quota
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDfsQuotaTest() throws Exception {
        Long dfsQuotaId = null;
        DfsQuotaResp response = api.deleteDfsQuota(dfsQuotaId);

        // TODO: test validations
    }
    /**
     * 
     *
     * dfs quota overview about type and status
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void dfsQuotaOverviewTest() throws Exception {
        DfsQuotaOverviewResp response = api.dfsQuotaOverview();

        // TODO: test validations
    }
    /**
     * 
     *
     * Get dfs quota
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDfsQuotaTest() throws Exception {
        Long dfsQuotaId = null;
        DfsQuotaResp response = api.getDfsQuota(dfsQuotaId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get a quota&#x27;s prediction
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDfsQuotaPredictionsTest() throws Exception {
        Long dfsQuotaId = null;
        DfsQuotaPredictionsResp response = api.getDfsQuotaPredictions(dfsQuotaId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get a dfs quota&#x27;s samples
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDfsQuotaSamplesTest() throws Exception {
        Long dfsQuotaId = null;
        String durationBegin = null;
        String durationEnd = null;
        String period = null;
        DfsQuotaSamplesResp response = api.getDfsQuotaSamples(dfsQuotaId, durationBegin, durationEnd, period);

        // TODO: test validations
    }
    /**
     * 
     *
     * List dfs quotas
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listDfsQuotasTest() throws Exception {
        String path = null;
        String type = null;
        String domainUserName = null;
        String domainUserGroupName = null;
        Long fsUserId = null;
        Long fsUserGroupId = null;
        Long limit = null;
        Long offset = null;
        String q = null;
        String sort = null;
        String clusterId = null;
        DfsQuotasResp response = api.listDfsQuotas(path, type, domainUserName, domainUserGroupName, fsUserId, fsUserGroupId, limit, offset, q, sort, clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * validate a path for dfs quota
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pathValidatorTest() throws Exception {
        Long dfsRootfsId = null;
        String path = null;
        DfsQuotaPathValidateResp response = api.pathValidator(dfsRootfsId, path);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update dfs quota
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDfsQuotaTest() throws Exception {
        DfsQuotaUpdateReq body = null;
        Long dfsQuotaId = null;
        DfsQuotaResp response = api.updateDfsQuota(body, dfsQuotaId);

        // TODO: test validations
    }
}
