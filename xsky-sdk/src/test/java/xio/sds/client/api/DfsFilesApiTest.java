/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.model.ChmodReq;
import xio.sds.client.model.DfsFileBasesResp;
import xio.sds.client.model.DfsFileDeleteReq;
import xio.sds.client.model.DfsFileResp;
import xio.sds.client.model.DfsFilesResp;
import java.io.File;
import xio.sds.client.model.RenameDfsFileReq;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DfsFilesApi
 */
@Ignore
public class DfsFilesApiTest {

    private final DfsFilesApi api = new DfsFilesApi();

    /**
     * 
     *
     * Set file mode
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void chmodTest() throws Exception {
        ChmodReq body = null;
        api.chmod(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * delete dfs file from rootfs
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDfsFileTest() throws Exception {
        DfsFileDeleteReq body = null;
        api.deleteDfsFile(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Download a file from dfs
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void downloadDfsFileTest() throws Exception {
        String path = null;
        Long rootfsId = null;
        File response = api.downloadDfsFile(path, rootfsId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Find files in dfs
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findDfsFilesTest() throws Exception {
        String path = null;
        Long rootfsId = null;
        String type = null;
        DfsFileBasesResp response = api.findDfsFiles(path, rootfsId, type);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get report of a gfs log
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDfsLogReportTest() throws Exception {
        Long dfsRootfsId = null;
        String paths = null;
        File response = api.getDfsLogReport(dfsRootfsId, paths);

        // TODO: test validations
    }
    /**
     * 
     *
     * List dfs files in a directory
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listDfsFilesTest() throws Exception {
        Long rootfsId = null;
        Long limit = null;
        String path = null;
        String start = null;
        String prefix = null;
        String type = null;
        Boolean worm = null;
        Boolean reverse = null;
        Boolean pageUp = null;
        Boolean hidden = null;
        DfsFilesResp response = api.listDfsFiles(rootfsId, limit, path, start, prefix, type, worm, reverse, pageUp, hidden);

        // TODO: test validations
    }
    /**
     * 
     *
     * rename dfs file
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void renameDfsFileTest() throws Exception {
        RenameDfsFileReq body = null;
        api.renameDfsFile(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get dfs file Stat
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void statDfsFileTest() throws Exception {
        Long rootfsId = null;
        String path = null;
        DfsFileResp response = api.statDfsFile(rootfsId, path);

        // TODO: test validations
    }
}
