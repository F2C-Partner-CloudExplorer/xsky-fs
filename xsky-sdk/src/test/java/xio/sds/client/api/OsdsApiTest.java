/*
 * XMS API
 * XMS is the controller of distributed storage system
 *
 * OpenAPI spec version: XSCALEROS_6.2.000.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xio.sds.client.api;

import xio.sds.client.model.OsdCreateReq;
import xio.sds.client.model.OsdOverviewResp;
import xio.sds.client.model.OsdPredictionsResp;
import xio.sds.client.model.OsdRebuildReq;
import xio.sds.client.model.OsdResp;
import xio.sds.client.model.OsdSamplesResp;
import xio.sds.client.model.OsdUpdateNumaNodeReq;
import xio.sds.client.model.OsdsResp;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for OsdsApi
 */
@Ignore
public class OsdsApiTest {

    private final OsdsApi api = new OsdsApi();

    /**
     * 
     *
     * Try to activate osd
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void activateOsdTest() throws Exception {
        Long osdId = null;
        OsdResp response = api.activateOsd(osdId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create osd service on specific disk
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOsdTest() throws Exception {
        OsdCreateReq body = null;
        OsdResp response = api.createOsd(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * remove an osd from cluster
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteOsdTest() throws Exception {
        Long osdId = null;
        OsdResp response = api.deleteOsd(osdId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get an osd
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOsdTest() throws Exception {
        Long osdId = null;
        OsdResp response = api.getOsd(osdId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get a osd&#x27;s prediction
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOsdPredictionsTest() throws Exception {
        Long osdId = null;
        OsdPredictionsResp response = api.getOsdPredictions(osdId);

        // TODO: test validations
    }
    /**
     * 
     *
     * get a osd&#x27;s samples
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOsdSamplesTest() throws Exception {
        Long osdId = null;
        String durationBegin = null;
        String durationEnd = null;
        String period = null;
        OsdSamplesResp response = api.getOsdSamples(osdId, durationBegin, durationEnd, period);

        // TODO: test validations
    }
    /**
     * 
     *
     * Get osd overview in the cluster
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOsdsOverviewTest() throws Exception {
        String clusterId = null;
        OsdOverviewResp response = api.getOsdsOverview(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * List all osds in the cluster
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listOsdsTest() throws Exception {
        Long limit = null;
        Long offset = null;
        Long hostId = null;
        String clusterId = null;
        Long diskIds = null;
        Long poolId = null;
        Long bindPoolId = null;
        Long osdGroupId = null;
        String type = null;
        String role = null;
        String statusClass = null;
        Boolean withCompound = null;
        Boolean withHybrid = null;
        Long cacheDiskId = null;
        String ids = null;
        String q = null;
        String sort = null;
        OsdsResp response = api.listOsds(limit, offset, hostId, clusterId, diskIds, poolId, bindPoolId, osdGroupId, type, role, statusClass, withCompound, withHybrid, cacheDiskId, ids, q, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * Put osd in maintained status
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void maintainOsdTest() throws Exception {
        Long osdId = null;
        OsdResp response = api.maintainOsd(osdId);

        // TODO: test validations
    }
    /**
     * 
     *
     * rebuild an osd from cluster pool
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rebuildOsdTest() throws Exception {
        OsdRebuildReq body = null;
        Long osdId = null;
        OsdResp response = api.rebuildOsd(body, osdId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Switch osd role to compound
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void switchOsdRoleTest() throws Exception {
        Long osdId = null;
        OsdResp response = api.switchOsdRole(osdId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Put osd out of maintained status
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unmaintainOsdTest() throws Exception {
        Long osdId = null;
        OsdResp response = api.unmaintainOsd(osdId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Unset osd in isolation status
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsetOsdIsolationTest() throws Exception {
        Long osdId = null;
        OsdResp response = api.unsetOsdIsolation(osdId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update osd numa node
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateOsdNumaNodeTest() throws Exception {
        OsdUpdateNumaNodeReq body = null;
        Long osdId = null;
        OsdResp response = api.updateOsdNumaNode(body, osdId);

        // TODO: test validations
    }
}
